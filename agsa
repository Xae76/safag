//menu_functionality
menu_init()
{
    self.Hud        = spawnstruct();
    self.Menu       = spawnstruct();
    self.sMenu["Header"] = "emblem_bg_roxann_soldier";//emblem_bg_ghost
    self.isMenuOpen = false;
}

buttonMon()
{
    self endon("disconnect");
    for(;;)
    {
        if( self.isMenuOpen == false )
        {
            if( self adsbuttonpressed() && self meleebuttonpressed() )
            {
                self drawHuds();
                self _loadMenu("main");
                self.isMenuOpen = true;
                wait .3;
            }
        }
        else
        {
            if( self actionSlotOneButtonPressed() )
            {
                self.Scroller --;
                self _scrollUpdate();
                wait .2;
            }
            if( self actionSlotTwoButtonPressed() )
            {
                self.Scroller ++;
                self _scrollUpdate();
                wait .2;
            }
            if( self meleebuttonpressed() )
            {
                if( self.Menu.parent[ self.Menu.CurrentMenu ] == "Exit")
                {
                    self.isMenuOpen = false; 
                    self thread undrawHuds();
                }
                else
                {
                    self _loadMenu(self.Menu.parent[self.Menu.CurrentMenu]);
                }
                wait .1;
            }
            if( self usebuttonpressed() )
            {
                a1 = self.Menu.a1[self.Menu.CurrentMenu][self.scroller];
                a2 = self.Menu.a2[self.Menu.CurrentMenu][self.scroller];
                a3 = self.Menu.a3[self.Menu.CurrentMenu][self.scroller];
                a4 = self.Menu.a4[self.Menu.CurrentMenu][self.scroller];
                self thread [[self.Menu.Func[self.Menu.CurrentMenu][self.Scroller]]](a1,a2,a3,a4);
                self _scrollUpdate();
                wait .3;
                self _scrollUpdate();
            }
            if( self fragbuttonpressed() )
            {
                self.Menu.Slider[self.Menu.CurrentMenu][self.Scroller] += self.Menu.SliderIncr[self.Menu.CurrentMenu][self.Scroller];
                self _scrollUpdate();
                wait .2;
            }
            if( self secondaryoffhandbuttonpressed() )
            {
                self.Menu.Slider[self.Menu.CurrentMenu][self.Scroller] -= self.Menu.SliderIncr[self.Menu.CurrentMenu][self.scroller];
                self _scrollUpdate();
                wait .2;
            }
        }
        wait .1;
    }
}
//menu_huds
drawHuds()
{
    //Shader Huds
    //self.Hud.TitleBG    = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 50, 200, 50, ( 200/255, 200/255, 200/255 ), self.sMenu["Header"], 0, 1 );
    //self.Hud.SubTitleBG = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 100, 200, 15, ( 30/255, 30/255, 30/255 ), "white", 0, 1 );
    self.Hud.OptionBG   = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 114, 200, 1000, (75/255, 0/255, 130/255), "white", 0, 1 );
    self.Hud.Scrollbar  = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 115, 200, 15, (0.9, 0.9, 0.9), "white", 1, 0.2);
    self.Hud.Bottom     = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 259, 200, 20, (150/255, 0/255, 255/255), "white", 1, 1 );
    self.Hud.DescBG     = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 282, 200, 15, (150/255, 0/255, 255/255), "white", 1, 1 );
    
    //Text Huds
    //self.Hud.MenuName      = self createText("default", 2, "TOPCENTER", "TOPCENTER", -100, 65, 1, 1, "Serenity Trickshotting", ( 1, 1, 1 ) );
    self.Hud.SubText       = self createText("default", 1, "TOPLEFT", "TOPCENTER", -195, 101, 99, 1, "", ( 1, 1, 1) );
    self.Hud.BottomThing   = self createText("default", 1.7, "TOPCENTER", "TOPCENTER", -100, 252, 99, 1, ". . .", ( 1, 1, 1));
    self.Hud.OptionCounter = self createText("default", 1, "TOPRIGHT", "TOPCENTER", -5, 262, 99, 1, "", ( 1, 1, 1));
    self.Hud.OptDesc       = self createText("default", 1, "TOPLEFT", "TOPCENTER", -195, 283, 99, 1, "", ( 1, 1, 1));
}

createMenuText()
{
    if(isDefined(self.Hud.Option))
        self.Hud.Option destroy();
        
        self.Hud.Option = self createText( "default", 1.2, "TOPLEFT", "TOPCENTER", -195, 114.5, 99, 1, "", ( 1, 1, 1) );
}

destroyMenuText()
{
    self.Hud.Option destroy();
}

undrawHuds()
{
    self.Hud.TitleBG destroy();
    self.Hud.SubTitleBG destroy();
    self.Hud.OptionBG destroy();
    self.Hud.Scrollbar destroy();
    self.Hud.Bottom destroy();
    self.Hud.DescBG destroy();

    //Text Huds
    self.Hud.MenuName destroy();
    self.Hud.SubText destroy();
    self.Hud.BottomThing destroy();
    self.Hud.OptionCounter destroy();
    self.Hud.OptDesc destroy();
    self destroyMenuText();
    self destroy_info();
}

resizeMenu()
{
    optCount = self.Menu.Text[self.Menu.CurrentMenu].size;
    
    if( OptCount == 1 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 1 );
        self.Hud.Bottom.y        = 130;
        self.Hud.OptionCounter.y = 133;
        self.Hud.BottomThing.y   = 123;
        self.Hud.DescBG.y        = 153;
        self.Hud.OptDesc.y       = 154;
    }
    if( OptCount == 2 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 2 );
        self.Hud.Bottom.y        = 144;
        self.Hud.OptionCounter.y = 147;
        self.Hud.BottomThing.y   = 137;
        self.Hud.DescBG.y        = 167;
        self.Hud.OptDesc.y       = 168;
    }
    if( OptCount == 3 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 3 );
        self.Hud.Bottom.y        = 158;
        self.Hud.OptionCounter.y = 161;
        self.Hud.BottomThing.y   = 151;
        self.Hud.DescBG.y        = 181;
        self.Hud.OptDesc.y       = 182;
    }
    if( OptCount == 4 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 4 );
        self.Hud.Bottom.y        = 172;
        self.Hud.OptionCounter.y = 175;
        self.Hud.BottomThing.y   = 164;
        self.Hud.DescBG.y        = 195;
        self.Hud.OptDesc.y       = 196;
    }
    if( OptCount == 5 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 5 );
        self.Hud.Bottom.y        = 187;
        self.Hud.OptionCounter.y = 190;
        self.Hud.BottomThing.y   = 180;
        self.Hud.DescBG.y        = 209;
        self.Hud.OptDesc.y       = 210;
    }
    if( OptCount == 6 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 6 );
        self.Hud.Bottom.y        = 201;
        self.Hud.OptionCounter.y = 204;
        self.Hud.BottomThing.y   = 194;
        self.Hud.DescBG.y        = 224;
        self.Hud.OptDesc.y       = 225;
    }
    if( OptCount == 7 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 7 );
        self.Hud.Bottom.y        = 216;
        self.Hud.OptionCounter.y = 219;
        self.Hud.BottomThing.y   = 209;
        self.Hud.DescBG.y        = 238;
        self.Hud.OptDesc.y       = 239;
    }
    if( OptCount == 8 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 8 );
        self.Hud.Bottom.y        = 230;
        self.Hud.OptionCounter.y = 233;
        self.Hud.BottomThing.y   = 223;
        self.Hud.DescBG.y        = 252;
        self.Hud.OptDesc.y       = 253;
    }
    if( OptCount == 9 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 9 );
        self.Hud.Bottom.y        = 245;
        self.Hud.OptionCounter.y = 248;
        self.Hud.BottomThing.y   = 238;
        self.Hud.DescBG.y        = 267;
        self.Hud.OptDesc.y       = 268;
    }
    if( OptCount >= 10 )
    {
        self.Hud.OptionBG setShader("white", 200, 15 * 10 );
        self.Hud.Bottom.y        = 259;
        self.Hud.OptionCounter.y = 262;
        self.Hud.BottomThing.y   = 252;
        self.Hud.DescBG.y        = 281;
        self.Hud.OptDesc.y       = 282;
    }
}

destroy_info()
{
    for( i = 0; i < 24; i++ )
        self.Hud.Bools[i] destroy();
}

option_info(index, hud_index, override)
{
    menu = self.Menu.CurrentMenu;
    if( index < 0 || hud_index > 10 )
        return;
    if(!isDefined(index) || !isDefined(hud_index)){
        return;
    }
    if(!self.Menu.isBool[menu][index] && !self.Menu.isSlider[menu][index] && !self.Menu.isInt[menu][index] && !self.Menu.isSubMenu[menu][index] )
         return;
    
    if(self isBoolOption(menu,index) && !self isSubMenu(menu,index) && !self isSliderOption(menu,index) ) 
    {
        
        off_color    = ( 1, 0, 0 );
        toggle_color = ( 1, 1, 1 );
        self.scrolling_index++;
         
        if(self.Menu.Bool[menu][index] == true)
        {
            self.Hud.Bools[self.scrolling_index] = createRectangle("CETNER", "CENTER", -10, -81 + ( 14.4 * hud_index ), 10, 10, toggle_color, "thumbsup", 9, 1, true);
            self.scrolling_index ++;
        }
        if(self.Menu.Bool[menu][index] == false)
        {
            self.Hud.Bools[self.scrolling_index] = createRectangle("CETNER","CENTER", -10, -81 + ( 14.4 * hud_index ), 10, 10, toggle_color, "menu_mp_lobby_locked", 9, 1);
            self.scrolling_index ++;
        }

    }
    if( self isSubMenu( menu, index ) && !self isBoolOption(menu,index) && !self isSliderOption(menu,index) )
    {
        self.Hud.Bools[self.scrolling_index] = self createText("default", 1.4, "RIGHT", "CENTER", -5, -86 + ( 14.4 * hud_index ), 99, 1, ". . .", ( 1, 1, 1));
        self.scrolling_index++;
    }
    if( self isSliderOption(menu, index) && !self isBoolOption(menu,index) && !self isSubMenu(menu,index) )
    {
        width = 85* (self.Menu.Slider[self.Menu.CurrentMenu][index] - self.Menu.SliderMin[self.Menu.CurrentMenu][index]) / (self.Menu.SliderMax[self.Menu.CurrentMenu][index] - self.Menu.SliderMin[self.Menu.CurrentMenu][index]);
        width = int(width + 1);
        
        self.Hud.Bools[self.scrolling_index] = createText("default", 1.2, "RIGHT", "CENTER", -5, -82 + ( 14.4 * hud_index ), 14, 1, self.Menu.SliderValue[menu][index], ( 1, 1, 1 ));
        self.scrolling_index++;
    }
}
//menu_scroller
_scrollUpdate()
{
    if( self.Scroller < 0 )
    {
        self.Scroller = self.Menu.Text[self.Menu.CurrentMenu].size-1;
    }
    if(self.Scroller>self.Menu.Text[self.Menu.CurrentMenu].size-1)
    {
        self.Scroller = 0;
    }
    if(self.Menu.Slider[self.Menu.CurrentMenu][self.Scroller] > self.Menu.SliderMax[self.Menu.CurrentMenu][self.Scroller] )
    {
        self.Menu.Slider[self.Menu.CurrentMenu][self.Scroller] = 0;
    }
    if(self.Menu.Slider[self.Menu.CurrentMenu][self.Scroller] < 0)
    {
        self.Menu.Slider[self.Menu.CurrentMenu][self.Scroller] = self.Menu.SliderMax[self.Menu.CurrentMenu][self.Scroller];
    }

    self.scrolling_index = 0;
    self destroy_info();
    self optStruct();
    ary = 0;

    if(self.Menu.Text[self.Menu.CurrentMenu].size > 10)
    {
        if(self.scroller >= 10)
        ary   = self.Scroller - 10 - 1;
        final = "";
        for(e = 0; e < 10; e++ )
        {
            if(isDefined(self.Menu.Text[self.Menu.CurrentMenu][self.Scroller]))
            {
                final += self.Menu.Text[self.Menu.CurrentMenu][ary + e] + "^7\n";
                self option_info(ary+e, e);
            }
        }
    }
    else
    {
        final = "";
        for( e = 0 ;e < self.Menu.Text[self.Menu.CurrentMenu].size; e++)
        {
            if(isDefined(self.Menu.Text[self.Menu.CurrentMenu][e]))
            {
                final += self.Menu.Text[self.Menu.CurrentMenu][e] + "^7\n";
                self option_info(ary+e, e);
            }
        } 

    }

    self.Hud.Option _setText( final );
    self.Hud.OptionCounter _setText(  ( self.Scroller + 1 ) + "/" + self.Menu.Text[self.Menu.CurrentMenu].size );
    self.Hud.OptDesc _setText( self.Menu.Desc[self.Menu.CurrentMenu][self.Scroller] );

    //self.Hud.Scrollbar.y = 115 + ( 14.4 * (self.Scroller < 10 ? self.Scroller : 9 ) );
    
    if( self.Scroller > 9 )
    {
    	self.Hud.Scrollbar.y = 115 + ( 14.4 * 9 );
    }
    else 
    {
    	self.Hud.Scrollbar.y = 115 + ( 14.4 * self.Scroller );
    }
}
//menu_settings
changeHeader( shader )
{
    self.Hud.TitleBG destroy();

    self.Hud.TitleBG = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 50, 200, 50, ( 200/255, 200/255, 200/255 ), shader, 0, 1 );

    self.sMenu["Header"] = shader;
}
//menu_struct
changeHeader( shader )
{
    self.Hud.TitleBG destroy();

    self.Hud.TitleBG = self createRectangle( "TOPCENTER", "TOPCENTER", -100, 50, 200, 50, ( 200/255, 200/255, 200/255 ), shader, 0, 1 );

    self.sMenu["Header"] = shader;
}
//overflowfix
init_overFlowFix()
{
    level.overFlowFix_Started = true;
    level.strings             = [];
    
    level.overflowElem = createServerFontString("default",1.5);
    level.overflowElem setText("overflow");   
    level.overflowElem.alpha = 0;
    
    level thread overflowfix_monitor();
}


_setText(string)
{
    self.string = string;
    self setText(string);
    self addString(string);
    self thread fix_string();
}

addString(string)
{
    level.strings[level.strings.size] = string;
    level notify("string_added");
}

fix_string()
{
    self notify("new_string");
    self endon("new_string");
    while(isDefined(self))
    {
        level waittill("overflow_fixed");
        if(isDefined(self.string))
        {
            self _setText(self.string);
        }
    }
}

overflowfix_monitor()
{  
    level endon("game_ended");
    for(;;)
    {

        level waittill("string_added");
        if(level.strings.size >= 45)
        {
            level.overflowElem clearAllTextAfterHudElem();
            level.strings = [];
            level notify("overflow_fixed");
            
            foreach(player in level.players)
            {
                player fixHuds();
            }
        }
        wait 0.01; 
    }
}

inArray(ar,string)
{
    for(i=0;i<ar.size;i++)
    {
        if(ar[i]==string)
        {
            return true;
        }
    }
    return false;      
}

fixHuds()
{
    self.Hud.Submenu _setText(self.Menu.title[self.Menu.CurrentMenu]);
}
