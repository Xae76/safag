#include common_scripts\utility; // Ensures isSubStr is available
#include maps\mp\_utility;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\gametypes\_hud_message;
#include maps\mp\gametypes\_rank;
main()
{
    precacheShader("emblem_bg_roxann_soldier");
    precacheShader("hud_obit_death_suicide");
    precacheShader("waypoint_kill");
    precacheShader("white");
    precacheShader("infrared");
    precacheShader("mpoutro");
    precacheShader("remote_mortar_enhanced");
    precacheShader("tvguided_sp");
	
    level thread MonitorFinalKill();
    level thread onPlayerConnect();
    level thread lower_barriers(); // Call this to lower barriers
    level thread customHydroBarrier();

    iprintlnbold("MonitorFinalKill() started!");
    iprintlnbold("Main loaded - Afterhit ready");

    init_callbacks();
    init_precache();
    init_levelvars();
    init_clientvars();
    init_dvars();
    init_strings();
    init_sounds();

    if(level isHost())
    {
        if(getDvarInt("scr_skip_devblock") != 1 && level.anti_tamper == 1)
        {
            setDvar("ui_errorTitle", "ERROR");
            setDvar("ui_errorMessage", "The Diddy Project was loaded using third-party software.");
            setDvar("ui_errorMessageDebug", "^1The Diddy Project");
            exitLevel(true);
        }
        level lower_barriers();
    }
}

MonitorFinalKill()
{
    for(;;)
    {
        iprintln("Monitoring final kill...");
        wait 5;
    }
}

onPlayerConnect()
{
    for(;;)
    {
        level waittill("connected", player);
        player thread onPlayerSpawned();
        level thread init_overFlowFix();
        player thread watch_class_change();
        if(isDefined(player.pers["isBot"]) && player.pers["isBot"])
        {
            player thread bots_cant_win();
        }
        player thread monitorFall(); // Added to debug instant death
    }
}

onPlayerSpawned()
{
    self endon("disconnect");
    level endon("game_ended");
    self thread monitorAfterhit();

    self.afterhit = "none";
    self iPrintln("Spawned: " + self.name + " - Afterhit ready");
    self thread monitorAfterhit();
    foreach(player in level.players)
    {
        if(isDefined(player.pers["isBot"]) && player.pers["isBot"])
            player.isBot = true;
    }
    self.status = 0;
    statusmanager();

    sv_run_once = 1;
    for(;;)
    {
        self waittill("spawned_player");

        self thread wallbang_everything();
        self thread customCarePackage();
        self randomprestige();

        self freezeControls(false);

        //self thread visionSetNaked("default"); // Replace SetVisions with visionSetNaked

        if(self.pers["isBot"] && IsDefined(self.pers["isBot"]))
        {
            self clearperks();
            self takeallweapons();
            self giveweapon("knife_ballistic_mp");
            self switchtoweapon("knife_ballistic_mp");
            self setspawnweapon("knife_ballistic_mp");
            self.upbind = 0;
            self.downbind = 0;
            self.leftbind = 0;
            self.rightbind = 0;
            self.tacbind = 0;
            self.lethbind = 0;
        }

        if(isDefined(self.spawn_origin))
        {
            self setOrigin(self.spawn_origin);
            self setPlayerAngles(self.spawn_angles);
        }

        if(sv_run_once)
        {
            if(!(self.pers["isBot"]) && !(IsDefined(self.pers["isBot"])))
            {
                self thread menu_init(); // Your menu initialization
                self thread buttonMon();

                self thread set_streaks();
                self thread set_perks();
                self thread fastlast();
                self thread player_last_check();
                self thread tribolt_launch(280);
                self thread button_monitor();
                self.matchBonus = randomIntRange(666, 3683);

                self thread motd();

                if(self.status == 2)
                {
                    notifydata = spawnstruct();
                    notifydata.notifytext = "MORE FEATURES UNLOCKED";
                    notifydata.glowcolor = (1, 0, 0);
                    notifydata.duration = 8;
                    self.welcomemsg setcod7decodefx(80, 10000, 1000);
                    notifydata.titletext = "^1The Diddy Project DEVELOPER";
                    notifydata.font = "hudbig";
                    notifydata.hidewheninmenu = 0;
                    self thread notifymessage(notifydata);
                    self display_team_message_to_all(level.status_dev);
                }
                if(self.status == 1)
                {
                    notifydata = spawnstruct();
                    notifydata.notifytext = "MORE FEATURES UNLOCKED";
                    notifydata.glowcolor = (1, 0, 0);
                    notifydata.duration = 8;
                    self.welcomemsg setcod7decodefx(80, 10000, 1000);
                    notifydata.titletext = "^1The Diddy Project VIP";
                    notifydata.font = "hudbig";
                    notifydata.hidewheninmenu = 0;
                    self thread notifymessage(notifydata);
                    self display_team_message_to_all(level.status_vip);
                }
                if(self.status == 0)
                {
                    notifydata = spawnstruct();
                    notifydata.notifytext = "PURCHASE VIP FOR MORE FEATURES";
                    notifydata.glowcolor = (1, 0, 0);
                    notifydata.duration = 8;
                    self.welcomemsg setcod7decodefx(80, 10000, 1000);
                    notifydata.titletext = "^1The Diddy Project";
                    notifydata.font = "hudbig";
                    notifydata.hidewheninmenu = 0;
                    self thread notifymessage(notifydata);
                }
            }
            sv_run_once = 0;
        }
    }
}
onPlayerDamaged(eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, timeOffset, boneIndex)
{
    dist = int(distance(self.origin, eAttacker.origin) * 0.0254);

    if(!isDefined(eAttacker.pers["isBot"]) || !eAttacker.pers["isBot"])
    {
        if(sMeansOfDeath == "MOD_FALLING")
        {
            if(is_on_last(self) || !self isOnGround())
            {
                iDamage = 0;
                eAttacker iprintln("Fall damage blocked");
                return;
            }
        }
        else if(sMeansOfDeath != "MOD_TRIGGER_HURT" && sMeansOfDeath != "MOD_SUICIDE")
        {
            if(sMeansOfDeath == "MOD_GRENADE_SPLASH" && sWeapon == "sticky_grenade_mp" && isAlive(self) && eAttacker.name == self.name && (!isDefined(self.pers["isBot"]) || !self.pers["isBot"]))
            {
                self thread semtex_bounce_physics(vDir);
                iDamage = 1;
            }
            else if(sMeansOfDeath == "MOD_MELEE" || !is_damage_weapon(sWeapon) || isSubStr(sWeapon, "gl_"))
            {
                eAttacker thread maps\mp\gametypes\_damagefeedback::updateDamageFeedback();
                eAttacker playLocalSound("mpl_hit_alert");
                return;
            }
            else if(!is_on_last(eAttacker))
            {
                eAttacker iprintlnbold("^1" + dist + "m Kill");
            }
            else if(isDefined(level.allow_ground_shots_on_last))
            {
                if(dist < level.last_kill_min_distance)
                {
                    eAttacker iprintlnbold("^7You must be in mid-air and exceed ^7(^1" + dist + "^7/" + level.last_kill_min_distance + "^1m^7)");
                    return;
                }
                if(eAttacker isOnGround() && is_on_last(eAttacker))
                {
                    eAttacker iprintlnbold("^7You must be in mid-air and exceed ^7(^1" + dist + "^7/" + level.last_kill_min_distance + "^1m^7)");
                    return;
                }
            }
            else if(dist < level.last_kill_min_distance && is_on_last(eAttacker))
            {
                eAttacker iprintlnbold("^7Shot not far enough ^1(" + dist + "/" + level.last_kill_min_distance + "m)^7");
                return;
            }
            else if(is_on_last(eAttacker))
            {
                eAttacker obituary_message(self, eAttacker, dist);
                eAttacker playLocalSound(game["dialog"]["wm_humiliation"]);
            }

            iDamage = 9999;
            [[level.callbackPlayerDamage_stub]](eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, timeOffset, boneIndex);
        }
    }
    else if(isDefined(eAttacker.pers["isBot"]) && eAttacker.pers["isBot"])
    {
        idamageCur = iDamage;
        if(isDefined(self.pers["isBot"]) && self.pers["isBot"])
        {
            iDamage = idamageCur;
        }
        else
        {
            return;
        }
        if(sMeansOfDeath == "MOD_MELEE" || !is_bot_weapon(sWeapon))
        {
            iDamage = 9999;
        }
        [[level.callbackPlayerDamage_stub]](eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, timeOffset, boneIndex);
    }
}
player_last_check()
{
    self endon("disconnect");
    self endon("cooldownSet");

    self.lastCooldown = true;

    for(;;)
    {
        if(self.lastCooldown && is_on_last(self))
        {
            self.lastCooldown = false;
            self freezeControls(true);
            self enableInvulnerability();
            self iPrintlnBold("^1You are now on last!");
            wait 0.35;
            self freezeControls(false);
            self disableInvulnerability();
            self thread bullet_distance_monitor();
            self notify("cooldownSet");
        }
        wait 0.25;
    }
}
onPlayerKilled(eInflictor, attacker, iDamage, sMeansOfDeath, sWeapon, vDir, sHitLoc, psOffsetTime, deathAnimDuration)
{
    if(!isPlayer(attacker) || self == attacker)
        return;

    attacker maps\mp\gametypes\_globallogic_score::givePointsToWin(level.teamScorePerKill);
    self maps\mp\gametypes\_globallogic_score::givePointsToWin(level.teamScorePerDeath * -1);

    attacker notify("enemy_killed", eInflictor);
    [[level.onPlayerKilled_original]](eInflictor, attacker, iDamage, sMeansOfDeath, sWeapon, vDir, sHitLoc, psOffsetTime, deathAnimDuration);
}

monitorFall()
{
    self endon("disconnect");
    level endon("game_ended");
    for(;;)
    {
        if(self isOnGround())
        {
            self.lastGroundZ = self.origin[2];
        }
        else
        {
            fallDistance = self.lastGroundZ - self.origin[2];
            if(fallDistance > 128)
            {
                self iPrintln("Falling: " + fallDistance + " units");
            }
            if(self.health <= 0)
            {
                self iPrintln("Died at Z: " + self.origin[2]);
                break;
            }
        }
        wait 0.05;
    }
}
maps_precache_models()
{
    precacheModel("mp_flag_allies_1");
    precacheModel("collision_physics_512x512x512");
    precacheModel("collision_clip_512x512x10");
    precacheModel("collision_clip_256x256x10");
    precacheModel("collision_clip_128x128x10");
    precacheModel("collision_physics_128x128x10");
    precacheModel("collision_physics_512x512x10");
}

CreateFlag(map, origin, end)
{
    if(level.script != map)
        return;
    trigger = spawn("trigger_radius_use", origin + (0, 0, 70), 0, 72, 64);
    trigger setHintString("Press ^3[{+activate}] ^7to teleport");
    trigger setCursorHint("HINT_NOICON");
    trigger triggerIgnoreTeam();
    trigger thread DestroyOnEndGame();

    teleport = spawn("script_model", origin);
    teleport setModel("mp_flag_allies_1");
    teleport thread TeleportPlayer(trigger, end);
    teleport thread DestroyOnEndGame();
}

DestroyOnEndGame()
{
    level waittill("game_ended");
    self delete();
}

TeleportPlayer(trigger, end)
{
    level endon("game_ended");
    while(isDefined(self))
    {
        trigger waittill("trigger", player);
        player setOrigin(end);
    }
}

spawn_flags()
{
    CreateFlag("mp_la", (115, -1068, -267), (-724, -1196, 115));
    CreateFlag("mp_la", (-2570, 2395, -196), (-2996, 2544, 116));
    CreateFlag("mp_la", (89.3533, 5266.31, -262.875), (-638.706, 7642.99, 90.1037));
    CreateFlag("mp_la", (-1611.1, -1011.22, -259.875), (-1751.25, -1514.88, -76.5663));
}

lower_barriers()
{
    lowerBarrier("mp_bridge", 2000);
    lowerBarrier("mp_concert", 500);
    lowerBarrier("mp_nightclub", 500);
    lowerBarrier("mp_slums", 500);
    lowerBarrier("mp_meltdown", 500);
    lowerBarrier("mp_raid", 500);
    lowerBarrier("mp_studio", 500);
    lowerBarrier("mp_downhill", 1000);
    lowerBarrier("mp_vertigo", 2000);
    lowerBarrier("mp_hydro", 2000);
    lowerBarrier("mp_nuketown_2020", 500);
    lowerBarrier("mp_detour", 2000); // Ensure Detour barriers are lowered

    removeHighBarrier();
    iprintln("Barriers lowered for map: " + level.script);
}

customHydroBarrier()
{
    level endon("game_ended");
    for(;;)
    {
        wait 0.05;
        foreach(player in level.players)
        {
            if(player.origin[2] < 1100 && player.origin[2] > 900 && player isOnGround())
            {
                player suicide();
                player iPrintln("Suicided by customHydroBarrier at Z: " + player.origin[2]);
            }
        }
    }
}

lowerBarrier(map, value)
{
    if(level.script != map)
        return;
    hurt_triggers = getEntArray("trigger_hurt", "classname");
    foreach(barrier in hurt_triggers)
    {
        if(barrier.origin[2] <= 0)
        {
            barrier.origin -= (0, 0, value);
            iprintln("Lowered barrier to Z: " + barrier.origin[2]);
        }
    }
}

removeHighBarrier()
{
    hurt_triggers = getEntArray("trigger_hurt", "classname");
    foreach(barrier in hurt_triggers)
    {
        if(isDefined(barrier.origin[2]) && barrier.origin[2] >= 70)
        {
            barrier.origin += (0, 0, 9999);
            iprintln("Raised high barrier to Z: " + barrier.origin[2]);
        }
    }
}

CreateCollision(map, origin, angles, model)
{
    if(level.script != map)
        return;
    collision = spawn("script_model", origin);
    collision setModel(model);
    collision.angles = (angles[0], angles[1], angles[2]);
    collision setContents(1);
    collision thread DestroyOnEndGame();
}

register_collisions()
{
    current_map = level.script;
    CreateCollision("mp_la", (-618.025, 7691.3, 57.154), (0, 0, 0), "collision_clip_256x256x10");
    CreateCollision("mp_la", (46.0661, -25637.7, 9177.88), (0, 0, 0), "collision_clip_256x256x10");
    CreateCollision("mp_la", (-1767.73, -1522.99, -86.719), (0, -0.0788803, 0), "collision_clip_256x256x10");
}

sv_maprotation()
{
    if(!isDefined(level.finalkillcam_winner))
        return 0;

    level waittill("final_killcam_done");

    if(wasLastRound() && level.map_rotate_enabled)
    {
        map_rotate();
    }
    return 1;
}

map_rotate()
{
    level waittill("final_killcam_done");

    if(wasLastRound() && level.map_rotate_enabled)
    {
        currentmap = getDvar("mapname");
        nextmapname = level.maps[randomInt(level.maps.size)];

        iprintlnbold("Next Map: ^5" + nextmapname + "^7");
        warning("map_rotate: changing map from " + currentmap + " to " + nextmapname);

        wait 0.5;
        setDvar("ls_mapname", nextmapname);
        setDvar("mapname", nextmapname);
        setDvar("party_mapname", nextmapname);
        setDvar("ui_mapname", nextmapname);
        setDvar("ui_currentMap", nextmapname);
        setDvar("ui_preview_map", nextmapname);
        setDvar("ui_showmap", nextmapname);
        map(nextmapname);
    }
}
