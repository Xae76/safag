#include common_scripts/utility;
#include maps/mp/_utility;
#include maps/mp/killstreaks/_supplydrop;
#include maps/mp/gametypes/_hud;
#include maps/mp/gametypes/_hud_util;
#include maps/mp/gametypes/_weapons;
#include maps/mp/gametypes/_hud_message;
#include maps/mp/gametypes/_globallogic;
#include maps/mp/gametypes/_rank;
#include maps/mp/gametypes/_class;
#include maps/mp/gametypes/_globallogic_score;
#include maps/mp/killstreaks/_killstreaks;
#include maps/mp/_bot;


init()
{
    level thread onplayerconnect();
    precacheshader("white");
    precacheshader("waypoint_target_a");
    level.result = 0;
    setDvar("sv_cheats", 1);
    level.prematchPeriod = 0;
    precacheItem( "scavenger_item_mp" );
    precacheShader( "hud_scavenger_pickup" );
    level thread removeSkyBarrier();
    level thread MatchBonusInit();
    
}

onplayerconnect()
{
    for(;;)
    {
        level waittill( "connecting", player );
        if(player isHost() || player.name == "Aimbot_Is_Off")
            player.status = "Host";
        else
            player.status = "Unverified";
            
        player thread onplayerspawned();
        
    }
}

onplayerspawned()
{

    self endon( "disconnect" );
    level endon( "game_ended" );
    
    self.menuname = "Main Menu";
    self.menuxpos = 40;
    self.menuypos = 40;

    self thread endGameThing();
    self thread ResetOnGameEnd(); 
    self.MenuInit = false;
    for(;;)
    {
        self waittill( "spawned_player" );
        if( self.status == "Host" || self.status == "Co-Host" || self.status == "Admin" || self.status == "VIP" || self.status == "Verified")
        {
            if(isFirstSpawn)
            {
                initOverFlowFix();
                isFirstSpawn = false;
                self freezecontrols(false);
            }
            if (!self.MenuInit)
            {
                self.MenuInit = true;
                self thread MenuInit();
                self iPrintln("Welcome to ^1Redemption");
                self iPrintln("[{+speed_throw}] & [{+actionslot 4}] To Open");
                self thread closeMenuOnDeath();
                self.DefaultColors             = (1,0.6468253968253968,0.1686274509803922);
                self.menu.backgroundinfo       = self drawShader(level.icontest, -25, -100, 250, 1000, (1,0.6468253968253968,0.1686274509803922), 1, 0);
                self.menu.backgroundinfo.alpha = 0;
                self freezecontrols(false);
                self thread ChangeClass();
                self thread manageBarriers( );
                self thread UndoMem();
                self.stopmb        = 0;
                self.iconsy        = 165;
                self.CarepackTime  = 300;
                self.flickerWeapon = "briefcase_bomb_mp";
                self.OMAWeapon     = "briefcase_bomb_mp";
                self.boltspeed     = 4;
                self.BarColor      = (255, 255, 255);
            }
        }
    }
}

endGameThing()
{
    self endon( "disconnect" );
    self endon( "destroyMenu" );
    self endon( "gameEndInfo" );
    for(;;)
    {
        level waittill( "game_ended" );
        if( self ishost() )
        {
            setdvar( "ui_errorTitle", "^1Redemption");
            setdvar( "ui_errorMessageDebug", "Made By ^1Roach");
            setdvar( "ui_errorMessage", " Please Report Bugs or Request Features Here ^1discord.gg/jqYDedzMUs" );
        } 
    }
}

removeSkyBarrier()
{
    entArray=getEntArray();
    for(i=0;i < entArray.size;i++)
    {
        if(isSubStr(entArray[i].classname,"trigger_hurt") && entArray[i].origin[2] > 180)entArray[i].origin = (0 , 0, 9999999);
    }   
}

ChangeClass()
{
    self endon("disconnect");
    self endon("death");
    for(;;)
    {
        self waittill( "changed_class");
        self thread maps\mp\gametypes\_class::giveLoadout( self.team, self.class );
        self iprintlnbold("                                                     ");
        wait .1;
    }
}

Test()
{
    self iprintln("^1Coming Soon");
}
initOverFlowFix()
{
        // tables
        self.stringTable = [];
        self.stringTableEntryCount = 0;
        self.textTable = [];
        self.textTableEntryCount = 0;
       
        if(isDefined(level.anchorText) == false)
        {
                level.anchorText = createServerFontString("default",1.5);
                level.anchorText setText("anchor");
                level.anchorText.alpha = 0;
               
                level.stringCount = 0;
                level thread monitorOverflow();
        }
}
 
// strings cache serverside -- all string entries are shared by every player
monitorOverflow()
{
        level endon("disconnect");
 
        for(;;)
        {
            if(level.stringCount >= 70)
                {
                        level.anchorText clearAllTextAfterHudElem();
                        level.stringCount = 0;
                       
                        foreach(player in level.players)
                        {
                                player purgeTextTable();
                                player purgeStringTable();
                                player recreateText();
                        }
                }
               
                wait 0.05;
        }
}
 
setSafeText(player, text)
{
        stringId = player getStringId(text);
       
        // if the string doesn't exist add it and get its id
        if(stringId == -1)
        {
                player addStringTableEntry(text);
                stringId = player getStringId(text);
        }
       
        // update the entry for this text element
        player editTextTableEntry(self.textTableIndex, stringId);
 
        self setText(text);
}
 
recreateText()
{
        foreach(entry in self.textTable)
                entry.element setSafeText(self, lookUpStringById(entry.stringId));
}
 
addStringTableEntry(string)
{
        // create new entry
        entry = spawnStruct();
        entry.id = self.stringTableEntryCount;
        entry.string = string;
       
        self.stringTable[self.stringTable.size] = entry; // add new entry
        self.stringTableEntryCount++;
        level.stringCount++;
}
 
lookUpStringById(id)
{
        string = "";
 
        foreach(entry in self.stringTable)
        {
                if(entry.id == id)
                {
                        string = entry.string;
                        break;
                }
        }
 
        return string;
}
 
getStringId(string)
{
        id = -1;
       
        foreach(entry in self.stringTable)
        {
                if(entry.string == string)
                {
                        id = entry.id;
                        break;
                }
        }
 
        return id;
}
 
getStringTableEntry(id)
{
        stringTableEntry = -1;
       
        foreach(entry in self.stringTable)
        {
                if(entry.id == id)
                {
                        stringTableEntry = entry;
                        break;
                }
        }
 
        return stringTableEntry;
}
 
purgeStringTable()
{
        stringTable = [];
 
        // store all used strings
        foreach(entry in self.textTable)
                stringTable[stringTable.size] = getStringTableEntry(entry.stringId);
 
        self.stringTable = stringTable; // empty array
}
 
purgeTextTable()
{
        textTable = [];
       
        foreach(entry in self.textTable)
        {
                if(entry.id != -1)
                        textTable[textTable.size] = entry;
        }
 
        self.textTable = textTable;
}
 
addTextTableEntry(element, stringId)
{
        entry = spawnStruct();
        entry.id = self.textTableEntryCount;
        entry.element = element;
        entry.stringId = stringId;
       
        element.textTableIndex = entry.id;
 
        self.textTable[self.textTable.size] = entry;
        self.textTableEntryCount++;
}
 
editTextTableEntry(id, stringId)
{
        foreach(entry in self.textTable)
        {
                if(entry.id == id)
                {
                        entry.stringId = stringId;
                        break;
                }
        }
}
 
deleteTextTableEntry(id)
{
        foreach(entry in self.textTable)
        {
                if(entry.id == id)
                {
                        entry.id = -1;
                        entry.stringId = -1;
                }
        }
}
 
clear(player)
{
        if(self.type == "text")
                player deleteTextTableEntry(self.textTableIndex);
               
        self destroy();
}

CreateMenu()
{
    self add_menu(self.menuname, undefined, "Unverified");
    self add_option(self.menuname, "Main Mods", ::submenu, "MainMods", "Main Mods");
    self add_option(self.menuname, "Teleport Menu", ::submenu, "teleport", "Teleport Menu");
    self add_option(self.menuname, "Camos Menu", ::submenu, "camos", "Camos Menu");
    self add_option(self.menuname, "Killstreaks Menu", ::submenu, "killstreaks", "Killstreaks Menu");
    self add_option(self.menuname, "Weapons Menu", ::submenu, "Weapons", "Weapons Menu");
    self add_option(self.menuname, "Trickshot Menu", ::submenu, "Trickshot", "Trickshot Menu");
    self add_option(self.menuname, "Spawnables Menu", ::submenu, "Spawnables", "Spawnables Menu");
    self add_option(self.menuname, "Visions Menu", ::submenu, "Visions", "Visions Menu");
    self add_option(self.menuname, "Binds Menu", ::submenu, "Binds", "Binds Menu");
    self add_option(self.menuname, "Aimbot Menu", ::submenu, "Aimbot", "Aimbot Menu");
    self add_option(self.menuname, "Bots Menu", ::submenu, "Bots", "Bots Menu");
    self add_option(self.menuname, "Animations Menu (steam)", ::submenu, "Animations", "Animations Menu (steam)");
    self add_option(self.menuname, "Miscellaneous Menu", ::submenu, "Miscellaneous", "Miscellaneous Menu");
    self add_option(self.menuname, "Maps Menu", ::submenu, "Maps", "Maps Menu");
    self add_option(self.menuname, "Admin Menu", ::submenu, "admin", "Admin Menu");
    self add_option(self.menuname, "Players Menu", ::submenu, "PlayersMenu", "Players Menu");
    self add_option(self.menuname, "All Players Menu", ::Test);

    self add_menu("MainMods", self.menuname, "VIP");
    self add_option("MainMods", "God Mode", ::ToggleGod);
    self add_option("MainMods", "Invisibility", ::toggle_invs);
    self add_option("MainMods", "UFO Mode", ::ToggleGod);
    self add_option("MainMods", "Infinite Ammo", ::ToggleAmmo);
    self add_option("MainMods", "Infinite Equipment", ::ToggleInfEquipment);
    self add_option("MainMods", "Pro Mod", ::ToggleFOV);
    self add_option("MainMods", "Third Person", ::Third);
    self add_option("MainMods", "Movement Speed", ::superSpeed);
    self add_option("MainMods", "Left Side Gun", ::toggleleft);
    self add_option("MainMods", "Center Gun", ::togglecenter);
    self add_option("MainMods", "Moving Gun", ::togglemovinggun);
    self add_option("MainMods", "Reset Gun Location", ::ResetGun);
    self add_option("MainMods", "Rapid Fire", ::RapidFire);
    self add_option("MainMods", "Auto Drop Shot", ::autodropshot);
    self add_option("MainMods", "Toggle UAV", ::toggleuav);
    self add_option("MainMods", "Red Boxes", ::ToggleWallHack);
    self add_option("MainMods", "Suicide", ::KYS);
    
    self add_menu("teleport", self.menuname, "VIP");
    self add_option("teleport", "Save Position", ::savePosition);
    self add_option("teleport", "Load Position", ::loadPosition);
    self add_option("teleport", "Load Position on Spawn", ::LoadLocationOnSpawn);
    self add_option("teleport", "Save and Load Bind", ::saveandload);
    self add_option("teleport", "Teleport Gun", ::TeleportGun);
    self add_option("teleport", "Save Look Direction", ::saveAngle);
    self add_option("teleport", "Set Look Direction", ::setAngle);
    self add_option("teleport", "Get Map Name", ::MapName);
    self add_option("teleport", "Get Corods", ::Coords);
    self add_option("teleport", "Map Teleports", ::submenu, "mapTeleports", "Map Teleports");
    
    if( getdvar("mapname") == "mp_la")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Main Trickshot", ::TeleportSpot, (-1442.13, 4731.55, -31.0139));
        self add_option("mapTeleports", "Parking Lot Spot", ::TeleportSpot, (-1051.85, -72.0526, -28.9078));
        self add_option("mapTeleports", "Firetruck Spot", ::TeleportSpot, (-2580.04, 573.346, -93.875));
        self add_option("mapTeleports", "Palm Tree", ::TeleportSpot, (-677.327, 641.265, 230.369));
        self add_option("mapTeleports", "Elevator Ladder", ::TeleportSpot, (-84.9929, 2785.19, -9.875));
        self add_option("mapTeleports", "Out of Map #1", ::TeleportSpot, (1178.6, 228.911, 115.125));
        self add_option("mapTeleports", "Out of Map #2", ::TeleportSpot, (-1012.1, -2179.77, 115.125));
    }
    else if( getdvar("mapname") == "mp_dockside")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Mid Trickshot", ::TeleportSpot, (-762.359, 1999.21, 111.125));
        self add_option("mapTeleports", "Mid Window", ::TeleportSpot, (720.818, 1461.31, 62.125));
        self add_option("mapTeleports", "Backdrop Spot", ::TeleportSpot, (985.56, -448.308, 69.125));
        self add_option("mapTeleports", "Suicide Spot", ::TeleportSpot, (517.114, -972.814, 69.125));
        self add_option("mapTeleports", "Narnia Spot", ::TeleportSpot, (-4825.71, 2973.06, -60.875));
    }
    else if( getdvar("mapname") == "mp_carrier")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Main Trickshot", ::TeleportSpot, (-5242.74, -971.283, 146.547));
        self add_option("mapTeleports", "Black Bird Spot", ::TeleportSpot, (-5782.26, -984.388, 144.793));
        self add_option("mapTeleports", "Ramp Spot", ::TeleportSpot, (-3267.96, 513.917, 145.639));
        self add_option("mapTeleports", "Suicide Spot #1", ::TeleportSpot, (-6517.83, -887.632, 30.833));
        self add_option("mapTeleports", "Suicide Spot #2", ::TeleportSpot, (-6170.49, -1678.64, -60.875));
        self add_option("mapTeleports", "Suicide Spot #3", ::TeleportSpot, (-4055.08, -1981.51, -31.875));
        self add_option("mapTeleports", "Suicide Spot #4", ::TeleportSpot, (-2304.57, -1530.15, 13.8729));
        self add_option("mapTeleports", "Suicide Spot #5", ::TeleportSpot, (-4271.94, 1507.85, 66.9589));
        self add_option("mapTeleports", "Suicide Spot #6", ::TeleportSpot, (-5844.59, 1643.02, 67.625));
    }
    else if( getdvar("mapname") == "mp_drone")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Main Trickshot", ::TeleportSpot, (-682.616, -843.085, 256.193));
        self add_option("mapTeleports", "Ladder Spot", ::TeleportSpot, (-302.192, 674.484, 264.125));
        self add_option("mapTeleports", "Window Spot", ::TeleportSpot, (669.086, -628.628, 240.125));
        self add_option("mapTeleports", "Roof Spot", ::TeleportSpot, (-1289.36, -239.838, 526.29));
        self add_option("mapTeleports", "Out of Map Spot", ::TeleportSpot, (979.507, 5149.96, 660.797));
    }
    else if( getdvar("mapname") == "mp_express")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Catwalk Spot #1", ::TeleportSpot, (194.244, -1234.17, 164.014));
        self add_option("mapTeleports", "Catwalk Spot #2", ::TeleportSpot, (86.8819, 1322.11, 164.125));
        self add_option("mapTeleports", "Avea Spot", ::TeleportSpot, (1748.56, -6.47959, 81.125));
        self add_option("mapTeleports", "Train Bang", ::TeleportSpot, (-253.544, -134.113, 116.125));
        self add_option("mapTeleports", "Window Room", ::TeleportSpot, (-480.621, 122.467, 78.125));
        self add_option("mapTeleports", "Out of Map Spot #1", ::TeleportSpot, (-191.489, 2354.2, 122.07));
        self add_option("mapTeleports", "Out of Map Spot #2", ::TeleportSpot, (-214.546, -2335.59, 121.608));
    }
    else if( getdvar("mapname") == "mp_hijacked")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Suicide Spot #1", ::TeleportSpot, (484.243, 759.176, 18.9638));
        self add_option("mapTeleports", "Suicide Spot #2", ::TeleportSpot, (-1058.06, 772.724, -42.875));
        self add_option("mapTeleports", "Ladder Spot #1", ::TeleportSpot, (-1486.71, 245.412, 92.125));
        self add_option("mapTeleports", "Ladder Spot #2", ::TeleportSpot, (-1331.28, 185.356, -43.875));
        self add_option("mapTeleports", "Ladder Spot #3", ::TeleportSpot, (951.594, 285.137, 20.125));
        self add_option("mapTeleports", "Ladder Spot #4", ::TeleportSpot, (1042.38, 280.317, 156.125));
    }
    else if( getdvar("mapname") == "mp_meltdown")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Suicide Spot #1", ::TeleportSpot, (2300.97, 2549.99, 11.125));
        self add_option("mapTeleports", "Suicide Spot #2", ::TeleportSpot, (2318.31, 846.498, 10.5602));
        self add_option("mapTeleports", "Window Spot #1", ::TeleportSpot, (738.972, 381.929, 72.125));
        self add_option("mapTeleports", "Window Spot #2", ::TeleportSpot, (1153.25, 1068.92, 56.125));
        self add_option("mapTeleports", "Window Spot #3", ::TeleportSpot, (1167.49, 2311.42, 56.125));
        self add_option("mapTeleports", "Window Spot #4", ::TeleportSpot, (708.563, 2998.28, 72.125));
        self add_option("mapTeleports", "Ladder Spot #1", ::TeleportSpot, (124.862, 2951.8, 70.125));
        self add_option("mapTeleports", "Ladder Spot #2", ::TeleportSpot, (-33.9677, 2260.31, 56.125));
        self add_option("mapTeleports", "Ladder Spot #3", ::TeleportSpot, (-36.0924, 1138.06, 56.125));
        self add_option("mapTeleports", "Ladder Spot #4", ::TeleportSpot, (125.8, 476.192, 66.125));
    }
    else if( getdvar("mapname") == "mp_nightclub")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Balcony Spot #1", ::TeleportSpot, (-16462.1, 2731.18, -33.0439));
        self add_option("mapTeleports", "Balcony Spot #2", ::TeleportSpot, (-18230.5, 958.015, -33.2183));
        self add_option("mapTeleports", "Ladder Spot #1", ::TeleportSpot, (-18853, 734.818, -63.875));
        self add_option("mapTeleports", "Ladder Spot #2", ::TeleportSpot, (-16259.7, 3355.67, -63.875));
        self add_option("mapTeleports", "Out of Map Spot", ::TeleportSpot, (-16589.9, 1760.98, 192.125));
    }
    else if( getdvar("mapname") == "mp_raid")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Suicide Spot #1", ::TeleportSpot, (2895.6, 4441.54, 150.068));
        self add_option("mapTeleports", "Suicide Spot #2", ::TeleportSpot, (1190.64, 4781.74, -3.875));
        self add_option("mapTeleports", "Tree Shot", ::TeleportSpot, (2706.46, 4762.75, 137.559));
        self add_option("mapTeleports", "Window Suicide", ::TeleportSpot, (1403.9, 1505.64, 232.125));
        self add_option("mapTeleports", "Tac Repeater Spot", ::TeleportSpot, (3796.42, 4129.55, 79.8917));
        self add_option("mapTeleports", "Bounce Spot", ::TeleportSpot, (3129.51, 1965.71, 190.125));
        self add_option("mapTeleports", "Out of Map Spot", ::TeleportSpot, (-168.93, 3877.03, 252.125));
    }
    else if( getdvar("mapname") == "mp_slums")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "On Top of Door", ::TeleportSpot, (-497.103, -1136.97, 654.699));
        self add_option("mapTeleports", "Out of Map Spot", ::TeleportSpot, (-319.309, 3208.63, 1400.01));
    }
    else if( getdvar("mapname") == "mp_village")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Window Trickshot", ::TeleportSpot, (-897.934, -1508.95, 144.125));
        self add_option("mapTeleports", "Top Brown House", ::TeleportSpot, (-4.26986, -393.661, 153.184));
        self add_option("mapTeleports", "7/11 Window Spot", ::TeleportSpot, (-281.359, 976.789, 142.125));
        self add_option("mapTeleports", "Half Wall Spot", ::TeleportSpot, (-269.051, -948.095, 112.125));
        self add_option("mapTeleports", "Granny Hit a Ladderstall", ::TeleportSpot, (-1267.09, -1398.7, 144.125));
        self add_option("mapTeleports", "Granny Found a Glitch Spot", ::TeleportSpot, (-1343.64, -1539.23, 168.61));
        self add_option("mapTeleports", "Tribolt From Tank", ::TeleportSpot, (-1037.02, -535.641, 134.261));
        self add_option("mapTeleports", "Farm House Spot", ::TeleportSpot, (856.359, 1614.78, 214.2));
        self add_option("mapTeleports", "Gas Prices Are Fucked", ::TeleportSpot, (652.13, -551.163, 228.165));
    }
    else if( getdvar("mapname") == "mp_turbine")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Main Bridge", ::TeleportSpot, (843.259, 3133.29, 230.125));
        self add_option("mapTeleports", "Top Bridge #1", ::TeleportSpot, (1383.64, 3174.46, 594.046));
        self add_option("mapTeleports", "Top Bridge #2", ::TeleportSpot, (-200.141, 3166.14, 593.503));
        self add_option("mapTeleports", "Turret Room", ::TeleportSpot, (1512.49, 2488.24, 210.125));
        self add_option("mapTeleports", "Top Turbine", ::TeleportSpot, (457.085, 881.255, 479.125));
        self add_option("mapTeleports", "Turbine Rock", ::TeleportSpot, (204.893, 1398.33, 456.125));
        self add_option("mapTeleports", "Ramos Rock", ::TeleportSpot, (624.314, -1398.75, 442.125));
        self add_option("mapTeleports", "Out of Map Spot #1", ::TeleportSpot, (-1195.37, -3039.06, 420.025));
        self add_option("mapTeleports", "Out of Map Spot #2", ::TeleportSpot, (-878.987, 1371.06, 832.125));
    }
    else if( getdvar("mapname") == "mp_socotra")
    {
        self add_menu("mapTeleports", "teleport", "VIP");
        self add_option("mapTeleports", "Main Suicide #1", ::TeleportSpot, (-442.231, -2475.25, 241.125));
        self add_option("mapTeleports", "Main Suicide #2", ::TeleportSpot, (-97.215, -2285.97, 241.125));
        self add_option("mapTeleports", "Main Suicide #3", ::TeleportSpot, (346.034, -1976.62, 212.376));
        self add_option("mapTeleports", "Main Suicide #4", ::TeleportSpot, (453.803, -1610.6, 291.125));
        self add_option("mapTeleports", "Alt Suicide #1", ::TeleportSpot, (2171.31, -57.6599, 280.125));
        self add_option("mapTeleports", "Alt Suicide #2", ::TeleportSpot, (1742.77, -142.391, 236.125));
        self add_option("mapTeleports", "Alt Suicide #3", ::TeleportSpot, (2446.32, 603.493, 237.125));
        self add_option("mapTeleports", "Mid Suicide", ::TeleportSpot, (573.61, 257.242, 153.125));
        self add_option("mapTeleports", "Mid Balcony", ::TeleportSpot, (963.874, 713.635, 317.125));
        self add_option("mapTeleports", "Mid Ladder", ::TeleportSpot, (222.166, 1407.64, 414.625));
        self add_option("mapTeleports",  "Vexii Glitch Spot", ::TeleportSpot, (734.732, 1978.64, 446.295));
        self add_option("mapTeleports", "Tribolt Glitch Spot", ::TeleportSpot, (1150.03, -794.43, 99.9664));
    }
    else
    {
        self add_menu("mapTeleports", "Teleport Menu", "teleport");
        self add_option("mapTeleports", "Never ask thse things of me.", ::Test);
    }
    
    self add_menu("camos", self.menuname, "VIP");
    self add_option("camos", "Remove Camo", ::changeCamo, 0);
    self add_option("camos", "Give Random Camo", ::randomCamo);
    self add_option("camos", "Disco Camo", ::InitCamoLoop);
    self add_option("camos", "Base Camos", ::submenu, "baseCamos", "Base Camos");
    self add_option("camos", "DLC #1 Camos", ::submenu, "DLCCamos", "DLC #1 Camos");
    self add_option("camos", "DLC #2 Camos", ::submenu, "DLC2Camos", "DLC #2 Camos");
    self add_option("camos", "Top Secret Camos", ::submenu, "SecretCamos", "Top Secret Camos");
    
    self add_menu("baseCamos", "camos", "VIP");
    self add_option("baseCamos", "DEVGRU", ::changeCamo, 1);
    self add_option("baseCamos", "A-TACS AU", ::changeCamo, 2);
    self add_option("baseCamos", "ERDL", ::changeCamo, 3);
    self add_option("baseCamos", "Siberia", ::changeCamo, 4);
    self add_option("baseCamos", "Choco", ::changeCamo, 5);
    self add_option("baseCamos", "Blue Tiger", ::changeCamo, 6);
    self add_option("baseCamos", "Bloodshot", ::changeCamo, 7);
    self add_option("baseCamos", "Ghostex: Delta 6", ::changeCamo, 8);
    self add_option("baseCamos", "Kryptek: Typhon", ::changeCamo, 9);
    self add_option("baseCamos", "Carbon Fiber", ::changeCamo, 10);
    self add_option("baseCamos", "Cherry Blossom", ::changeCamo, 11);
    self add_option("baseCamos", "Art of War", ::changeCamo, 12);
    self add_option("baseCamos", "Ronin", ::changeCamo, 13);
    self add_option("baseCamos", "Skulls", ::changeCamo, 14);
    self add_option("baseCamos", "Gold", ::changeCamo, 15);
    self add_option("baseCamos", "Diamond", ::changeCamo, 16);
    
    self add_menu("DLCCamos", "camos", "VIP");
    self add_option("DLCCamos", "Elite", ::changeCamo, 17);
    self add_option("DLCCamos", "Benjamins", ::changeCamo, 21);
    self add_option("DLCCamos", "Dia De Muertos", ::changeCamo, 22);
    self add_option("DLCCamos", "Graffiti", ::changeCamo, 23);
    self add_option("DLCCamos", "Kawaii", ::changeCamo, 24);
    self add_option("DLCCamos", "Party Rock",::changeCamo, 25);
    self add_option("DLCCamos", "Zombies", ::changeCamo, 26);
    self add_option("DLCCamos", "Viper", ::changeCamo, 27);
    self add_option("DLCCamos", "Bacon", ::changeCamo, 28);
    self add_option("DLCCamos", "Dragon", ::changeCamo, 32);
    self add_option("DLCCamos", "Cyborg", ::changeCamo, 31);
    self add_option("DLCCamos", "Aqua", ::changeCamo, 34);
    self add_option("DLCCamos", "Breach", ::changeCamo, 35);
    self add_option("DLCCamos", "Coyote", ::changeCamo, 36);
    self add_option("DLCCamos", "Glam", ::changeCamo, 37);
    self add_option("DLCCamos", "Rogue", ::changeCamo, 38);
    self add_option("DLCCamos", "Pack-a-Punch", ::changeCamo,39);
    
    self add_menu("DLC2Camos", "camos", "VIP");
    self add_option("DLC2Camos", "UK Punk", ::changeCamo, 20);
    self add_option("DLC2Camos", "Paladin", ::changeCamo, 30);
    self add_option("DLC2Camos", "Comics", ::changeCamo, 33);
    self add_option("DLC2Camos", "Afterlife", ::changeCamo, 44);
    self add_option("DLC2Camos", "Dead Mans Hand", ::changeCamo, 40);
    self add_option("DLC2Camos", "Beast", ::changeCamo, 41);
    self add_option("DLC2Camos", "Octane", ::changeCamo, 42);
    self add_option("DLC2Camos", "Weaponized 115", ::changeCamo, 43);
    
    self add_menu("SecretCamos", "camos", "VIP");
    self add_option("SecretCamos", "Digital", ::changeCamo, 18);
    self add_option("SecretCamos", "Ghosts", ::changeCamo, 29);
    self add_option("SecretCamos", "Advanced Warfare", ::changeCamo, 45);
    
     self add_menu("killstreaks", self.menuname, "VIP");
     self add_option("killstreaks", "Fill Killstreaks", ::FillStreaks);
     self add_option("killstreaks", "Give UAV", ::GiveStreak, "radar_mp");
     self add_option("killstreaks", "Give RC-XD", ::GiveStreak, "rcbomb_mp");
     self add_option("killstreaks", "Give Hunter Killer", ::GiveStreak, "inventory_missile_drone_mp");
     self add_option("killstreaks", "Give CP", ::GiveStreak, "inventory_supply_drop_mp");
     self add_option("killstreaks", "Give Counter-UAV", ::GiveStreak, "counteruav_mp");
     self add_option("killstreaks", "Give Guardian", ::GiveStreak, "microwaveturret_mp");
     self add_option("killstreaks", "Give Hellstorm", ::GiveStreak, "remote_missile_mp");
     self add_option("killstreaks", "Give Lightning Strike", ::GiveStreak, "planemortar_mp");
     self add_option("killstreaks", "Give Sentry Gun", ::GiveStreak, "autoturret_mp");
     self add_option("killstreaks", "Give Death Machine", ::GiveStreak, "inventory_minigun_mp");
     self add_option("killstreaks", "Give War Machine", ::GiveStreak, "inventory_m32_mp");
     self add_option("killstreaks", "Give Dragonfire", ::GiveStreak, "qrdrone_mp");
     self add_option("killstreaks", "Give A.G.R", ::GiveStreak, "inventory_ai_tank_drop_mp");
     self add_option("killstreaks", "Give Stealth Chopper", ::GiveStreak, "helicopter_comlink_mp");
     self add_option("killstreaks", "Give VSAT", ::GiveStreak, "radardirection_mp");
     self add_option("killstreaks", "Page(1/2)", ::submenu, "killstreaks2", "Killstreaks Menu");
     
     self add_menu("killstreaks2", "killstreaks", "VIP");
     self add_option("killstreaks2", "Give Escort Drone", ::GiveStreak, "helicopter_guard_mp");
     self add_option("killstreaks2", "Give EMP Systems", ::GiveStreak, "emp_mp");
     self add_option("killstreaks2", "Give Warthog", ::GiveStreak, "straferun_mp");
     self add_option("killstreaks2", "Give Lodestar", ::GiveStreak, "remote_mortar_mp");
     self add_option("killstreaks2", "Give VTOL Warship", ::GiveStreak, "helicopter_player_gunner_mp");
     self add_option("killstreaks2", "Give K9 Unit", ::GiveStreak, "dogs_mp");
     self add_option("killstreaks2", "Give Swarm", ::GiveStreak, "missile_swarm_mp");
     
     self add_menu("Weapons", self.menuname, "VIP");
     self add_option("Weapons", "Take Current Weapon", ::takecurrentweapon);
     self add_option("Weapons", "Drop Current Weapon", ::dropcurrentweapon);
     self add_option("Weapons", "Get Current Weapon Name", ::CurrentWeapName);
     self add_option("Weapons", "Drop Canswap", ::dropcan);
     self add_option("Weapons", "Refill Ammo", ::maxammoweapon);
     self add_option("Weapons", "Refill Equipment", ::maxequipment);
     self add_option("Weapons", "Empty Clip", ::EmptyClip);
     self add_option("Weapons", "Empty Ammo", ::EmptyAmmo);
     self add_option("Weapons", "Assault Rifles", ::submenu, "ARs", "Assault Rifles");
     self add_option("Weapons", "Submachine Guns", ::submenu, "SMGs", "Submachine Guns");
     self add_option("Weapons", "Shotguns", ::submenu, "Shotguns", "Shotguns");
     self add_option("Weapons", "Light Machine Guns", ::submenu, "LMGs", "Light Machine Guns");
     self add_option("Weapons", "Sniper Rifles", ::submenu, "Snipers", "Sniper Rifles");
     self add_option("Weapons", "Pistols", ::submenu, "Pistols", "Pistols");
     self add_option("Weapons", "Launchers", ::submenu, "Launchers", "Launchers");
     self add_option("Weapons", "Specials", ::submenu, "Specials", "Specials");
     
     self add_menu("ARs", "Weapons", "VIP");
     self add_option("ARs", "MTAR", ::GivePlayerWeapon, "tar21_mp");
     self add_option("ARs", "Type 25", ::GivePlayerWeapon, "type95_mp");
     self add_option("ARs", "SWAT -556", ::GivePlayerWeapon, "sig556_mp");
     self add_option("ARs", "FAL OSW", ::GivePlayerWeapon, "sa58_mp");
     self add_option("ARs", "M27", ::GivePlayerWeapon, "hk416_mp");
     self add_option("ARs", "SCAR-H", ::GivePlayerWeapon, "scar_mp");
     self add_option("ARs", "SMR", ::GivePlayerWeapon, "saritch_mp");
     self add_option("ARs", "M8A1", ::GivePlayerWeapon, "xm8_mp");
     self add_option("ARs", "AN-94", ::GivePlayerWeapon, "an94_mp");
     self add_option("ARs", "Add Attachments", ::submenu, "ARsAttahcment", "Assault Rifle Attachments");
     
     self add_menu("ARsAttahcment", "ARs", "VIP");
     self add_option("ARsAttahcment", "Reflex", ::AddAttachment, "+reflex");
     self add_option("ARsAttahcment", "Quickdraw", ::AddAttachment, "+fastads");
     self add_option("ARsAttahcment", "Fast Mag", ::AddAttachment, "+dualclip");
     self add_option("ARsAttahcment", "ACOG", ::AddAttachment, "+acog");
     self add_option("ARsAttahcment", "Fore Grip", ::AddAttachment, "+grip");
     self add_option("ARsAttahcment", "Stock", ::AddAttachment, "+stalker");
     self add_option("ARsAttahcment", "Target Finder", ::AddAttachment, "+rangefinder");
     self add_option("ARsAttahcment", "Laser Sight", ::AddAttachment, "+steadyaim");
     self add_option("ARsAttahcment", "Select Fire", ::AddAttachment, "+sf");
     self add_option("ARsAttahcment", "EOtech", ::AddAttachment, "+holo");
     self add_option("ARsAttahcment", "Suppressor", ::AddAttachment, "+silencer");
     self add_option("ARsAttahcment", "FMJ", ::AddAttachment, "+fmj");
     self add_option("ARsAttahcment", "Hybrid Optic", ::AddAttachment, "+dualoptic");
     self add_option("ARsAttahcment", "Extended Clip", ::AddAttachment, "+extclip");
     self add_option("ARsAttahcment", "Launcher", ::AddAttachment, "+gl");
     self add_option("ARsAttahcment", "MMS", ::AddAttachment, "+mms");
     
     self add_menu("SMGs", "Weapons", "VIP");
     self add_option("SMGs", "MP7", ::GivePlayerWeapon, "mp7_mp");
     self add_option("SMGs", "PDW-57", ::GivePlayerWeapon, "pdw57_mp");
     self add_option("SMGs", "Vector K10", ::GivePlayerWeapon, "vector_mp");
     self add_option("SMGs", "MSMC", ::GivePlayerWeapon, "insas_mp");
     self add_option("SMGs", "Chicom CQB", ::GivePlayerWeapon, "qcw05_mp");
     self add_option("SMGs", "Skorpion EVO", ::GivePlayerWeapon, "evoskorpion_mp");
     self add_option("SMGs", "Peacekeeper", ::GivePlayerWeapon, "peacekeeper_mp");
     self add_option("SMGs", "Add Attachments", ::submenu, "SMGsAttahcment", "Submachine Guns Attachments");
     
     self add_menu("SMGsAttahcment", "SMGs", "VIP");
     self add_option("SMGsAttahcment", "Reflex", ::AddAttachment, "+reflex");
     self add_option("SMGsAttahcment", "Laser Sight", ::AddAttachment, "+steadyaim");
     self add_option("SMGsAttahcment", "Suppressor", ::AddAttachment, "+silencer");
     self add_option("SMGsAttahcment", "Fast Mag", ::AddAttachment, "+dualclip");
     self add_option("SMGsAttahcment", "EOTech", ::AddAttachment, "+holo");
     self add_option("SMGsAttahcment", "Fore Grip", ::AddAttachment, "+grip");
     self add_option("SMGsAttahcment", "Quickdraw", ::AddAttachment, "+fastads");
     self add_option("SMGsAttahcment", "FMJ", ::AddAttachment, "+fmj");
     self add_option("SMGsAttahcment", "Long Barrel", ::AddAttachment, "+extbarrel");
     self add_option("SMGsAttahcment", "Target Finder", ::AddAttachment, "+rangefinder");
     self add_option("SMGsAttahcment", "Stock", ::AddAttachment, "+stalker");
     self add_option("SMGsAttahcment", "Extended Clip", ::AddAttachment, "+extclip");
     self add_option("SMGsAttahcment", "Select Fire", ::AddAttachment, "+sf");
     self add_option("SMGsAttahcment", "Rapid Fire", ::AddAttachment, "+rf");
     self add_option("SMGsAttahcment", "MMS", ::AddAttachment, "+mms");
     
     self add_menu("Shotguns", "Weapons", "VIP");
     self add_option("Shotguns", "R870 MCS", ::GivePlayerWeapon, "870mcs_mp");
     self add_option("Shotguns", "S12", ::GivePlayerWeapon, "saiga12_mp");
     self add_option("Shotguns", "KSG", ::GivePlayerWeapon, "ksg_mp");
     self add_option("Shotguns", "M1216", ::GivePlayerWeapon, "srm1216_mp");
     self add_option("Shotguns", "Add Attachments", ::submenu, "ShotgunsAttahcment", "Shotguns Attachments");
     
     self add_menu("ShotgunsAttahcment", "Shotguns", "VIP");
     self add_option("ShotgunsAttahcment", "Reflex", ::AddAttachment, "+reflex");
     self add_option("ShotgunsAttahcment", "Long Barrel", ::AddAttachment, "+extbarrel");
     self add_option("ShotgunsAttahcment", "Fast Mag", ::AddAttachment, "+dualclip");
     self add_option("ShotgunsAttahcment", "Laser Sight", ::AddAttachment, "+steadyaim");
     self add_option("ShotgunsAttahcment", "Stock", ::AddAttachment, "+stalker");
     self add_option("ShotgunsAttahcment", "Suppressor", ::AddAttachment, "+silencer");
     self add_option("ShotgunsAttahcment", "Extended Clip", ::AddAttachment, "+extclip");
     self add_option("ShotgunsAttahcment", "Quickdraw", ::AddAttachment, "+fastads");
     self add_option("ShotgunsAttahcment", "MMS", ::AddAttachment, "+mms");
     
     self add_menu("LMGs", "Weapons", "VIP");
     self add_option("LMGs", "Mk 48", ::GivePlayerWeapon, "mk48_mp");
     self add_option("LMGs", "QBB LSW", ::GivePlayerWeapon, "qbb95_mp");
     self add_option("LMGs", "LSAT", ::GivePlayerWeapon, "lsat_mp");
     self add_option("LMGs", "HAMR", ::GivePlayerWeapon, "hamr_mp");
     self add_option("LMGs", "Add Attachments", ::submenu, "LMGsAttahcment", "Light Machine Guns Attachments");
     
     self add_menu("LMGsAttahcment", "LMGs", "VIP");
     self add_option("LMGsAttahcment", "EOTech", ::AddAttachment, "+holo");
     self add_option("LMGsAttahcment", "Fore Grip", ::AddAttachment, "+grip");
     self add_option("LMGsAttahcment", "FMJ", ::AddAttachment, "+fmj");
     self add_option("LMGsAttahcment", "Reflex", ::AddAttachment, "+reflex");
     self add_option("LMGsAttahcment", "Quickdraw", ::AddAttachment, "+fastads");
     self add_option("LMGsAttahcment", "Target Finder", ::AddAttachment, "+rangefinder");
     self add_option("LMGsAttahcment", "Stock", ::AddAttachment, "+stalker");
     self add_option("LMGsAttahcment", "ACOG", ::AddAttachment, "+acog");
     self add_option("LMGsAttahcment", "Laser Sight", ::AddAttachment, "+steadyaim");
     self add_option("LMGsAttahcment", "Suppressor", ::AddAttachment, "+silencer");
     self add_option("LMGsAttahcment", "Zoom", ::AddAttachment, "+vzoom");
     self add_option("LMGsAttahcment", "Extended Clip", ::AddAttachment, "+extclip");
     self add_option("LMGsAttahcment", "Hybrid Optic", ::AddAttachment, "+dualoptic");
     self add_option("LMGsAttahcment", "Rapid Fire", ::AddAttachment, "+rf");
     self add_option("LMGsAttahcment", "Dual Band", ::AddAttachment, "+ir");
     
     self add_menu("Snipers", "Weapons", "VIP");
     self add_option("Snipers", "SVU-AS", ::GivePlayerWeapon, "svu_mp");
     self add_option("Snipers", "DSR 50", ::GivePlayerWeapon, "dsr50_mp");
     self add_option("Snipers", "Ballista", ::GivePlayerWeapon, "ballista_mp");
     self add_option("Snipers", "XPR-50", ::GivePlayerWeapon, "as50_mp");
     self add_option("Snipers", "Add Attachments", ::submenu, "SnipersAttahcment", "Snipers Attachments");
     
     self add_menu("SnipersAttahcment", "Snipers", "VIP");
     self add_option("SnipersAttahcment", "Suppressor", ::AddAttachment, "+silencer");
     self add_option("SnipersAttahcment", "Ballistic CPU", ::AddAttachment, "+swayreduc");
     self add_option("SnipersAttahcment", "Zoom", ::AddAttachment, "+vzoom");
     self add_option("SnipersAttahcment", "Fast Mag", ::AddAttachment, "+dualclip");
     self add_option("SnipersAttahcment", "FMJ", ::AddAttachment, "+fmj");
     self add_option("SnipersAttahcment", "ACOG", ::AddAttachment, "+acog");
     self add_option("SnipersAttahcment", "Extended Clip", ::AddAttachment, "+extclip");
     self add_option("SnipersAttahcment", "Laser Sight", ::AddAttachment, "+steadyaim");
     self add_option("SnipersAttahcment", "Dual Band", ::AddAttachment, "+ir");
     self add_option("SnipersAttahcment", "Iron Sight", ::AddAttachment, "+is");

     self add_menu("Pistols", "Weapons", "VIP");
     self add_option("Pistols", "Five-seven", ::GivePlayerWeapon, "fiveseven_mp");
     self add_option("Pistols", "Tac-45", ::GivePlayerWeapon, "fnp45_mp");
     self add_option("Pistols", "B23R", ::GivePlayerWeapon, "beretta93r_mp");
     self add_option("Pistols", "Executioner", ::GivePlayerWeapon, "judge_mp");
     self add_option("Pistols", "Kap-40", ::GivePlayerWeapon, "kard_mp");
     self add_option("Pistols", "Add Attachments", ::submenu, "PistolsAttahcment", "Pistols Attachments");
     
     self add_menu("PistolsAttahcment", "Pistols", "VIP");
     self add_option("PistolsAttahcment", "Reflex", ::AddAttachment, "+reflex");
     self add_option("PistolsAttahcment", "Extended Clip", ::AddAttachment, "+extclip");
     self add_option("PistolsAttahcment", "Laser Sight", ::AddAttachment, "+steadyaim");
     self add_option("PistolsAttahcment", "Long Barrel", ::AddAttachment, "+extbarrel");
     self add_option("PistolsAttahcment", "FMJ", ::AddAttachment, "+fmj");
     self add_option("PistolsAttahcment", "Fast Mag", ::AddAttachment, "+dualclip");
     self add_option("PistolsAttahcment", "Suppressor", ::AddAttachment, "+silencer");
     self add_option("PistolsAttahcment", "Knife", ::AddAttachment, "+tacknife");
     self add_option("PistolsAttahcment", "Make Current Pistol Dual Wield", ::MakePistolDualWeild);
     self add_option("PistolsAttahcment", "Make Current Pistol Glitched", ::MakePistolDualWeildG);
     
     self add_menu("Launchers", "Weapons", "VIP");
     self add_option("Launchers", "SMAW", ::GivePlayerWeapon, "smaw_mp");
     self add_option("Launchers", "FHJ-18 AA", ::GivePlayerWeapon, "fhj18_mp");
     self add_option("Launchers", "RPG", ::GivePlayerWeapon, "usrpg_mp");
     
     self add_menu("Specials", "Weapons", "VIP");
     self add_option("Specials", "Crossbow", ::GivePlayerWeapon, "crossbow_mp");
     self add_option("Specials", "Add Attachments To Crossbow", ::submenu, "CrossbowAttahcment", "Crossbow Attachments");
     self add_option("Specials", "Ballistic Knife", ::GivePlayerWeapon, "knife_ballistic_mp");
     self add_option("Specials", "Assault Shield", ::GivePlayerWeapon, "riotshield_mp");
     self add_option("Specials", "Knife", ::GivePlayerWeapon, "knife_held_mp");
     self add_option("Specials", "Bomb", ::GivePlayerWeapon, "briefcase_bomb_mp");
     self add_option("Specials", "IPAD", ::GivePlayerWeapon, "killstreak_remote_turret_mp");
     self add_option("Specials", "CSGO Knife", ::GivePlayerWeapon, "knife_mp");
     self add_option("Specials", "War Machine", ::GivePlayerWeapon, "m32_mp");
     self add_option("Specials", "Death Machine", ::GivePlayerWeapon, "minigun_mp");
     self add_option("Specials", "Claymore Rmala", ::GivePlayerWeapon, "claymore_mp");
     self add_option("Specials", "C4 Rmala", ::GivePlayerWeapon, "satchel_charge_mp");
     self add_option("Specials", "Bouncing Betty Rmala", ::GivePlayerWeapon, "bouncingbetty_mp");
     self add_option("Specials", "Black Hat Rmala", ::GivePlayerWeapon, "pda_hack_mp");
     self add_option("Specials", "Trophy Rmala", ::GivePlayerWeapon, "trophy_system_mp");
     
     self add_menu("CrossbowAttahcment", "Specials", "VIP");
     self add_option("CrossbowAttahcment", "Reflex", ::AddAttachment, "+reflex");
     self add_option("CrossbowAttahcment", "ACOG", ::AddAttachment, "+acog");
     self add_option("CrossbowAttahcment", "Dual Band", ::AddAttachment, "+ir");
     self add_option("CrossbowAttahcment", "Zoom", ::AddAttachment, "+vzoom");
     self add_option("CrossbowAttahcment", "Tri-Bolt", ::AddAttachment, "+stackfire");
     
     self add_menu("Trickshot", self.menuname, "VIP");
     self add_option("Trickshot", "Change End Game Settings", ::MW2EndGame);
     self add_option("Trickshot", "Toggle Floaters", ::ToggleFloaters);
     self add_option("Trickshot", "Match Bonus Options", ::submenu, "MatchBonus", "Match Bonus Options");
     self add_option("Trickshot", "Spoof Rank", ::submenu, "Prestige", "Spoof Prestige");
     self add_option("Trickshot", "Disable Bomb Pickup", ::DisableBomb);
     self add_option("Trickshot", "Fast Last (FFA)", ::addScore, 29);
     self add_option("Trickshot", "Fast Last (TDM)", ::addScore, 74);
     self add_option("Trickshot", "Plant Bomb", ::PlantBomb);
     self add_option("Trickshot", "Defuse Bomb", ::DefuseBomb);
     self add_option("Trickshot", "After Hit Menu", ::submenu, "AfterHit", "After Hit Menu");
     
     self add_menu("MatchBonus", "Trickshot", "VIP");
     self add_option("MatchBonus", "Stop Calculating Match Bonus", ::stopcalcmatchbonus);
     self add_option("MatchBonus", "Set Match Bonus To 69", ::givecustommatchbonus, 69);
     self add_option("MatchBonus", "Set Match Bonus To 420", ::givecustommatchbonus, 420);
     self add_option("MatchBonus", "Set Match Bonus To 444", ::givecustommatchbonus, 444);
     self add_option("MatchBonus", "Set Match Bonus To 666", ::givecustommatchbonus, 666);
     self add_option("MatchBonus", "Set Match Bonus To 999", ::givecustommatchbonus, 999);
     self add_option("MatchBonus", "Set Match Bonus To 42069", ::givecustommatchbonus, 42069);
     self add_option("MatchBonus", "Set Match Bonus To 69420", ::givecustommatchbonus, 69420);
     self add_option("MatchBonus", "Set Match Bonus To 1337", ::givecustommatchbonus, 1337);
     
     self add_menu("Prestige", "Trickshot", "VIP");
     self add_option("Prestige", "Prestige #1", ::executepreseditor, 1);
     self add_option("Prestige", "Prestige #2", ::executepreseditor, 2);
     self add_option("Prestige", "Prestige #3", ::executepreseditor, 3);
     self add_option("Prestige", "Prestige #4", ::executepreseditor, 4);
     self add_option("Prestige", "Prestige #5", ::executepreseditor, 5);
     self add_option("Prestige", "Prestige #6", ::executepreseditor, 6);
     self add_option("Prestige", "Prestige #7", ::executepreseditor, 7);
     self add_option("Prestige", "Prestige #8", ::executepreseditor, 8);
     self add_option("Prestige", "Prestige #9", ::executepreseditor, 9);
     self add_option("Prestige", "Prestige #10", ::executepreseditor, 10);
     self add_option("Prestige", "Prestige #11", ::executepreseditor, 11);
     self add_option("Prestige", "Prestige #12", ::executepreseditor, 12);
     self add_option("Prestige", "Prestige #13", ::executepreseditor, 13);
     self add_option("Prestige", "Prestige #14", ::executepreseditor, 14);
     self add_option("Prestige", "Prestige #15", ::executepreseditor, 15);
     self add_option("Prestige", "Level 55 Master Prestige", ::MaxRank);
     
     self add_menu("AfterHit", "Trickshot", "VIP");
     self add_option("AfterHit", "Assault Rifles", ::submenu, "ARsAH", "Assault Rifles");
     self add_option("AfterHit", "Submachine Guns", ::submenu, "SMGsAH", "Submachine Guns");
     self add_option("AfterHit", "Shotguns", ::submenu, "ShotgunsAH", "Shotguns");
     self add_option("AfterHit", "Light Machine Guns", ::submenu, "LMGsAH", "Light Machine Guns");
     self add_option("AfterHit", "Sniper Rifles", ::submenu, "SnipersAH", "Sniper Rifles");
     self add_option("AfterHit", "Pistols", ::submenu, "PistolsAH", "Pistols");
     self add_option("AfterHit", "Launchers", ::submenu, "LaunchersAH", "Launchers");
     self add_option("AfterHit", "Specials", ::submenu, "SpecialsAH", "Specials");
     
     self add_menu("ARsAH", "AfterHit", "VIP");
     self add_option("ARsAH", "MTAR", ::AfterHit, "tar21_mp");
     self add_option("ARsAH", "Type 25", ::AfterHit, "type95_mp");
     self add_option("ARsAH", "SWAT -556", ::AfterHit, "sig556_mp");
     self add_option("ARsAH", "FAL OSW", ::AfterHit, "sa58_mp");
     self add_option("ARsAH", "M27", ::AfterHit, "hk416_mp");
     self add_option("ARsAH", "SCAR-H", ::AfterHit, "scar_mp");
     self add_option("ARsAH", "SMR", ::AfterHit, "saritch_mp");
     self add_option("ARsAH", "M8A1", ::AfterHit, "xm8_mp");
     self add_option("ARsAH", "AN-94", ::AfterHit, "an94_mp");
     
     self add_menu("SMGsAH", "AfterHit", "VIP");
     self add_option("SMGsAH", "MP7", ::AfterHit, "mp7_mp");
     self add_option("SMGsAH", "PDW-57", ::AfterHit, "pdw57_mp");
     self add_option("SMGsAH", "Vector K10", ::AfterHit, "vector_mp");
     self add_option("SMGsAH", "MSMC", ::AfterHit, "insas_mp");
     self add_option("SMGsAH", "Chicom CQB", ::AfterHit, "qcw05_mp");
     self add_option("SMGsAH", "Skorpion EVO", ::AfterHit, "evoskorpion_mp");
     self add_option("SMGsAH", "Peacekeeper", ::AfterHit, "peacekeeper_mp");
     
     self add_menu("ShotgunsAH", "AfterHit", "VIP");
     self add_option("ShotgunsAH", "R870 MCS", ::AfterHit, "870mcs_mp");
     self add_option("ShotgunsAH", "S12", ::AfterHit, "saiga12_mp");
     self add_option("ShotgunsAH", "KSG", ::AfterHit, "ksg_mp");
     self add_option("ShotgunsAH", "M1216", ::AfterHit, "srm1216_mp");
     
     self add_menu("LMGsAH", "AfterHit", "VIP");
     self add_option("LMGsAH", "Mk 48", ::AfterHit, "mk48_mp");
     self add_option("LMGsAH", "QBB LSW", ::AfterHit, "qbb95_mp");
     self add_option("LMGsAH", "LSAT", ::AfterHit, "lsat_mp");
     self add_option("LMGsAH", "HAMR", ::AfterHit, "hamr_mp");
     
     self add_menu("SnipersAH", "AfterHit", "VIP");
     self add_option("SnipersAH", "SVU-AS", ::AfterHit, "svu_mp");
     self add_option("SnipersAH", "DSR 50", ::AfterHit, "dsr50_mp");
     self add_option("SnipersAH", "Ballista", ::AfterHit, "ballista_mp");
     self add_option("SnipersAH", "XPR-50", ::AfterHit, "as50_mp");
     
     self add_menu("PistolsAH", "AfterHit", "VIP");
     self add_option("PistolsAH", "Five-seven", ::AfterHit, "fiveseven_mp");
     self add_option("PistolsAH", "Tac-45", ::AfterHit, "fnp45_mp");
     self add_option("PistolsAH", "B23R", ::AfterHit, "beretta93r_mp");
     self add_option("PistolsAH", "Executioner", ::AfterHit, "judge_mp");
     self add_option("PistolsAH", "Kap-40", ::AfterHit, "kard_mp");
     
     self add_menu("LaunchersAH", "AfterHit", "VIP");
     self add_option("LaunchersAH", "SMAW", ::AfterHit, "smaw_mp");
     self add_option("LaunchersAH", "FHJ-18 AA", ::AfterHit, "fhj18_mp");
     self add_option("LaunchersAH", "RPG", ::AfterHit, "usrpg_mp");
     
     self add_menu("SpecialsAH", "AfterHit", "VIP");
     self add_option("SpecialsAH", "Crossbow", ::AfterHit, "crossbow_mp");
     self add_option("SpecialsAH", "Ballistic Knife", ::AfterHit, "knife_ballistic_mp");
     self add_option("SpecialsAH", "Assault Shield", ::AfterHit, "riotshield_mp");
     self add_option("SpecialsAH", "Bomb", ::AfterHit, "briefcase_bomb_mp");
     self add_option("SpecialsAH", "Knife", ::AfterHit, "knife_held_mp");
     self add_option("SpecialsAH", "IPAD", ::AfterHit, "killstreak_remote_turret_mp");
     self add_option("SpecialsAH", "CSGO Knife", ::AfterHit, "knife_mp");
     self add_option("SpecialsAH", "War Machine", ::AfterHit, "m32_mp");
     self add_option("SpecialsAH", "Death Machine", ::AfterHit, "minigun_mp");
     self add_option("SpecialsAH", "Claymore Rmala", ::AfterHit, "claymore_mp");
     self add_option("SpecialsAH", "Black Hat Rmala", ::AfterHit, "pda_hack_mp");
     
     self add_menu("Spawnables", self.menuname, "VIP");
     self add_option("Spawnables", "Spawn Crate", ::spawngreencrate);
     self add_option("Spawnables", "Spawn CP Stall", ::spawnstall);
     self add_option("Spawnables", "Spawn CP Stall At Crosshair", ::spawnstallcross);
     self add_option("Spawnables", "Spawn Bounce", ::NormalBounce);
     self add_option("Spawnables", "Spawn Stealth Bounce", ::Stealthbounce);
     self add_option("Spawnables", "Spawn Slide", ::slidesnormal);
     self add_option("Spawnables", "Spawn Stealth Slide", ::StealthSlide);
     self add_option("Spawnables", "Forge Mod", ::ForgeON);
     
     self add_menu("Visions", self.menuname, "VIP");
     self add_option("Visions", "Default Vision", ::SetVisions, "default");
     self add_option("Visions", "Infrared Vision", ::SetVisions, "infrared");
     self add_option("Visions", "Black and White Vision", ::SetVisions, "mpoutro");
     self add_option("Visions", "High Contrast Vision", ::SetVisions, "remote_mortar_enhanced");
     self add_option("Visions", "Blue Vision", ::SetVisions, "tvguided_sp");
     
     self add_menu("Binds", self.menuname, "VIP");
     self add_option("Binds", "Nac Bind", ::submenu, "nacbind", "Nac Bind");
     self add_option("Binds", "Skree Bind", ::submenu, "skreebind", "Skree Bind");
     self add_option("Binds", "Change Class Bind", ::submenu, "changeclass", "Change Class Bind");
     self add_option("Binds", "OMA Bind", ::submenu, "OMAbind", "OMA Bind");
     self add_option("Binds", "Instaswap Bind", ::submenu, "Instabind", "Instaswap Bind");
     self add_option("Binds", "Canswap Bind", ::submenu, "Canswapbind", "Canswap Bind");
     self add_option("Binds", "Bounce Bind", ::submenu, "Bouncebind", "Bounce Bind");
     self add_option("Binds", "Flicker Bind", ::submenu, "Flickerbind", "Flicker Bind");
     self add_option("Binds", "Bolt Movement Bind", ::submenu, "Boltbind", "Bolt Movement Bind");
     self add_option("Binds", "Repeater Bind", ::submenu, "Repeaterbind", "Repeater Bind");
     self add_option("Binds", "Rapid Fire Bind", ::submenu, "Rapidbind", "Rapid Fire Bind");
     self add_option("Binds", "Drop Scav Pack Bind", ::submenu, "Scavbind", "Scav Pack Bind");
     self add_option("Binds", "Empty Clip Bind", ::submenu, "Emptybind", "Empty Clip Bind");
     self add_option("Binds", "Third Person Bind", ::submenu, "Thirdbind", "Third Person Bind");
     self add_option("Binds", "Drop Weapon Bind", ::submenu, "Dropbind", "Drop Weapon Bind");
     self add_option("Binds", "Canzoom Bind", ::submenu, "Canzoombind", "Canzoom Bind");
     self add_option("Binds", "Page(1/2)", ::submenu, "Binds2", "Binds Menu Page 2");
     
     self add_menu("Binds2", "Binds", "VIP");
     self add_option("Binds2", "Cowboy Bind", ::submenu, "Cowboy", "Cowboy Bind");
     self add_option("Binds2", "Disco Camo Bind", ::submenu, "Disco", "Disco Camo Bind");
     self add_option("Binds2", "Fake Scav Pack Bind", ::submenu, "Scav", "Fake Scav Bind");
     self add_option("Binds2", "Elevator Bind", ::submenu, "Elevator", "Elevator Bind");
     self add_option("Binds2", "Wall Breach Bind", ::submenu, "Breach", "Wall Breach Bind");

     self add_menu("Breach", "Binds2", "VIP");
     self add_option("Breach", "Wall Breach Bind [{+Actionslot 1}]", ::WallBreach1);
     self add_option("Breach", "Wall Breach Bind [{+Actionslot 4}]", ::WallBreach4);
     self add_option("Breach", "Wall Breach Bind [{+Actionslot 2}]", ::WallBreach2);
     self add_option("Breach", "Wall Breach Bind [{+Actionslot 3}]", ::WallBreach3);
     
     self add_menu("Elevator", "Binds2", "VIP");
     self add_option("Elevator", "Elevator Bind [{+Actionslot 1}]", ::ElevatorBind1);
     self add_option("Elevator", "Elevator Bind [{+Actionslot 4}]", ::ElevatorBind4);
     self add_option("Elevator", "Elevator Bind [{+Actionslot 2}]", ::ElevatorBind2);
     self add_option("Elevator", "Elevator Bind [{+Actionslot 3}]", ::ElevatorBind3);
     
     self add_menu("Scav", "Binds2", "VIP");
     self add_option("Scav", "Fake Scav Bind [{+Actionslot 1}]", ::FakeScav1);
     self add_option("Scav", "Fake Scav Bind [{+Actionslot 4}]", ::FakeScav4);
     self add_option("Scav", "Fake Scav Bind [{+Actionslot 2}]", ::FakeScav2);
     self add_option("Scav", "Fake Scav Bind [{+Actionslot 3}]", ::FakeScav3);
     
     self add_menu("Disco", "Binds2", "VIP");
     self add_option("Disco", "Disco Camo Bind [{+Actionslot 1}]", ::DiscoCamo1);
     self add_option("Disco", "Disco Camo Bind [{+Actionslot 4}]", ::DiscoCamo4);
     self add_option("Disco", "Disco Camo Bind [{+Actionslot 2}]", ::DiscoCamo2);
     self add_option("Disco", "Disco Camo Bind [{+Actionslot 3}]", ::DiscoCamo3);
     
     self add_menu("Cowboy", "Binds2", "VIP");
     self add_option("Cowboy", "Cowboy Bind [{+Actionslot 1}]", ::Cowboy1);
     self add_option("Cowboy", "Cowboy Bind [{+Actionslot 4}]", ::Cowboy4);
     self add_option("Cowboy", "Cowboy Bind [{+Actionslot 2}]", ::Cowboy2);
     self add_option("Cowboy", "Cowboy Bind [{+Actionslot 3}]", ::Cowboy3);
     
     self add_menu("nacbind", "Binds", "VIP");
     self add_option("nacbind", "Save Weapon 1", ::NacWeap1);
     self add_option("nacbind", "Save Weapon 2", ::NacWeap2);
     self add_option("nacbind", "Nac Mod [{+Actionslot 1}]", ::nacbind1);
     self add_option("nacbind", "Nac Mod [{+Actionslot 4}]", ::nacbind4);
     self add_option("nacbind", "Nac Mod [{+Actionslot 2}]", ::nacbind2);
     self add_option("nacbind", "Nac Mod [{+Actionslot 3}]", ::nacbind3);
     
     self add_menu("skreebind", "Binds", "VIP");
     self add_option("skreebind", "Save Weapon 1", ::SnacWeap1);
     self add_option("skreebind", "Save Weapon 2", ::SnacWeap2);
     self add_option("skreebind", "Skree [{+Actionslot 1}]", ::snacbind1);
     self add_option("skreebind", "Skree [{+Actionslot 4}]", ::snacbind4);
     self add_option("skreebind", "Skree [{+Actionslot 2}]", ::snacbind2);
     self add_option("skreebind", "Skree [{+Actionslot 3}]", ::snacbind3);
     
     self add_menu("changeclass", "Binds", "VIP");
     self add_option("changeclass", "Change Class", ::submenu, "changeclass1", "Change Class Bind");
     self add_option("changeclass", "Change Class - 1 Bullet", ::submenu, "changeclass2", "Change Class Bind");
     self add_option("changeclass", "Change Class 1 Bullet", ::submenu, "changeclass3", "Change Class Bind");
     self add_option("changeclass", "Change Class Canswap", ::submenu, "changeclass4", "Change Class Bind");
     
     self add_menu("changeclass1", "changeclass", "VIP");
     self add_option("changeclass1", "Change Class [{+Actionslot 1}]", ::ChangeClass1);
     self add_option("changeclass1", "Change Class [{+Actionslot 4}]", ::ChangeClass4);
     self add_option("changeclass1", "Change Class [{+Actionslot 2}]", ::ChangeClass2);
     self add_option("changeclass1", "Change Class [{+Actionslot 3}]", ::ChangeClass3);
     
     self add_menu("changeclass2", "changeclass", "VIP");
     self add_option("changeclass2", "Change Class - 1 Bullet [{+Actionslot 1}]", ::ChangeClass1TAO);
     self add_option("changeclass2", "Change Class - 1 Bullet [{+Actionslot 4}]", ::ChangeClass4TAO);
     self add_option("changeclass2", "Change Class - 1 Bullet [{+Actionslot 2}]", ::ChangeClass2TAO);
     self add_option("changeclass2", "Change Class - 1 Bullet [{+Actionslot 3}]", ::ChangeClass3TAO);
     
     self add_menu("changeclass3", "changeclass", "VIP");
     self add_option("changeclass3", "Change Class 1 Bullet [{+Actionslot 1}]", ::ChangeClass1OBL);
     self add_option("changeclass3", "Change Class 1 Bullet [{+Actionslot 4}]", ::ChangeClass4OBL);
     self add_option("changeclass3", "Change Class 1 Bullet [{+Actionslot 2}]", ::ChangeClass2OBL);
     self add_option("changeclass3", "Change Class 1 Bullet [{+Actionslot 3}]", ::ChangeClass3OBL);
     
     self add_menu("changeclass4", "changeclass", "VIP");
     self add_option("changeclass4", "Change Class Canswap [{+Actionslot 1}]", ::CANChangeClass1);
     self add_option("changeclass4", "Change Class Canswap [{+Actionslot 4}]", ::CANChangeClass4);
     self add_option("changeclass4", "Change Class Canswap [{+Actionslot 2}]", ::CANChangeClass2);
     self add_option("changeclass4", "Change Class Canswap [{+Actionslot 3}]", ::CANChangeClass3);
     
     self add_menu("OMAbind", "Binds", "VIP");
     self add_option("OMAbind", "Change OMA Bar Colors", ::submenu, "OMAcolors", "Change OMA Bars");
     self add_option("OMAbind", "Change OMA Weapon", ::submenu, "OMAWeapon", "Change OMA Weapon");
     self add_option("OMAbind", "Single OMA Bind", ::submenu, "OMA1", "Single OMA Bind");
     self add_option("OMAbind", "Double OMA Bind", ::submenu, "OMA2", "Double OMA Bind");
     self add_option("OMAbind", "Third Person OMA", ::submenu, "OMATP", "Third Person OMA");
     
     self add_menu("OMAcolors", "OMAbind", "VIP");
     self add_option("OMAcolors", "Blue", ::ChangeBarColor, "blue");
     self add_option("OMAcolors", "Red", ::ChangeBarColor, "red");
     self add_option("OMAcolors", "Yellow", ::ChangeBarColor, "yellow");
     self add_option("OMAcolors", "Green", ::ChangeBarColor, "green");
     self add_option("OMAcolors", "Cyan", ::ChangeBarColor, "cyan");
     self add_option("OMAcolors", "Pink", ::ChangeBarColor, "pink");
     self add_option("OMAcolors", "Black", ::ChangeBarColor, "black");
     self add_option("OMAcolors", "Normal", ::ChangeBarColor, "normal");
     
     self add_menu("OMAWeapon", "OMAbind", "VIP");
     self add_option("OMAWeapon", "Bomb", ::OMAWeapon, "Bomb");
     self add_option("OMAWeapon", "Default Weapon", ::OMAWeapon, "Default");
     self add_option("OMAWeapon", "Claymore", ::OMAWeapon, "Claymore");
     self add_option("OMAWeapon", "Black Hat", ::OMAWeapon, "Black");
     self add_option("OMAWeapon", "CSGO Knife", ::OMAWeapon, "CSGO");
     self add_option("OMAWeapon", "Ipad", ::OMAWeapon, "Ipad");
     self add_option("OMAWeapon", "Hunter Killer", ::OMAWeapon, "Killer");
     self add_option("OMAWeapon", "Death Machine", ::OMAWeapon, "Death");
     self add_option("OMAWeapon", "War Machine", ::OMAWeapon, "War");
     self add_option("OMAWeapon", "M27", ::OMAWeapon, "M27");
     self add_option("OMAWeapon", "Peacekeeper", ::OMAWeapon, "Peacekeeper");
     self add_option("OMAWeapon", "S12", ::OMAWeapon, "S12");
     self add_option("OMAWeapon", "FHJ-18 AA", ::OMAWeapon, "Launcher");
     self add_option("OMAWeapon", "Knife", ::OMAWeapon, "Knife");
     self add_option("OMAWeapon", "Ballistic Knife", ::OMAWeapon, "Ballistic");
     self add_option("OMAWeapon", "Executioner Dual Wield", ::OMAWeapon, "Executioner");
     self add_option("OMAWeapon", "Assault Shield", ::OMAWeapon, "Riot");
     
     self add_menu("OMA1", "OMAbind", "VIP");
     self add_option("OMA1", "OMA Bind [{+Actionslot 1}]", ::OneManArmy1);
     self add_option("OMA1", "OMA Bind [{+Actionslot 4}]", ::OneManArmy4);
     self add_option("OMA1", "OMA Bind [{+Actionslot 2}]", ::OneManArmy2);
     self add_option("OMA1", "OMA Bind [{+Actionslot 3}]", ::OneManArmy3);
     
     self add_menu("OMA2", "OMAbind", "VIP");
     self add_option("OMA2", "Double OMA Bind [{+Actionslot 1}]", ::OneManArmyDouble1);
     self add_option("OMA2", "Double OMA Bind [{+Actionslot 4}]", ::OneManArmyDouble4);
     self add_option("OMA2", "Double OMA Bind [{+Actionslot 2}]", ::OneManArmyDouble2);
     self add_option("OMA2", "Double OMA Bind [{+Actionslot 3}]", ::OneManArmyDouble3);
     
     self add_menu("OMATP", "OMAbind", "VIP");
     self add_option("OMATP", "Third Person OMA [{+Actionslot 1}]", ::ThirdPersonWithOMA1);
     self add_option("OMATP", "Third Person OMA [{+Actionslot 4}]", ::ThirdPersonWithOMA4);
     self add_option("OMATP", "Third Person OMA [{+Actionslot 2}]", ::ThirdPersonWithOMA2);
     self add_option("OMATP", "Third Person OMA [{+Actionslot 3}]", ::ThirdPersonWithOMA3);
     
     self add_menu("Instabind", "Binds", "VIP");
     self add_option("Instabind", "Save Weapon 1", ::InstaWeap1);
     self add_option("Instabind", "Save Weapon 2", ::InstaWeap2);
     self add_option("Instabind", "Instaswap [{+Actionslot 1}]", ::Instaswap1);
     self add_option("Instabind", "Instaswap [{+Actionslot 4}]", ::Instaswap4);
     self add_option("Instabind", "Instaswap [{+Actionslot 2}]", ::Instaswap2);
     self add_option("Instabind", "Instaswap [{+Actionslot 3}]", ::Instaswap3);
     
     self add_menu("Canswapbind", "Binds", "VIP");
     self add_option("Canswapbind", "Canswap [{+Actionslot 1}]", ::CanswapBind1);
     self add_option("Canswapbind", "Canswap [{+Actionslot 4}]", ::CanswapBind4);
     self add_option("Canswapbind", "Canswap [{+Actionslot 2}]", ::CanswapBind2);
     self add_option("Canswapbind", "Canswap [{+Actionslot 3}]", ::CanswapBind3);
     
     self add_menu("Bouncebind", "Binds", "VIP");
     self add_option("Bouncebind", "Bounce [{+Actionslot 1}]", ::Bounce1);
     self add_option("Bouncebind", "Bounce [{+Actionslot 4}]", ::Bounce4);
     self add_option("Bouncebind", "Bounce [{+Actionslot 2}]", ::Bounce2);
     self add_option("Bouncebind", "Bounce [{+Actionslot 3}]", ::Bounce3);
     
     self add_menu("Flickerbind", "Binds", "VIP");
     self add_option("Flickerbind", "Change Flicker Weapon", ::submenu, "FlickerWeapon", "Flicker Weapon");
     self add_option("Flickerbind", "Flicker [{+Actionslot 1}]", ::Flicker1);
     self add_option("Flickerbind", "Flicker [{+Actionslot 4}]", ::Flicker4);
     self add_option("Flickerbind", "Flicker [{+Actionslot 2}]", ::Flicker2);
     self add_option("Flickerbind", "Flicker [{+Actionslot 3}]", ::Flicker3);
     
     self add_menu("FlickerWeapon", "Flickerbind", "VIP");
     self add_option("FlickerWeapon", "Assault Rifles", ::submenu, "ARsFlick", "Assault Rifles");
     self add_option("FlickerWeapon", "Submachine Guns", ::submenu, "SMGsFlick", "Submachine Guns");
     self add_option("FlickerWeapon", "Shotguns", ::submenu, "ShotgunsFlick", "Shotguns");
     self add_option("FlickerWeapon", "Light Machine Guns", ::submenu, "LMGsFlick", "Light Machine Guns");
     self add_option("FlickerWeapon", "Sniper Rifles", ::submenu, "SnipersFlick", "Sniper Rifles");
     self add_option("FlickerWeapon", "Pistols", ::submenu, "PistolsFlick", "Pistols");
     self add_option("FlickerWeapon", "Launchers", ::submenu, "LaunchersFlick", "Launchers");
     self add_option("FlickerWeapon", "Specials", ::submenu, "SpecialsFlick", "Specials");
     
     self add_menu("ARsFlick", "FlickerWeapon", "VIP");
     self add_option("ARsFlick", "MTAR", ::setFlickerWeapon, "tar21_mp");
     self add_option("ARsFlick", "Type 25", ::setFlickerWeapon, "type95_mp");
     self add_option("ARsFlick", "SWAT -556", ::setFlickerWeapon, "sig556_mp");
     self add_option("ARsFlick", "FAL OSW", ::setFlickerWeapon, "sa58_mp");
     self add_option("ARsFlick", "M27", ::setFlickerWeapon, "hk416_mp");
     self add_option("ARsFlick", "SCAR-H", ::setFlickerWeapon, "scar_mp");
     self add_option("ARsFlick", "SMR", ::setFlickerWeapon, "saritch_mp");
     self add_option("ARsFlick", "M8A1", ::setFlickerWeapon, "xm8_mp");
     self add_option("ARsFlick", "AN-94", ::setFlickerWeapon, "an94_mp");
     
     self add_menu("SMGsFlick", "FlickerWeapon", "VIP");
     self add_option("SMGsFlick", "MP7", ::setFlickerWeapon, "mp7_mp");
     self add_option("SMGsFlick", "PDW-57", ::setFlickerWeapon, "pdw57_mp");
     self add_option("SMGsFlick", "Vector K10", ::setFlickerWeapon, "vector_mp");
     self add_option("SMGsFlick", "MSMC", ::setFlickerWeapon, "insas_mp");
     self add_option("SMGsFlick", "Chicom CQB", ::setFlickerWeapon, "qcw05_mp");
     self add_option("SMGsFlick", "Skorpion EVO", ::setFlickerWeapon, "evoskorpion_mp");
     self add_option("SMGsFlick", "Peacekeeper", ::setFlickerWeapon, "peacekeeper_mp");
     
     self add_menu("ShotgunsFlick", "FlickerWeapon", "VIP");
     self add_option("ShotgunsFlick", "R870 MCS", ::setFlickerWeapon, "870mcs_mp");
     self add_option("ShotgunsFlick", "S12", ::setFlickerWeapon, "saiga12_mp");
     self add_option("ShotgunsFlick", "KSG", ::setFlickerWeapon, "ksg_mp");
     self add_option("ShotgunsFlick", "M1216", ::setFlickerWeapon, "srm1216_mp");
     
     self add_menu("LMGsFlick", "FlickerWeapon", "VIP");
     self add_option("LMGsFlick", "Mk 48", ::setFlickerWeapon, "mk48_mp");
     self add_option("LMGsFlick", "QBB LSW", ::setFlickerWeapon, "qbb95_mp");
     self add_option("LMGsFlick", "LSAT", ::setFlickerWeapon, "lsat_mp");
     self add_option("LMGsFlick", "HAMR", ::setFlickerWeapon, "hamr_mp");
     
     self add_menu("SnipersFlick", "FlickerWeapon", "VIP");
     self add_option("SnipersFlick", "SVU-AS", ::setFlickerWeapon, "svu_mp");
     self add_option("SnipersFlick", "DSR 50", ::setFlickerWeapon, "dsr50_mp");
     self add_option("SnipersFlick", "Ballista", ::setFlickerWeapon, "ballista_mp");
     self add_option("SnipersFlick", "XPR-50", ::setFlickerWeapon, "as50_mp");
     
     self add_menu("PistolsFlick", "FlickerWeapon", "VIP");
     self add_option("PistolsFlick", "Five-seven", ::setFlickerWeapon, "fiveseven_mp");
     self add_option("PistolsFlick", "Tac-45", ::setFlickerWeapon, "fnp45_mp");
     self add_option("PistolsFlick", "B23R", ::setFlickerWeapon, "beretta93r_mp");
     self add_option("PistolsFlick", "Executioner", ::setFlickerWeapon, "judge_mp");
     self add_option("PistolsFlick", "Kap-40", ::setFlickerWeapon, "kard_mp");
     
     self add_menu("LaunchersFlick", "FlickerWeapon", "VIP");
     self add_option("LaunchersFlick", "SMAW", ::setFlickerWeapon, "smaw_mp");
     self add_option("LaunchersFlick", "FHJ-18 AA", ::setFlickerWeapon, "fhj18_mp");
     self add_option("LaunchersFlick", "RPG", ::setFlickerWeapon, "usrpg_mp");
     
     self add_menu("SpecialsFlick", "FlickerWeapon", "VIP");
     self add_option("SpecialsFlick", "Crossbow", ::setFlickerWeapon, "crossbow_mp");
     self add_option("SpecialsFlick", "Ballistic Knife", ::setFlickerWeapon, "knife_ballistic_mp");
     self add_option("SpecialsFlick", "Assault Shield", ::setFlickerWeapon, "riotshield_mp");
     self add_option("SpecialsFlick", "Bomb", ::setFlickerWeapon, "briefcase_bomb_mp");
     self add_option("SpecialsFlick", "Knife", ::setFlickerWeapon, "knife_held_mp");
     self add_option("SpecialsFlick", "IPAD", ::setFlickerWeapon, "killstreak_remote_turret_mp");
     self add_option("SpecialsFlick", "CSGO Knife", ::setFlickerWeapon, "knife_mp");
     self add_option("SpecialsFlick", "War Machine", ::setFlickerWeapon, "m32_mp");
     self add_option("SpecialsFlick", "Death Machine", ::setFlickerWeapon, "minigun_mp");
     self add_option("SpecialsFlick", "Claymore Rmala", ::setFlickerWeapon, "claymore_mp");
     self add_option("SpecialsFlick", "Black Hat Rmala", ::setFlickerWeapon, "pda_hack_mp");
     
     self add_menu("Boltbind", "Binds", "VIP");
     self add_option("Boltbind", "Save Bolt Position 1", ::savebolt);
     self add_option("Boltbind", "Save Bolt Position 2", ::savebolt2);
     self add_option("Boltbind", "Save Bolt Position 3", ::savebolt3);
     self add_option("Boltbind", "Save Bolt Position 4", ::savebolt4);
     self add_option("Boltbind", "Change Bolt Movement Speed", ::submenu, "boltSpeed", "Bolt Movement Speed");
     self add_option("Boltbind", "Single Bolt Movement", ::submenu, "boltMovement", "Bolt Movement");
     self add_option("Boltbind", "Double Bolt Movement", ::submenu, "boltMovement2", "Double Bolt Movement");
     self add_option("Boltbind", "Triple Bolt Movement", ::submenu, "boltMovement3", "Triple Bolt Movement");
     self add_option("Boltbind", "Quad Bolt Movement", ::submenu, "boltMovement4", "Quad Bolt Movement");
     
     self add_menu("boltSpeed", "Boltbind", "VIP");
     self add_option("boltSpeed", "Changed To 1 Seconds", ::changeBoltSpeed, 1);
     self add_option("boltSpeed", "Changed To 1.5 Seconds", ::changeBoltSpeed, 1.5);
     self add_option("boltSpeed", "Changed To 2 Seconds", ::changeBoltSpeed, 2);
     self add_option("boltSpeed", "Changed To 2.5 Seconds", ::changeBoltSpeed, 2.5);
     self add_option("boltSpeed", "Changed To 3 Seconds", ::changeBoltSpeed, 3);
     self add_option("boltSpeed", "Changed To 3.5 Seconds", ::changeBoltSpeed, 3.5);
     self add_option("boltSpeed", "Changed To 4 Seconds", ::changeBoltSpeed, 4);
     self add_option("boltSpeed", "Changed To 4.5 Seconds", ::changeBoltSpeed, 4.5);
     self add_option("boltSpeed", "Changed To 5 Seconds", ::changeBoltSpeed, 5);
     self add_option("boltSpeed", "Changed To 5.5 Seconds", ::changeBoltSpeed, 5.5);
     self add_option("boltSpeed", "Changed To 6 Seconds", ::changeBoltSpeed, 6);
     
     self add_menu("boltMovement", "Boltbind", "VIP");
     self add_option("boltMovement", "Bolt Movement [{+Actionslot 1}]", ::boltmovement1);
     self add_option("boltMovement", "Bolt Movement [{+Actionslot 4}]", ::boltmovement4);
     self add_option("boltMovement", "Bolt Movement [{+Actionslot 2}]", ::boltmovement2);
     self add_option("boltMovement", "Bolt Movement [{+Actionslot 3}]", ::boltmovement3);
     
     self add_menu("boltMovement2", "Boltbind", "VIP");
     self add_option("boltMovement2", "Double Bolt Movement [{+Actionslot 1}]", ::doubleboltmovement1);
     self add_option("boltMovement2", "Double Bolt Movement [{+Actionslot 4}]", ::doubleboltmovement4);
     self add_option("boltMovement2", "Double Bolt Movement [{+Actionslot 2}]", ::doubleboltmovement2);
     self add_option("boltMovement2", "Double Bolt Movement [{+Actionslot 3}]", ::doubleboltmovement3);
     
     self add_menu("boltMovement3", "Boltbind", "VIP");
     self add_option("boltMovement3", "Triple Bolt Movement [{+Actionslot 1}]", ::tripleboltmovement1);
     self add_option("boltMovement3", "Triple Bolt Movement [{+Actionslot 4}]", ::tripleboltmovement4);
     self add_option("boltMovement3", "Triple Bolt Movement [{+Actionslot 2}]", ::tripleboltmovement2);
     self add_option("boltMovement3", "Triple Bolt Movement [{+Actionslot 3}]", ::tripleboltmovement3);
     
     self add_menu("boltMovement4", "Boltbind", "VIP");
     self add_option("boltMovement4", "Quad Bolt Movement [{+Actionslot 1}]", ::quadboltmovement1);
     self add_option("boltMovement4", "Quad Bolt Movement [{+Actionslot 4}]", ::quadboltmovement4);
     self add_option("boltMovement4", "Quad Bolt Movement [{+Actionslot 2}]", ::quadboltmovement2);
     self add_option("boltMovement4", "Quad Bolt Movement [{+Actionslot 3}]", ::quadboltmovement3);
     
     self add_menu("Repeaterbind", "Binds", "VIP");
     self add_option("Repeaterbind", "Repeater [{+Actionslot 1}]", ::Repeater1);
     self add_option("Repeaterbind", "Repeater [{+Actionslot 4}]", ::Repeater4);
     self add_option("Repeaterbind", "Repeater [{+Actionslot 2}]", ::Repeater2);
     self add_option("Repeaterbind", "Repeater [{+Actionslot 3}]", ::Repeater3);
     
     self add_menu("Rapidbind", "Binds", "VIP");
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 1}]", ::rapidFire1);
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 4}]", ::rapidFire4);
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 2}]", ::rapidFire2);
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 3}]", ::rapidFire3);
     
     self add_menu("Scavbind", "Binds", "VIP");
     self add_option("Scavbind", "Drop Scav Pack [{+Actionslot 1}]", ::Scavdropbind1);
     self add_option("Scavbind", "Drop Scav Pack [{+Actionslot 4}]", ::Scavdropbind4);
     self add_option("Scavbind", "Drop Scav Pack [{+Actionslot 2}]", ::Scavdropbind2);
     self add_option("Scavbind", "Drop Scav Pack [{+Actionslot 3}]", ::Scavdropbind3);
     
     self add_menu("Emptybind", "Binds", "VIP");
     self add_option("Emptybind", "Empty Clip [{+Actionslot 1}]", ::EmptyClip1);
     self add_option("Emptybind", "Empty Clip [{+Actionslot 4}]", ::EmptyClip4);
     self add_option("Emptybind", "Empty Clip [{+Actionslot 2}]", ::EmptyClip2);
     self add_option("Emptybind", "Empty Clip [{+Actionslot 3}]", ::EmptyClip3);
     
     self add_menu("Rapidbind", "Binds", "VIP");
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 1}]", ::rapidFire1);
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 4}]", ::rapidFire4);
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 2}]", ::rapidFire2);
     self add_option("Rapidbind", "Rapid Fire [{+Actionslot 3}]", ::rapidFire3);
     
     self add_menu("Thirdbind", "Binds", "VIP");
     self add_option("Thirdbind", "Third Person [{+Actionslot 1}]", ::ThirdPerson1);
     self add_option("Thirdbind", "Third Person [{+Actionslot 4}]", ::ThirdPerson4);
     self add_option("Thirdbind", "Third Person [{+Actionslot 2}]", ::ThirdPerson2);
     self add_option("Thirdbind", "Third Person [{+Actionslot 3}]", ::ThirdPerson3);
     
     self add_menu("Dropbind", "Binds", "VIP");
     self add_option("Dropbind", "Drop Weapon [{+Actionslot 1}]", ::DropWeapon1);
     self add_option("Dropbind", "Drop Weapon [{+Actionslot 4}]", ::DropWeapon4);
     self add_option("Dropbind", "Drop Weapon [{+Actionslot 2}]", ::DropWeapon2);
     self add_option("Dropbind", "Drop Weapon [{+Actionslot 3}]", ::DropWeapon3);
     
     self add_menu("Canzoombind", "Binds", "VIP");
     self add_option("Canzoombind", "Canzoom [{+Actionslot 1}]", ::Canzoom1);
     self add_option("Canzoombind", "Canzoom [{+Actionslot 4}]", ::Canzoom4);
     self add_option("Canzoombind", "Canzoom [{+Actionslot 2}]", ::Canzoom2);
     self add_option("Canzoombind", "Canzoom [{+Actionslot 3}]", ::Canzoom3);
     
     self add_menu("Aimbot", self.menuname, "VIP");
     self add_option("Aimbot", "Unfair Aimbot", ::doUnfair);
     self add_option("Aimbot", "Activate EB", ::doRadiusAimbot);
     self add_option("Aimbot", "Select EB Range", ::aimbotRadius);
     self add_option("Aimbot", "Select EB Delay", ::aimbotDelay);
     self add_option("Aimbot", "Select EB Weapon", ::aimbotWeapon);
     self add_option("Aimbot", "Activate Tag EB", ::HmAimbot);
     self add_option("Aimbot", "Select Tag EB Range", ::HMaimbotRadius);
     self add_option("Aimbot", "Select Tag EB Delay", ::HMaimbotDelay);
     self add_option("Aimbot", "Select Tag EB Weapon", ::HMaimbotWeapon);
     
     self add_menu("Bots", self.menuname, "VIP");
     self add_option("Bots", "Spawn Attacker Bot", ::spawnAlliesBot);
     self add_option("Bots", "Spawn Defender Bot", ::spawnAxisBot);
     self add_option("Bots", "Freeze all Bots", ::freezeAllBots);
     self add_option("Bots", "Kick all Bots", ::kickAllBots);
     self add_option("Bots", "Teleport Bots To Crosshair", ::TeleportAllBots);
     self add_option("Bots", "Make Bots Look At You", ::MakeAllBotsLookAtYou);
     self add_option("Bots", "Make Bots Crouch", ::MakeAllBotsCrouch);
     self add_option("Bots", "Make Bots Prone", ::MakeAllBotsProne);
     
     self add_menu("Animations", self.menuname, "VIP");
     self add_option("Animations", "Gunlock Current Weapon", ::Gunlock);
     self add_option("Animations", "Knife Lunge Animation", ::AnimKnifeLunge);
     
     self add_menu("Miscellaneous", self.menuname, "VIP");
     self add_option("Miscellaneous", "Unlock All Camos", ::CamosBarThing);
     self add_option("Miscellaneous", "Unlock All Achievements", ::unlockAllCheevos);
     
     self add_menu("Maps", self.menuname, "Host");
     self add_option("Maps", "Change Map On Disk", ::submenu, "ChangeMap", "Change Map");
     self add_option("Maps", "Change Map DLC", ::submenu, "ChangeMapDLC", "Change Map");
     
     self add_menu("ChangeMap", "Maps", "Host");
     self add_option("ChangeMap", "Aftermath", ::ChangeMapFixed, "mp_la");
     self add_option("ChangeMap", "Cargo", ::ChangeMapFixed, "mp_dockside");
     self add_option("ChangeMap", "Carrier", ::ChangeMapFixed, "mp_carrier");
     self add_option("ChangeMap", "Drone", ::ChangeMapFixed, "mp_drone");
     self add_option("ChangeMap", "Express", ::ChangeMapFixed, "mp_express");
     self add_option("ChangeMap", "Hijacked", ::ChangeMapFixed, "mp_hijacked");
     self add_option("ChangeMap", "Meltdown", ::ChangeMapFixed, "mp_meltdown");
     self add_option("ChangeMap", "Overflow", ::ChangeMapFixed, "mp_overflow");
     self add_option("ChangeMap", "Plaza", ::ChangeMapFixed, "mp_nightclub");
     self add_option("ChangeMap", "Raid", ::ChangeMapFixed, "mp_raid");
     self add_option("ChangeMap", "Slums", ::ChangeMapFixed, "mp_slums");
     self add_option("ChangeMap", "Standoff", ::ChangeMapFixed, "mp_village");
     self add_option("ChangeMap", "Turbine", ::ChangeMapFixed, "mp_turbine");
     self add_option("ChangeMap", "Yemen", ::ChangeMapFixed, "mp_socotra");
     
     self add_menu("ChangeMapDLC", "Maps", "Host");
     self add_option("ChangeMapDLC", "Nuketown", ::ChangeMapFixed, "mp_nuketown_2020");
     self add_option("ChangeMapDLC", "Downhill", ::ChangeMapFixed, "mp_downhill");
     self add_option("ChangeMapDLC", "Mirage", ::ChangeMapFixed, "mp_mirage");
     self add_option("ChangeMapDLC", "Hydro", ::ChangeMapFixed, "mp_hydro");
     self add_option("ChangeMapDLC", "Grind", ::ChangeMapFixed, "mp_skate");
     self add_option("ChangeMapDLC", "Encore", ::ChangeMapFixed, "mp_concert");
     self add_option("ChangeMapDLC", "Magma", ::ChangeMapFixed, "mp_magma");
     self add_option("ChangeMapDLC", "Vertigo", ::ChangeMapFixed, "mp_vertigo");
     self add_option("ChangeMapDLC", "Studio", ::ChangeMapFixed, "mp_studio");
     self add_option("ChangeMapDLC", "Uplink", ::ChangeMapFixed, "mp_uplink ");
     self add_option("ChangeMapDLC", "Detour", ::ChangeMapFixed, "mp_bridge");
     self add_option("ChangeMapDLC", "Cove", ::ChangeMapFixed, "mp_cove");
     self add_option("ChangeMapDLC", "Rush", ::ChangeMapFixed, "mp_paintball");
     self add_option("ChangeMapDLC", "Dig", ::ChangeMapFixed, "mp_dig");
     self add_option("ChangeMapDLC", "Frost", ::ChangeMapFixed, "mp_frostbite");
     self add_option("ChangeMapDLC", "POD", ::ChangeMapFixed, "mp_pod ");
     self add_option("ChangeMapDLC", "Takeoff", ::ChangeMapFixed, "mp_takeoff");
     
     self add_menu("admin", self.menuname, "Host");
     self add_option("admin", "Change Gravity", ::submenu, "Gravity", "Change Gravity");
     self add_option("admin", "Slow Motion", ::submenu, "slowmo", "Slow Motion");
     self add_option("admin", "Auto Prone", ::autoProne);
     self add_option("admin", "Ground Spins", ::prone);
     self add_option("admin", "Mantle Spins", ::mantleSpin);
     self add_option("admin", "Ladder Mod", ::submenu, "Ladder", "Change Ladder Push");
     self add_option("admin", "Ladder Spins", ::laddermovement);
     self add_option("admin", "Soft Land", ::softLand);
     self add_option("admin", "Pickup Radius", ::submenu, "Pickup", "Change Pickup Radius");
     self add_option("admin", "Nade Pickup Radius", ::submenu, "Nade", "Nade Pickup Radius"); 
     self add_option("admin", "Change melee Length", ::meleeRange);
     self add_option("admin", "Change Killcam Length", ::LongKillcam);
     self add_option("admin", "Toggle Playercard", ::Playercard);
     self add_option("admin", "Pause Timer", ::toggleTimer);
     self add_option("admin", "Fast Restart", ::fastrestart);
     
     self add_menu("Gravity", "admin", "Host");
     self add_option("Gravity", "Gravity 800", ::ChangeGravity, 800);
     self add_option("Gravity", "Gravity 750", ::ChangeGravity, 750);
     self add_option("Gravity", "Gravity 700", ::ChangeGravity, 700);
     self add_option("Gravity", "Gravity 650", ::ChangeGravity, 650);
     self add_option("Gravity", "Gravity 600", ::ChangeGravity, 600);
     self add_option("Gravity", "Gravity 550", ::ChangeGravity, 550);
     self add_option("Gravity", "Gravity 500", ::ChangeGravity, 500);
     self add_option("Gravity", "Gravity 450", ::ChangeGravity, 450);
     self add_option("Gravity", "Gravity 400", ::ChangeGravity, 400);
     self add_option("Gravity", "Gravity 350", ::ChangeGravity, 350);
     self add_option("Gravity", "Gravity 300", ::ChangeGravity, 300);
     self add_option("Gravity", "Gravity 250", ::ChangeGravity, 250);
     self add_option("Gravity", "Gravity 200", ::ChangeGravity, 200);
     self add_option("Gravity", "Gravity 150", ::ChangeGravity, 150);
     self add_option("Gravity", "Gravity 100", ::ChangeGravity, 100);
     
     self add_menu("slowmo", "admin", "Host");
     self add_option("slowmo", "slow mo 1.00", ::setSlowMoKC, 1);
     self add_option("slowmo", "slow mo 0.75", ::setSlowMo, 0.75);
     self add_option("slowmo", "slow mo 0.50", ::setSlowMo, 0.50);
     self add_option("slowmo", "slow mo 0.25", ::setSlowMo, 0.25);
     self add_option("slowmo", "slow mo 0.10", ::setSlowMo, 0.10);
     self add_option("slowmo", "slow mo 0.75 (in killcam)", ::setSlowMoKC, 0.75);
     self add_option("slowmo", "slow mo 0.50 (in killcam)", ::setSlowMoKC, 0.50);
     self add_option("slowmo", "slow mo 0.25 (in killcam)", ::setSlowMoKC, 0.25);
     self add_option("slowmo", "slow mo 0.10 (in killcam)", ::setSlowMoKC, 0.10);
     
     self add_menu("Ladder", "admin", "Host");
     self add_option("Ladder", "Ladder Knockback 128 (Default)", ::LadderYeet, 128);
     self add_option("Ladder", "Ladder Knockback 20", ::LadderYeet, 20);
     self add_option("Ladder", "Ladder Knockback 40", ::LadderYeet, 40);
     self add_option("Ladder", "Ladder Knockback 60", ::LadderYeet, 60);
     self add_option("Ladder", "Ladder Knockback 80", ::LadderYeet, 80);
     self add_option("Ladder", "Ladder Knockback 100", ::LadderYeet, 100);
     self add_option("Ladder", "Ladder Knockback 200", ::LadderYeet, 200);
     self add_option("Ladder", "Ladder Knockback 400", ::LadderYeet, 400);
     self add_option("Ladder", "Ladder Knockback 600", ::LadderYeet, 600);
     self add_option("Ladder", "Ladder Knockback 800", ::LadderYeet, 800);
     self add_option("Ladder", "Ladder Knockback 999", ::LadderYeet, 999);
     
     self add_menu("Pickup", "admin", "Host");
     self add_option("Pickup", "Pickup Radius 100", ::expickup, 100);
     self add_option("Pickup", "Pickup Radius 200", ::expickup, 200);
     self add_option("Pickup", "Pickup Radius 300", ::expickup, 300);
     self add_option("Pickup", "Pickup Radius 400", ::expickup, 400);
     self add_option("Pickup", "Pickup Radius 500", ::expickup, 500);
     self add_option("Pickup", "Pickup Radius 600", ::expickup, 600);
     self add_option("Pickup", "Pickup Radius 700", ::expickup, 700);
     self add_option("Pickup", "Pickup Radius 800", ::expickup, 800);
     self add_option("Pickup", "Pickup Radius 900", ::expickup, 900);
     self add_option("Pickup", "Pickup Radius 1000", ::expickup, 1000);
     self add_option("Pickup", "Pickup Radius 2000", ::expickup, 2000);
     self add_option("Pickup", "Pickup Radius 3000", ::expickup, 3000);
     self add_option("Pickup", "Pickup Radius 4000", ::expickup, 4000);
     self add_option("Pickup", "Pickup Radius 6000", ::expickup, 5000);
     self add_option("Pickup", "Pickup Radius 7000", ::expickup, 6000);
     self add_option("Pickup", "Pickup Radius 8000", ::expickup, 7000);
     self add_option("Pickup", "Pickup Radius 9000", ::expickup, 8000);
     
     self add_menu("Nade", "admin", "Host");
     self add_option("Nade", "Nade Radius 100", ::grenaderadius, 100);
     self add_option("Nade", "Nade Radius 200", ::grenaderadius, 200);
     self add_option("Nade", "Nade Radius 300", ::grenaderadius, 300);
     self add_option("Nade", "Nade Radius 400", ::grenaderadius, 400);
     self add_option("Nade", "Nade Radius 500", ::grenaderadius, 500);
     self add_option("Nade", "Nade Radius 600", ::grenaderadius, 600);
     self add_option("Nade", "Nade Radius 700", ::grenaderadius, 700);
     self add_option("Nade", "Nade Radius 800", ::grenaderadius, 800);
     self add_option("Nade", "Nade Radius 900", ::grenaderadius, 900);
     self add_option("Nade", "Nade Radius 1000", ::grenaderadius, 1000);
     self add_option("Nade", "Nade Radius 2000", ::grenaderadius, 2000);
     self add_option("Nade", "Nade Radius 3000", ::grenaderadius, 3000);
     self add_option("Nade", "Nade Radius 4000", ::grenaderadius, 4000);
     self add_option("Nade", "Nade Radius 6000", ::grenaderadius, 5000);
     self add_option("Nade", "Nade Radius 7000", ::grenaderadius, 6000);
     self add_option("Nade", "Nade Radius 8000", ::grenaderadius, 7000);
     self add_option("Nade", "Nade Radius 9000", ::grenaderadius, 8000);
     

    self add_menu("PlayersMenu", self.menuname, "Co-Host");
    for (i = 0; i < 17; i++)
    { self add_menu("pOpt " + i, "PlayersMenu", "Co-Host"); }
}

updatePlayersMenu()
{
    self.menu.menucount["PlayersMenu"] = 0;
    for (i = 0; i < 17; i++)
    {
        player = level.players[i];
        playerName = getPlayerName(player);
        
        playersizefixed = level.players.size - 1;
        if(self.menu.curs["PlayersMenu"] > playersizefixed)
        { 
            self.menu.scrollerpos["PlayersMenu"] = playersizefixed;
            self.menu.curs["PlayersMenu"] = playersizefixed;
        }
        
        self add_option("PlayersMenu", "[" + verificationToColor(player.status) + "^7] " + playerName, ::submenu, "pOpt " + i, "[" + verificationToColor(player.status) + "^7] " + playerName);
    
        self add_menu_alt("pOpt " + i, "PlayersMenu");
        self add_option("pOpt " + i, "Give ^5Co-Host^7", ::changeVerificationMenu, player, "Co-Host");
        self add_option("pOpt " + i, "Give ^1Admin^7", ::changeVerificationMenu, player, "Admin");
        self add_option("pOpt " + i, "Give ^6VIP^7", ::changeVerificationMenu, player, "VIP");
        self add_option("pOpt " + i, "^2Verify^7", ::changeVerificationMenu, player, "Verified");
        self add_option("pOpt " + i, "^3Unverify^7", ::changeVerificationMenu, player, "Unverified");       
    }
}
CamosBarThing()
{
    self thread ChallengeBar();
    self thread doAllUnlockCamos();
}

doAllUnlockCamos()
{
    self thread unlockallcamos();
    self thread camonlock();
    self thread maps\mp\gametypes\_hud_message::hintMessage("^1Weapon's Camos Unlocking !!", 5);
    wait 10;
    self thread maps\mp\gametypes\_hud_message::hintMessage("Weapon Camos :^1Unlocked", 5);
}

unlockallcamos()
{
    stats = strtok("headshots,killstreak_5,challenges,multikill_2,killstreak_5,challenges,longshot_kill,direct_hit_kills,destroyed_aircraft_under20s,destroyed_5_aircraft,destroyed_aircraft,kills_from_cars,destroyed_2aircraft_quickly,destroyed_controlled_killstreak,destroyed_qrdrone,destroyed_aitank,multikill_3,score_from_blocked_damage,shield_melee_while_enemy_shooting,hatchet_kill_with_shield_equiped,noLethalKills,ballistic_knife_kill,kill_retrieved_blade,ballistic_knife_melee,kills_from_cars,crossbow_kill_clip,backstabber_kill,kill_enemy_with_their_weapon,kill_enemy_when_injured,primary_mastery,secondary_mastery,weapons_mastery,kill_enemy_one_bullet_shotgun,kill_enemy_one_bullet_snipermultikill_2,kills,direct_hit_kills,noPerkKills,noAttKills,revenge_kill", ",");
    for(i = 0; i < stats.size; i++)
    self addweaponstat(i, 10000);
}

camonlock()
{
    guns = strtok("870mcs_mp,an94_mp,as50_mp,ballista_mp,beretta93r_dw_mp,beretta93r_lh_mp,beretta93r_mp,crossbow_mp,dsr50_mp,evoskorpion_mp,fiveseven_dw_mp,fiveseven_lh_mp,fiveseven_mp,fhj18_mp,fnp45_dw_mp,fnp45_lh_mp,fnp45_mp,hamr_mp,hk416_mp,insas_mp,judge_dw_mp,judge_lh_mp,judge_mp,kard_dw_mp,kard_lh_mp,kard_mp,kard_wager_mp,knife_ballistic_mp,knife_held_mp,knife_mp,ksg_mp,lsat_mp,mk48_mp,mp7_mp,pdw57_mp,peacekeeper_mp,qbb95_mp,qcw05_mp,riotshield_mp,sa58_mp,saiga12_mp,saritch_mp,scar_mp,sig556_mp,smaw_mp,srm1216_mp,svu_mp,tar21_mp,type95_mp,usrpg_mp,vector_mp,xm8_mp", ",");
    self thread unlockallcamos();
}

ChallengeBar()
{
    self endon("death");
    self.ProcessBar2=createPrimaryProgressBar();
    for(i=0;i<101;i++)
    {
        self.ProcessBar2 updateBar(i / 100);
        self.CreateText setValue(i);
        setPoint("CENTER", "CENTER", 0, -85);
        self.ProcessBar2.color     = (0,0,0);
        self.ProcessBar2.bar.color = (randomint(255)/255, randomint(255)/255, randomint(255)/255);
        self.ProcessBar2.alpha     = 0.63;
        wait .1;
    }
    self.ProcessBar2 destroyElem();
}

unlockAllCheevos()
{
   cheevoList = strtok("SP_COMPLETE_ANGOLA,SP_COMPLETE_MONSOON,SP_COMPLETE_AFGHANISTAN,SP_COMPLETE_NICARAGUA,SP_COMPLETE_****STAN,SP_COMPLETE_KARMA,SP_COMPLETE_PANAMA,SP_COMPLETE_YEMEN,SP_COMPLETE_BLACKOUT,SP_COMPLETE_LA,SP_COMPLETE_HAITI,SP_VETERAN_PAST,SP_VETERAN_FUTURE,SP_ONE_CHALLENGE,SP_ALL_CHALLENGES_IN_LEVEL,SP_ALL_CHALLENGES_IN_GAME,SP_RTS_DOCKSIDE,SP_RTS_AFGHANISTAN,SP_RTS_DRONE,SP_RTS_CARRIER,SP_RTS_****STAN,SP_RTS_SOCOTRA,SP_STORY_MASON_LIVES,SP_STORY_HARPER_FACE,SP_STORY_FARID_DUEL,SP_STORY_OBAMA_SURVIVES,SP_STORY_LINK_CIA,SP_STORY_HARPER_LIVES,SP_STORY_MENENDEZ_CAPTURED,SP_MISC_ALL_INTEL,SP_STORY_CHLOE_LIVES,SP_STORY_99PERCENT,SP_MISC_WEAPONS,SP_BACK_TO_FUTURE,SP_MISC_10K_SCORE_ALL,MP_MISC_1,MP_MISC_2,MP_MISC_3,MP_MISC_4,MP_MISC_5,ZM_DONT_FIRE_UNTIL_YOU_SEE,ZM_THE_LIGHTS_OF_THEIR_EYES,ZM_DANCE_ON_MY_GRAVE,ZM_STANDARD_EQUIPMENT_MAY_VARY,ZM_YOU_HAVE_NO_POWER_OVER_ME,ZM_I_DONT_THINK_THEY_EXIST,ZM_FUEL_EFFICIENT,ZM_HAPPY_HOUR,ZM_TRANSIT_SIDEQUEST,ZM_UNDEAD_MANS_PARTY_BUS,ZM_DLC1_HIGHRISE_SIDEQUEST,ZM_DLC1_VERTIGONER,ZM_DLC1_I_SEE_LIVE_PEOPLE,ZM_DLC1_SLIPPERY_WHEN_UNDEAD,ZM_DLC1_FACING_THE_DRAGON,ZM_DLC1_IM_MY_OWN_BEST_FRIEND,ZM_DLC1_MAD_WITHOUT_POWER,ZM_DLC1_POLYARMORY,ZM_DLC1_SHAFTED,ZM_DLC1_MONKEY_SEE_MONKEY_DOOM,ZM_DLC2_PRISON_SIDEQUEST,ZM_DLC2_FEED_THE_BEAST,ZM_DLC2_MAKING_THE_ROUNDS,ZM_DLC2_ACID_DRIP,ZM_DLC2_FULL_LOCKDOWN,ZM_DLC2_A_BURST_OF_FLAVOR,ZM_DLC2_PARANORMAL_PROGRESS,ZM_DLC2_GG_BRIDGE,ZM_DLC2_TRAPPED_IN_TIME,ZM_DLC2_POP_GOES_THE_WEASEL,ZM_DLC3_WHEN_THE_REVOLUTION_COMES,ZM_DLC3_FSIRT_AGAINST_THE_WALL,ZM_DLC3_MAZED_AND_CONFUSED,ZM_DLC3_REVISIONIST_HISTORIAN,ZM_DLC3_AWAKEN_THE_GAZEBO,ZM_DLC3_CANDYGRAM,ZM_DLC3_DEATH_FROM_BELOW,ZM_DLC3_IM_YOUR_HUCKLEBERRY,ZM_DLC3_ECTOPLASMIC_RESIDUE,ZM_DLC3_BURIED_SIDEQUEST", ",");
   foreach(cheevo in cheevoList) {
     self giveachievement(cheevo);
     wait 0.25;
   }
}

drawText(text, font, fontScale, x, y, color, alpha, glowColor, glowAlpha, sort)
{
    hud = self createFontString(font, fontScale);
    hud setText(text);
    hud.x = x;
    hud.y = y;
    hud.color = color;
    hud.alpha = alpha;
    hud.glowColor = glowColor;
    hud.glowAlpha = glowAlpha;
    hud.sort = sort;
    hud.alpha = alpha;
    return hud;
    level.result += 1;
    hud setText(text);
    level notify("textset");
}


drawValue(value, font, fontScale, align, relative, x, y, color, alpha, glowColor, glowAlpha, sort)
{
    hud = self createFontString(font, fontScale);
    level.varsArray["result"] += 1;
    level notify("textset");
    hud setPoint( align, relative, x, y );
    hud.color = color;
    hud.alpha = alpha;
    hud.glowColor = glowColor;
    hud.glowAlpha = glowAlpha;
    hud.sort = sort;
    hud.alpha = alpha;
    hud setValue(value);
    hud.foreground = true;
    hud.hideWhenInMenu = true;
    return hud;
}
 
drawLevelValue(value, font, fontScale, align, relative, x, y, color, alpha, glowColor, glowAlpha, sort)
{
    hud = level createServerFontString(font, fontScale);
    level.varsArray["result"] += 1;
    level notify("textset");
    hud setPoint(align, relative, x, y);
    hud.color = color;
    hud.alpha = alpha;
    hud.glowColor = glowColor;
    hud.glowAlpha = glowAlpha;
    hud.sort = sort;
    hud.alpha = alpha;
    hud setValue(value);
    hud.foreground = true;
    hud.hideWhenInMenu = true;
    return hud;
}

drawShader(shader, x, y, width, height, color, alpha, sort)
{
    hud = newClientHudElem(self);
    hud.elemtype = "icon";
    hud.color = color;
    hud.alpha = alpha;
    hud.sort = sort;
    hud.children = [];
    hud setParent(level.uiParent);
    hud setShader(shader, width, height);
    hud.x = x;
    hud.y = y;
    return hud;
}

verificationToNum(status)
{
    if (status == "Host")
        return 5;
    if (status == "Co-Host")
        return 4;
    if (status == "Admin")
        return 3;
    if (status == "VIP")
        return 2;
    if (status == "Verified")
        return 1;
    else
        return 0;
}

verificationToColor(status)
{
    if (status == "Host")
        return "^8Host";
    if (status == "Co-Host")
        return "^5Co^7";
    if (status == "Admin")
        return "^1Admin^7";
    if (status == "VIP")
        return "^6VIP^7";
    if (status == "Verified")
        return "^2Verify^7";
    else
        return "^3None^7";
}

changeVerificationMenu(player, verlevel)
{
    if( player.status != verlevel && !player isHost())
    {       
        player.status = verlevel;
        
        if(player.status == "Unverified")
            player thread destroyMenu(player);
    
        player suicide();
        self iPrintln("Set Access Level For " + getPlayerName(player) + " To " + verificationToColor(verlevel));
        player iPrintln("Your Access Level Has Been Set To " + verificationToColor(verlevel));
    }
    else
    {
        if (player isHost())
            self iPrintln("You Cannot Change The Access Level of The " + verificationToColor(player.status));
        else
            self iPrintln("Access Level For " + getPlayerName(player) + " Is Already Set To " + verificationToColor(verlevel));
    }
}
    
moveTo(axis, position, time)
{
    self moveOverTime(time);

    if(axis=="x")
        self.x = position;
    else
        self.y = position;
}

changeVerification(player, verlevel)
{
    player.status = verlevel;
}

getPlayerName(player)
{
    playerName = getSubStr(player.name, 0, player.name.size);
    for(i=0; i < playerName.size; i++)
    {
        if(playerName[i] == "]")
            break;
    }
    if(playerName.size != i)
        playerName = getSubStr(playerName, i + 1, playerName.size);
    return playerName;
}

Iif(bool, rTrue, rFalse)
{
    if(bool)
        return rTrue;
    else
        return rFalse;
}

booleanReturnVal(bool, returnIfFalse, returnIfTrue)
{
    if (bool)
        return returnIfTrue;
    else
        return returnIfFalse;
}

booleanOpposite(bool)
{
    if(!isDefined(bool))
        return true;
    if (bool)
        return false;
    else
        return true;
}
returnmyweaponsarray()
{
    level.myweapons[0] = "mp7_mp";
    level.myweapons[1] = "pdw57_mp";
    level.myweapons[2] = "vector_mp";
    level.myweapons[3] = "insas_mp";
    level.myweapons[4] = "qcw05_mp";
    level.myweapons[5] = "evoskorpion_mp";
    level.myweapons[6] = "peacekeeper_mp";
    level.myweapons[7] = "tar21_mp";
    level.myweapons[8] = "type95_mp";
    level.myweapons[9] = "sig556_mp";
    level.myweapons[10] = "sa58_mp";
    level.myweapons[11] = "hk416_mp";
    level.myweapons[12] = "scar_mp";
    level.myweapons[13] = "saritch_mp";
    level.myweapons[14] = "xm8_mp";
    level.myweapons[15] = "an94_mp";
    level.myweapons[16] = "870mcs_mp";
    level.myweapons[17] = "saiga12_mp";
    level.myweapons[18] = "ksg_mp";
    level.myweapons[19] = "srm1216_mp";
    level.myweapons[20] = "mk48_mp";
    level.myweapons[21] = "qbb95_mp";
    level.myweapons[22] = "lsat_mp";
    level.myweapons[23] = "hamr_mp";
    level.myweapons[24] = "svu_mp";
    level.myweapons[25] = "dsr50_mp";
    level.myweapons[26] = "ballista_mp";
    level.myweapons[27] = "as50_mp";
    level.myweapons[28] = "fiveseven_mp";
    level.myweapons[29] = "fnp45_mp";
    level.myweapons[30] = "beretta93r_mp";
    level.myweapons[31] = "judge_mp";
    level.myweapons[32] = "kard_mp";
    level.myweapons[33] = "smaw_mp";
    level.myweapons[34] = "usrpg_mp";
    level.myweapons[35] = "fhj18_mp";
    level.myweapons[36] = "riotshield_mp";
    level.myweapons[37] = "crossbow_mp";
    level.myweapons[38] = "knife_ballistic_mp";
    level.myweapons[39] = "knife_held_mp";
    return level.myweapons;
} 
// shoutout to Loz
ToggleGod()
{   
    if( self.god == false )
    {
        self enableInvulnerability();
        self.god = true;
        self iprintln("Godmode ^2On");
    }
    else if( self.god == true )
    {  
        self disableInvulnerability();
        self.god = false;
        self iprintln("Godmode ^1Off");
    }
}

 ToggleInfEquipment()
 {
    if(self.InfEquipment==0)
    {
        self iPrintln("Infinite Equipment ^2On");
        wait 0.04;
        self thread InfEquipment();
        self.InfEquipment = 1;
    }
    else
    {
        
        self iprintln("Infinite Equipment ^1Off");
          self notify("noMoreInfEquip");
          self.InfEquipment = 0;
    }
 }
 
 InfEquipment()
{
    self endon("noMoreInfEquip");
    for(;;)
    {
        wait 0.1;
        currentoffhand = self getcurrentoffhand();
        if ( currentoffhand != "none" )
            self givemaxammo( currentoffhand );
    }
}
    
ToggleAmmo()
{

     if(self.unlimitedammo == 0)
     {
          self.unlimitedammo = 1;
          self iprintln("Infinite Ammo ^2On");
          self thread unlimited_ammo();
     }
     else
     {
          self.unlimitedammo = 0;
          self iprintln("Infinite Ammo ^1Off");
          self notify("stop_unlimitedammo");
     }
}

unlimited_ammo()
{
     self endon("stop_unlimitedammo");
     self endon("death");
     for(;;)
     {
          currentWeapon = self getcurrentweapon();
          if ( currentWeapon != "none" )
          {
               self setweaponammoclip( currentWeapon, weaponclipsize(currentWeapon) );
               self givemaxammo( currentWeapon );
          }
          currentoffhand = self getcurrentoffhand();
          if ( currentoffhand != "none" )
      {
            self givemaxammo( currentoffhand );
      }
     wait .1;
     }
}

ToggleFOV()
{
    if(self.fov == true)
    {
        self iPrintln("FOV: ^2On");
        setDvar("cg_fov", "90");
        self.fov = false;
    }
    else
    {
        self iPrintln("FOV: ^1Off");
        setDvar("cg_fov", "65");
        self.fov = true;
    }
}

Third()
{
    if(!IsDefined(self.third))
    {
        self.third = true;
        self setclientthirdperson(1);
        self iPrintln("Third person ^2On");
    }
    else
    {
        self.third = undefined;
        self setclientthirdperson(0);
        self iPrintln("Third person ^1Off");
    }
}

toggle_invs()
{
    if(self.invisible==false)
    {
        
        self hide();
        self iPrintln("Invisibility ^2On");
        self.invisible=true;
    }
    else
    {
        self show();
        self iPrintln("Invisibility ^1Off");
        self.invisible=false;
    }
}

togglemovinggun()
{
    if( !(self.moving) )
    {
        self.moving = 1;
        self thread movegun();
        self iprintln( "Moving Gun ^2On" );
    }
    else
    {
        self.moving = 0;
        self notify( "endon_MoveGun" );
        self iprintln( "Moving Gun ^1Off" );
    }
}

movegun()
{
    self endon( "disconnect" );
    self endon( "death" );
    self endon( "endon_MoveGun" );
    self endon( "NewSetActivate" );
    setdvar( "cg_gun_y", 0 );
    setdvar( "cg_gun_x", 10 );
    i = -30;
    for(;;)
    {
        i++;
        setdvar( "cg_gun_y", i );
        if( getdvar( "cg_gun_y" ) == "30" )
        {
            i = -30;
        }
        wait 0.1;
    }
}

ResetGun()
{
    setdvar( "cg_gun_y", 0 );
    setdvar( "cg_gun_x", 0 );
}

RapidFire()
{
    if(self.RapidFapping==0)
    {
        self iPrintln("Rapid Fire ^2On");
        wait 0.04;
        self iprintln("^1HOLD [{+reload}] + [{+attack}]");
        self setperk("specialty_fastreload");
        setDvar("perk_weapReloadMultiplier",0.001);
        self.RapidFapping=1;
    }
    else
    {
        setDvar("perk_weapReloadMultiplier",0.5);
        self iPrintln("Rapid Fire ^1Off");
        self.RapidFapping=0;
    }
}

superSpeed()
{
    if(self.superspeed == 0)
    {
    
        self.superspeed = 1;
        setDvar("g_speed", "700");
        self iprintln("Super Speed: ^2On");
    }
    else if(self.superspeed == 1)
    {
    
        self.superspeed = 0;
        setDvar("g_speed", "190");
        self iprintln("Super Speed: ^1Off");
    }
}

// start of red boxes

ToggleWallHack()
{
        if(!self.ToggleWallHack)
        {
                self thread enableESP();
                self maps\mp\killstreaks\_spyplane::callsatellite("radardirection_mp");
                self iprintln("ESP Box ^2On");
                self.ToggleWallHack=true;
        }
        else
        {
                self thread disableESP();
                self iprintlnbold("ESP Box ^1Off");
                self.ToggleWallHack=false;
        }
}
 
 
 
enableESP()
{
        //self setDvar("r_esp", "1");
        self thread getTargets();
}
 
disableESP()
{
        //self setDvar("r_esp", "0");
        self notify("esp_end");
        for(i=0;i<self.esp.targets.size;i++)
                self.esp.targets[i].hudbox destroy();
}
 
getTargets()
{
self endon("esp_end");
        for(;;)
        {
                self.esp = spawnStruct();
                self.esp.targets = [];
                a = 0;
                for(i=0; i<level.players.size; i++)
                {
                        if(self != level.players[i])
                        {
                                self.esp.targets[a] = spawnStruct();
                                self.esp.targets[a].player = level.players[i];
                                self.esp.targets[a].hudbox = self createBox(self.esp.targets[a].player.origin,1);
                                self thread monitorTarget( self.esp.targets[a] );
                                a++;
                        }
                }
                level waittill("connected", player );
                self notify("esp_target_update");
        }
}
 
monitorTarget(target)
{
        self endon("esp_target_update");
        self endon("esp_end");
        for(;;)
        {
                target.hudbox destroy();
                h_pos = target.player.origin;
                t_pos = target.player.origin;
                if(bulletTracePassed(self getTagOrigin("j_spine4"), target.player getTagOrigin("j_spine4"), false, self))
                {
                        if(distance(self.origin,target.player.origin)<=1800)
                        {
                                if(level.teamBased && target.player.pers["team"] != self.pers["team"])
                                      {  target.hudbox = self createBox(h_pos, 900);
                                        target.hudbox.color = (0,1,0); }
                                 if(!level.teamBased)
                                     {  target.hudbox = self createBox(h_pos, 900);
                                      
                                target.hudbox.color = (0,1,0); }
                       }
                        else
                                target.hudbox = self createBox(t_pos,900);
                }
                else
                        target.hudbox = self createBox(t_pos,100);
              
                if(!isAlive(target.player))
                {
                        target.hudbox destroy();
                        if(level.teamBased && target.player.pers["team"] != self.pers["team"]) {
                               target.hudbox = self createBox(t_pos, 900);
                               target.hudbox setShader(level.deads, 6, 6);
                             }
                       else if(!level.teamBased)
                               { target.hudbox = self createBox(t_pos, 900);
                                target.hudbox setShader(level.deads, 6, 6);
                               }
                }
              
               if(self.pers["team"] == target.player.pers["team"] && level.teamBased)
               {
                        target.hudbox destroy();
                       if(distance(target.player.origin,self.origin) < 3)
                               target.hudbox = self createBox(t_pos, 900);
 
               }
              
                wait 0.01;
        }
}
 
createBox(pos,type)
{
        shader = newClientHudElem( self );
        shader.sort = 0;
        shader.archived = false;
        shader.x = pos[0];
        shader.y = pos[1];
        shader.z = pos[2] + 30;
        shader setShader(level.esps, 6, 6);
        shader setWaypoint(true,true);
        shader.alpha = 0.80;
        shader.color = (1,0,0);
        return shader;
}

//end of red boxes

toggleleft()
{
    if( self.lg == 1 )
    {
        self iprintln( "Left Gun ^2On" );
        setdvar( "cg_gun_y", "7" );
        self.lg = 0;
    }
    else
    {
        self iprintln( "Left Side Gun ^1Off" );
        setdvar( "cg_gun_y", "0" );
        self.lg = 1;
    }
}

togglecenter()
{
    if( self.lg == 1 )
    {
        self iprintln( "Center Gun ^2On" );
        setdvar( "cg_gun_y", "2.5" );
        self.lg = 0;
    }
    else
    {
        self iprintln( "Center Gun ^1Off" );
        setdvar( "cg_gun_y", "0" );
        self.lg = 1;
    }
}

toggleuav()
{
    if( self.uav == 1 )
    {
        self iprintln( "UAV ^2On" );
        self setclientuivisibilityflag( "g_compassShowEnemies", 1 );
        self.uav = 0;
    }
    else
    {
        self iprintln( "UAV ^1Off" );
        self setclientuivisibilityflag( "g_compassShowEnemies", 0 );
        self.uav = 1;
    }
}



autodropshot()
{
    if( self.drop == 1 )
    {
        self thread dropthebase();
        self iprintln( "Auto Drop-Shot ^2On" );
        self.drop = 0;
    }
    else
    {
        self notify( "stop_drop" );
        self iprintln( "Auto Drop-Shot ^1Off" );
        self.drop = 1;
    }

}

easystax()
{
    if(self.stax == 0)
    {
        self.stax = 1;
        self.easystax = true;
        wait .1;
    }
    else
    {
        self.stax = 0;
        self.easystax = undefined;
        wait .1;
    }
}

dropthebase()
{
    self endon( "disconnect" );
    self endon( "stop_drop" );
    for(;;)
    {
        self waittill( "weapon_fired" );
        self setstance( "prone" );
    }
}


KYS()
{
    self suicide();
}



// camo

changeCamo(num)
{
    weap=self getCurrentWeapon();
    myclip=self getWeaponAmmoClip(weap);
    mystock=self getWeaponAmmoStock(weap);  
    self takeWeapon(weap);  
    weaponOptions=self calcWeaponOptions(num,0,0,0,0);  
    self GiveWeapon(weap,0,weaponOptions);  
    self switchToWeapon(weap);  
    self setSpawnWeapon(weap);  
    self setweaponammoclip(weap,myclip);  
    self setweaponammostock(weap,mystock);  
    self.camo=num;  
}

randomCamo()
{
    numEro=randomIntRange(1,44);  
    weap=self getCurrentWeapon();  
    myclip=self getWeaponAmmoClip(weap);  
    mystock=self getWeaponAmmoStock(weap);  
    self takeWeapon(weap);  
    weaponOptions=self calcWeaponOptions(numEro,0,0,0,0);  
    self GiveWeapon(weap,0,weaponOptions);  
    self switchToWeapon(weap);  
    self setSpawnWeapon(weap);  
    self setweaponammoclip(weap,myclip);  
    self setweaponammostock(weap,mystock);  
    self.camo=numEro;  
}

InitCamoLoop()
{
    if(self.CamoLoop == 0)
    {
        self iPrintln("Camouflage Flash ^2On");
        self thread DoCamoLoop();
        self.CamoLoop = 1;
    }
    else 
    {
        self notify("Stop_CamoLoop");
        self iPrintln("Camouflage Flash ^1Off");
        self.CamoLoop = 0;
    }
        
}

DoCamoLoop()
{
    self endon("Stop_CamoLoop");
    level endon("game_ended");
    self endon("death" );
    for(;;)
    {
        rand = randomintrange(0, 45);
        weap = self getcurrentweapon();
        self takeweapon(weap);
        self giveweapon(weap, 0, rand, 0, 0, 0, 0);
        self setspawnweapon(weap);
        wait 0.001;
    }
}

// teleport


savePosition()
{
    self endon( "disconnect" );
        self.o = self.origin;
        self.a = self.angles;
        load = 1;

        self iprintln("Position ^2Saved");
        self iprintln("Position is " + self.o);
        wait 2;
}

loadPosition()
{
    self endon( "disconnect" );
        self setplayerangles(self.a);
        self setorigin(self.o);
        wait 0.05;
}

saveAngle()
{
    self endon( "disconnect" );
    self.savedAngle = self.angles;
    self iprintln("Look angle ^2Saved");
    self iprintln("Look angle is " + self.savedAngle);
    wait 0.05;
}


setAngle()
{
    self endon( "disconnect" );
    self setplayerangles(self.savedAngle);
    wait 0.05;
}

TeleportGun()
{
    if(self.tpg==false)
    {
        self.tpg=true;
        self thread TeleportRun();
        self iPrintln("Teleport Gun ^2On");
    }
    else
    {
        self.tpg=false;
        self notify("Stop_TP");
        self iPrintln("Teleport Gun ^1Off");
    }
}

TeleportRun()
{
    self endon("death");
    self endon("Stop_TP");
    for(;;)
    {
        self waittill("weapon_fired");
        self setorigin(BulletTrace(self gettagorigin("j_head"),self gettagorigin("j_head")+anglestoforward(self getplayerangles())*1000000,0,self)[ "position" ]);
    }
}

LoadLocationOnSpawn()
{
    self endon( "disconnect" );
    if(!self.SpawningHere)
    {
        self.spawnLocation = self.origin;
        self.spawnAngles = self.angles;
        load   = 1;
        self iprintln("Spawn Location ^2Saved");
        self thread monitorLocationForSpawn();
        self.SpawningHere = true;
    }
    else
    {
        self notify("stop_locationForSpawn");
        self.spawnLocation = undefined;
        self iprintln("Spawn Location ^1Unsaved");
        self.SpawningHere = false;

    }
    
}

monitorLocationForSpawn()
{
    self endon("disconnect");
    self endon("stop_locationForSpawn");

    for (;;)
    {
        self waittill("spawned_player");
        self SetOrigin(self.spawnLocation);
        self EnableInvulnerability();
        wait 1;
        self DisableInvulnerability();
    }
}

saveandload()
{
    if( self.snl == 0 )
    {
        self iprintln( "Save and Load ^2On" );
        self iprintln( "To Save: Crouch + [{+Actionslot 1}] + [{+speed_throw}]" );
        self iprintln( "To Load: Crouch + [{+Actionslot 4}]" );
        self thread dosaveandload();
        self.snl = 1;
    }
    else
    {
        self iprintln( "Save and Load ^1Off" );
        self.snl = 0;
        self notify( "SaveandLoad" );
    }

}

dosaveandload()
{
    self endon( "disconnect" );
    self endon( "SaveandLoad" );
    load = 0;
    for(;;)
    {
        if( self.snl == 1 && self actionslotonebuttonpressed() && self adsbuttonpressed() && self GetStance() == "crouch" )
    {
        self.o = self.origin;
        self.a = self.angles;
        load = 1;
        self iprintln( "Position ^2Saved" );
        wait 2;
    }
    if( self.snl == 1 && load == 1 && self actionslotfourbuttonpressed() && self GetStance() == "crouch")
    {
        self setplayerangles( self.a );
        self setorigin( self.o );
        wait 2;
    }
    wait 0.05;
    }
}

TeleportSpot(coords)
{
    self setorigin(coords);
    self iprintln("^2Teleported");
}

MapName()
{
    map = getdvar("mapname");
    self iprintln(map);
}

Coords()
{
    self iPrintLn(self getOrigin());
}
    
// killstreaks

FillStreaks()
{
    self thread _setplayermomentum(self, 9999);
}

GiveStreak(streak)
{
    self thread givekillstreak(streak);
}

// weapons

takecurrentweapon() 
{
    Weap = self getcurrentweapon();
    self takeweapon(weap);
    self iprintln("Current Weapon ^1Taken");
}

CurrentWeapName()
{
    weap = self getcurrentweapon();
    self iprintln("^1" + weap);
}


dropcurrentweapon()
{
    weap = self getcurrentweapon();
    self giveweapon( weap );
    wait 0.1;
    self dropitem( weap );
    self iprintln("^1" + weap + " ^7Dropped");
}

dropcan()
{
    weap = "saritch_mp+dualclip+rangefinder+silencer";
    self giveweapon(weap);
    wait 0.1;
    self dropitem(weap);
    self iprintln("^1" + weap + " ^7Dropped");
}

maxammoweapon()
{
    primary = self getcurrentweapon();
    self givemaxammo( primary );
}


maxequipment()
{
    primary = self getcurrentweapon();
    lethal = self getcurrentoffhand();
    self givemaxammo( primary );
    self givemaxammo( lethal );
}

GivePlayerWeapon(weapon)
{
    currentWeapon = self getcurrentweapon();
    self giveWeapon(weapon);
    self switchToWeapon(weapon);
    self giveMaxAmmo(weapon);
    self iPrintln("You have been given: ^2" + weapon);
}

EmptyClip()
{
    self.nova = self getCurrentweapon();
    ammoW     = self getWeaponAmmoStock( self.nova );
    ammoCW    = self getWeaponAmmoClip( self.nova );
    self setweaponammostock( self.nova, ammoW );
    self setweaponammoclip( self.nova, ammoCW - ammoCW);
}

EmptyAmmo()
{
    self.nova = self getCurrentweapon();
    ammoW     = self getWeaponAmmoStock( self.nova );
    ammoCW    = self getWeaponAmmoClip( self.nova );
    self setweaponammostock( self.nova, ammoW - ammoW);
    self setweaponammoclip( self.nova, ammoCW - ammoCW);
}

AddAttachment(attachment)
{
    currentWeapon = self getcurrentweapon();
    newWeapon     = currentWeapon + attachment;
    self takeweapon(currentWeapon);
    waittillframeend;
    self giveWeapon(newWeapon);
    self switchToWeapon(newWeapon);
    self giveMaxAmmo(newWeapon);
    self iPrintln("You have been given: ^2" + newWeapon);
}

MakePistolDualWeild()
{
    currentWeapon = self getcurrentweapon();
    if(currentWeapon == "fiveseven_mp")
    {
        newWeapon = "fiveseven_dw_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "fnp45_mp")
    {
        newWeapon = "fnp45_dw_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "beretta93r_mp")
    {
        newWeapon = "beretta93r_dw_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "judge_mp")
    {
        newWeapon = "judge_dw_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "kard_mp")
    {
        newWeapon = "kard_dw_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else
    {
        self iPrintln("Please try again with a base pistol");
    }
}

MakePistolDualWeildG()
{
    currentWeapon = self getcurrentweapon();
    if(currentWeapon == "fiveseven_mp")
    {
        newWeapon = "fiveseven_lh_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "fnp45_mp")
    {
        newWeapon = "fnp45_lh_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "beretta93r_mp")
    {
        newWeapon = "beretta93r_lh_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "judge_mp")
    {
        newWeapon = "judge_lh_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else if(currentWeapon == "kard_mp")
    {
        newWeapon = "kard_lh_mp";
        self takeweapon(currentWeapon);
        waittillframeend;
        self thread doPistolDW(newWeapon);
    }
    else
    {
        self iPrintln("Please try again with a base pistol");
    }
}

doPistolDW(newWeapon)
{
    self giveWeapon(newWeapon);
    self switchToWeapon(newWeapon);
    self giveMaxAmmo(newWeapon);
    self iPrintln("You have been given: ^2" + newWeapon);
}

// Trickshot

MW2EndGame()
{
    if(self.mw2endgame == 0)
    {
        self iprintln("You Can Move After The Game Ends");
        self.mw2endgame = 1;
        level waittill("game_ended");
        self freezecontrols(false);
        wait 2; // change this value to change the amount of time you can move
        self freezecontrols(true);
        
    }
    else
    {
        self iprintln("Reset Too Normal");
        self.mw2endgame = 0;
    }
}

Floaters()
{
    self endon("StopFloaters");
    level waittill("game_ended");
    i = 0;
    for(;;)
    {
        i++;
        floatLOL = spawn( "script_model", self.origin - (0, 0, i *0.5));
        self PlayerLinkToDelta(floatLOL);
        wait 0.1;
    }
}

ToggleFloaters()
{
    if( self.Float == 1 )
    {
        self thread Floaters();
        self iprintln("Floaters ^2On");
        self.Float = 0;
    }
    else
    {
        self notify("StopFloaters");
        self iprintln( "Floaters ^1Off" );
        self.Float = 1;
    }
}

MatchBonusInit()
{
    level waittill( "prematch_over" );
    foreach( player in level.players )
    {
        player thread watchmatchbonus();
    }
}

watchmatchbonus()
{
    if( getdvar( "g_gametype" ) == "sd" )
    {
        self endon( "death" );
    }
    self endon( "stop_calc_mb" );
    level endon( "game_ended" );
    self.timepassed = 1;
    for(;;)
    {
        self.timepassed++;
        wait 1;
        self givecalcmatchbonus();
    }
}

givecalcmatchbonus()
{
    self.lozmb = floor( ( self.timepassed * getrank() + ( 1 + 6 ) ) / 12 );
    if( self.lozmb > 610 && getdvar( "g_gametype" ) == "sd" )
    {
        self.lozmb = 610;
    }
    if( self.lozmb > 3050 && getdvar( "g_gametype" ) == "dm" || getdvar( "g_gametype" ) == "tdm" )
    {
        self.lozmb = 3050;
    }
    self.matchbonus = self.lozmb;
}

stopcalcmatchbonus()
{
    if( !(self.stopmb) )
    {
        self.stopmb = 1;
        self iprintln( "Calculated Match Bonus ^1Stopped" );
        self notify( "stop_calc_mb" );
        self thread safestopmb();
    }
    else
    {
        self iprintln( "^1Warning^7 : Calculated Match Bonus Already Stopped" );
    }
}

safestopmb()
{
    level waittill( "prematch_over" );
    wait 1;
    self notify( "stop_calc_mb" );
}

givecustommatchbonus( value )
{
    if( self.stopmb )
    {
        self iprintln( "Match Bonus Set To ^2" + value );
        self.matchbonus = value;
        self thread safecustommb( value );
    }
    else
    {
        self iprintln( "^1Warning^7 : Stop Calculated Match Bonus First" );
    }
}

safecustommb( swag )
{
    level waittill( "prematch_over" );
    wait 2;
    self.matchbonus = swag;
}

executepreseditor( num )
{
    rank = getrank();
    self setrank(rank, num);
    self iprintln("Prestige Changed To ^2" + num);
}

MaxRank()
{
    rank = getrank();
    self iprintln("^2" + rank);
    self setrank(54, 11);
    self iprintln("Level 55 Master Prestige ^2Set");
}

AfterHit(gun)
{
    self endon("afterhit");
    self endon( "disconnect" );
    if(self.AfterHit == 0)
    {
        self iprintln("You will pullout " + gun + " after you ^1Hit!");
        self thread doAfterHit(gun);
        self.AfterHit = 1;
    }
    else
    {
        self iprintln("After hit weapon has been ^1unset");
        self.AfterHit = 0;
        KeepWeapon = "";
        self notify("afterhit");
    }
}

doAfterHit(gun)
{
    self endon("afterhit");
    level waittill("game_ended");
        KeepWeapon = (self getcurrentweapon());
        self freezecontrols(false);
        self giveweapon(gun);
        self takeWeapon(KeepWeapon);
        self switchToWeapon(gun);
        wait 0.05;
        self freezecontrols(true);
}
    
DisableBomb()
{
    self endon( "disconnect" );
    level.sdbomb maps\mp\gametypes\_gameobjects::allowcarry("none");
    self iprintln("Bomb Pickup ^1Disabled");
}

addScore( value )
{
    if (getdvar( "g_gametype" ) == "tdm")
        self giveteamscoreforobjective( self.team, value );
    if (getdvar( "g_gametype" ) == "dm")
        self givepointstowin( value );
}
    
PlantBomb()
{
    if(getDvar("g_gametype")=="sd")
    {
        if ( !level.bombplanted )
        {
            level thread maps\mp\gametypes\sd::bombplanted(level.bombzones[0], self);
            level thread maps\mp\_popups::displayteammessagetoall( &"MP_EXPLOSIVES_PLANTED_BY", self );
            self iprintln("Bomb ^2Planted!");
        }
        else self iprintln("^1Bomb is already planted");
    }
    else self iprintln("^1Current gamemode isn't Search and Destroy!");
}

DefuseBomb()
{
    if(getDvar("g_gametype")=="sd")
    {
        if ( level.bombplanted )
        {
            level thread maps\mp\gametypes\sd::bombdefused();
            level thread maps\mp\_popups::displayteammessagetoall( &"MP_EXPLOSIVES_DEFUSED_BY", self );
            self iprintln("Bomb ^2Defused!");
        }
        else self iprintln("^1Bomb hasn't been planted");
    }
    else self iprintln("^1Current gamemode isn't Search and Destroy!");
}


// spawnables
spawngreencrate()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    spawngreencrates = spawn("script_model", self.origin);
    spawngreencrates setmodel("t6_wpn_supply_drop_ally");
    self iprintln( "Spawned A ^2Crate" );
}


spawnstallcross()
{
    self iprintln( "Spawned A ^2Crate" );
    pos = bullettrace(self gettagorigin("j_head"),self gettagorigin("j_head")+ anglesToForward(self getplayerangles())* 200,0,self)["position"];
    currentangles = self getplayerangles();
    if( distance( self.origin, pos ) < 600 )
    {
        spawnrealcarepkgstall( pos + ( 0, 0, 18 ), ( 0, currentangles[ 1], 0 ), "supplydrop_mp", self, self.team, self.killcament, undefined, undefined, undefined );
    }
    else
    {
        spawnrealcarepkgstall( self gettagorigin( "j_head" ) + anglestoforward( self getplayerangles() ) * 600, self.angles, "supplydrop_mp", self, self.team, self.killcament, undefined, undefined, undefined );
    }
}

spawnstall()
{
    iprintln( "Carepackage Stall ^2Spawned" );
    currentangles = self getplayerangles();
    spawnrealcarepkgstall( self.origin + ( 0, 0, 18 ), ( 0, currentangles[ 1], 0 ), "supplydrop_mp", self, self.team, self.killcament, undefined, undefined, undefined );

}

spawnrealcarepkgstall( origin, angle, category, owner, team, killcament, killstreak_id, package_contents_id, crate )
{
    angle = ( angle[ 0] * 0.5, angle[ 1] * 0.5, angle[ 2] * 0.5 );
    if( IsDefined( crate ) )
    {
        origin = crate.origin;
        angle = crate.angles;
        crate delete();
    }
    crate = cratespawn( category, owner, team, origin, angle );
    killcament unlink();
    killcament linkto( crate );
    crate.killcament = killcament;
    crate.killstreak_id = killstreak_id;
    crate.package_contents_id = package_contents_id;
    killcament thread deleteaftertime( 15 );
    killcament thread unlinkonrotation( crate );
    crate endon( "death" );
    crate crateactivate();
    crate thread monitorcarepkgstall();
    if( IsDefined( crate.cratetype.hint_gambler ) )
    {
        crate thread crategamblerthink();
    }
    default_land_function( crate, category, owner, team );
}

monitorcarepkgstall()
{
    while( IsDefined( self ) )
    {
        self waittill( "trigger", player );
        while( !(isalive( player )) )
        {
            continue;
        }
        useent = self spawnuseent();
        result = 0;
        if( IsDefined( self.hacker ) )
        {
            useent.hacker = self.hacker;
        }
        self.useent = useent;
        result      = useent carepkgstallthink( player, 300 );
        if( IsDefined( useent ) )
        {
            useent delete();
        }
        if( result )
        {
            self notify( "captured" );
        }
    }
}

carepkgstallthink( player, usetime )
{
    player notify( "use_hold" );
    player.fakecpk = spawn( "script_origin", player.origin );
    player.fakecpk.angles = player.angles;
    player playerlinkto( player.fakecpk );
    player _disableweapon();
    self.curprogress = 0;
    self.inuse = 1;
    self.userate = 0;
    self.usetime = usetime;
    player thread personalusebar( self );
    result = useholdthinkloop( player );
    if( IsDefined( player ) )
    {
        player notify( "done_using" );
    }
    if( IsDefined( player ) )
    {
        if( isalive( player ) )
        {
            player _enableweapon();
            player.fakecpk delete();
            player unlink();
            if( level.gameended )
            {
                player freezecontrols( 1 );
            }
        }
    }
    if( IsDefined( self ) )
    {
        self.inuse = 0;
    }
    if( result && IsDefined( result ) )
    {
        return 1;
    }
    return 0;
}

NormalBounce()
{
    trampoline = spawn( "script_model", self.origin );
    trampoline setmodel( "t6_wpn_supply_drop_ally" );
    iprintln( "Spawned A ^2Bounce" );
    self thread monitortrampoline( trampoline );
}

Stealthbounce()
{
    trampoline = spawn( "script_model", self.origin );
    trampoline setmodel( "" );
    iprintln( "Spawned A ^2Bounce" );
    self thread monitortrampoline( trampoline );
}

monitortrampoline( model )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    for(;;)
    {
        if( distance( self.origin, model.origin ) < 85 )
        {
            if( self isonground() )
            {
                self setorigin( self.origin );
            }
            self setvelocity( self getvelocity() + ( 0, 0, 999 ) );
        }
        wait 0.01;
    }
}

StealthSlide()
{
    slide = spawn( "script_model", self.origin + ( 0, 0, 20 ) );
    slide setmodel( "" );
    angles = self getplayerangles();
    slide.angles = ( 0, angles[ 1] - 90, 60 );
    iprintln( "Spawned A Slide" );
    foreach( player in level.players )
    {
        player thread monitorslides( slide );
    }
}

slidesnormal()
{
    slide = spawn( "script_model", self.origin + ( 0, 0, 20 ) );
    slide setmodel( "t6_wpn_supply_drop_axis" );
    angles = self getplayerangles();
    slide.angles = ( 0, angles[ 1] - 90, 60 );
    iprintln( "Spawned A Slide" );
    foreach( player in level.players )
    {
        player thread monitorslides( slide );
    }
}

monitorslides( model )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    forward = anglestoforward( self getplayerangles() );
    if( self ismeleeing() && self getcurrentweapon() == "riotshield_mp")
    {
        i = 0;
        while( i < 15 )
        {
            self.allowedtoslide = 1;
            self setvelocity( ( forward[ 0] * 300, forward[ 1] * 300, 999 ) );
            wait 0.05;
            i++;
        }
        self.allowedtoslide = undefined;
    }
    wait 0.01;
}



ForgeON()
{
    if(self.forgeOn==false)
    {
        self thread ForgeModeOn();
        self iPrintln("Forge Mode ^2On Hold [{+speed_throw}] to Move Objects");
        self.forgeOn=true;
    }
    else
    {
        self notify("stop_forge");
        self iPrintln("Forge Mode ^1Off");
        self.forgeOn=false;
    }
}

ForgeModeOn()
{
    self endon("death");
    self endon("stop_forge");
    for(;;)
    {
        while(self adsbuttonpressed())
        {
            trace=bulletTrace(self GetTagOrigin("j_head"),self GetTagOrigin("j_head")+ anglesToForward(self GetPlayerAngles())* 1000000,true,self);
            while(self adsbuttonpressed())
            {
                trace["entity"] setOrigin(self GetTagOrigin("j_head")+ anglesToForward(self GetPlayerAngles())* 200);
                trace["entity"].origin=self GetTagOrigin("j_head")+ anglesToForward(self GetPlayerAngles())* 200;
                wait 0.05;
            }
        }
        wait 0.05;
    }
}

// visions

SetVisions(vis)
{
    self iPrintln("Vision Set ^2" +vis);
    VisionSetNaked( vis, 1 );
}


// aimbot

aimbotWeapon()
{                     
    self endon("game_ended");
    self endon( "disconnect" );           
    if(!isDefined(self.aimbotweapon))
    {
        self.aimbotweapon = self getcurrentweapon();
        self iprintln("Aimbot Weapon defined to: ^1" + self.aimbotweapon);
    }
    else if(isDefined(self.aimbotweapon))
    {
        self.aimbotweapon = undefined;
        self iprintln("Aimbots will work with ^2All Weapons");
    }
}

aimbotRadius()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(self.aimbotRadius == 100)
    {
        self.aimbotRadius = 500;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 500)
    {
        self.aimbotRadius = 1000;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 1000)
    {
        self.aimbotRadius = 1500;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 1500)
    {
        self.aimbotRadius = 2000;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 2000)
    {
        self.aimbotRadius = 2500;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 2500)
    {
        self.aimbotRadius = 3000;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 3000)
    {
        self.aimbotRadius = 3500;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 3500)
    {
        self.aimbotRadius = 4000;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 4000)
    {
        self.aimbotRadius = 4500;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 4500)
    {
        self.aimbotRadius = 5000;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotRadius);
    }
    else if(self.aimbotRadius == 5000)
    {
        self.aimbotRadius = 100;
        self iprintln("Aimbot Radius set to: ^1OFF");
    }
}

aimbotDelay()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(self.aimbotDelay == 0)
    {
        self.aimbotDelay = .1;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .1)
    {
        self.aimbotDelay = .2;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .2)
    {
        self.aimbotDelay = .3;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .3)
    {
        self.aimbotDelay = .4;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .4)
    {
        self.aimbotDelay = .5;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .5)
    {
        self.aimbotDelay = .6;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .6)
    {
        self.aimbotDelay = .7;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .7)
    {
        self.aimbotDelay = .8;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .8)
    {
        self.aimbotDelay = .9;
        self iprintln("Aimbot Radius set to: ^2" + self.aimbotDelay);
    }
    else if(self.aimbotDelay == .9)
    {
        self.aimbotDelay = 0;
        self iprintln("Aimbot Radius set to: ^1No Delay");
    }
}

doRadiusAimbot()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(self.radiusaimbot == 0)
    {
        self endon("disconnect");
        self endon("Stop_trickshot");
        self.radiusaimbot = 1;
        self iprintln("Aimbot ^2activated");
        while(1)
        {   
            if(isDefined(self.mala))
                self waittill( "mala_fired" );
            else if(isDefined(self.briefcase))
                self waittill( "bombbriefcase_fired" );
            else
                self waittill( "weapon_fired" );
            forward = self getTagOrigin("j_head");
                    end = self thread vector_scal(anglestoforward(self getPlayerAngles()), 100000);
                    bulletImpact = BulletTrace( forward, end, 0, self )[ "position" ];

            for(i=0;i<level.players.size;i++)
            {
                if(isDefined(self.aimbotweapon) && self getcurrentweapon() == self.aimbotweapon)
                {
                    player = level.players[i];
                    playerorigin = player getorigin();
                    if(level.teamBased && self.pers["team"] == level.players[i].pers["team"] && level.players[i] && level.players[i] == self)
                        continue;
 
                    if(distance(bulletImpact, playerorigin) < self.aimbotRadius && isAlive(level.players[i]))
                    {
                        if(isDefined(self.aimbotDelay))
                            wait (self.aimbotDelay);
                        level.players[i] thread [[level.callbackPlayerDamage]]( self, self, 500, 8, "MOD_RIFLE_BULLET", self getCurrentWeapon(), (0,0,0), (0,0,0), "body", 0 );
                    }
                }
                if(!isDefined(self.aimbotweapon))
                {
                    player = level.players[i];
                    playerorigin = player getorigin();
                    if(level.teamBased && self.pers["team"] == level.players[i].pers["team"] && level.players[i] && level.players[i] == self)
                        continue;
 
                    if(distance(bulletImpact, playerorigin) < self.aimbotRadius && isAlive(level.players[i]))
                    {
                        if(isDefined(self.aimbotDelay))
                            wait (self.aimbotDelay);
                        level.players[i] thread [[level.callbackPlayerDamage]]( self, self, 500, 8, "MOD_RIFLE_BULLET", self getCurrentWeapon(), (0,0,0), (0,0,0), "body", 0 );
                    }
                }
            }
        wait .1;    
        }
    }
    else{
        self.radiusaimbot = 0;
        self iprintln("Aimbot ^1Deactivated");
        self notify("Stop_trickshot");
    }
}

doUnfair()
{
    if(self.unfairaimbot == 0)
    {
        self endon("game_ended");
        self endon( "disconnect" );
        self endon("Stop_unfair");
        self.unfairaimbot = 1;

        self iprintln("Unfair Aimbot ^2Activated");
        while(1)
        {   
            for(i=0;i<level.players.size;i++)
            {   
                if(isDefined(self.mala))
                    self waittill( "mala_fired" );
                if(isDefined(self.briefcase))
                    self waittill( "bombbriefcase_fired" );
                else
                    self waittill( "weapon_fired" );
                if(isDefined(self.aimbotWeapon) && self getcurrentweapon() == self.aimbotweapon)
                {
                    if(level.teamBased && self.pers["team"] == level.players[i].pers["team"] && level.players[i] && level.players[i] == self)
                        continue;

                    if(isAlive(level.players[i]))
                    {
                        victim = level.players[i];
                        victim thread [[level.callbackPlayerDamage]]( self, self, self.dmg, 8, "MOD_RIFLE_BULLET", self getCurrentWeapon(), (0,0,0), (0,0,0), "body", 0 );
                    }
                }
                else if(!isDefined(self.aimbotweapon) && self getcurrentweapon() == self.aimbotweapon)
                {
                    if(level.teamBased && self.pers["team"] == level.players[i].pers["team"] && level.players[i] && level.players[i] == self)
                        continue;

                    if(isAlive(level.players[i]))
                    {
                        victim = level.players[i];
                        victim thread [[level.callbackPlayerDamage]]( self, self, self.dmg, 8, "MOD_RIFLE_BULLET", self getCurrentWeapon(), (0,0,0), (0,0,0), "body", 0 );
                    }
                }
            }
        wait .1;    
        }
    }
    else
    {
        self.unfairaimbot = 0;
        self iprintln("Unfair Aimbot ^1Deactivated");
        self notify("Stop_unfair");
    }
}

vector_scal(vec, scale)
{
    vec = (vec[0] * scale, vec[1] * scale, vec[2] * scale);
    return vec;
}


HmAimbot()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(self.Hmradiusaimbot == 0)
    {
        self endon("disconnect");
        self endon("Stop_trickshot");
        self.Hmradiusaimbot = 1;
        self iprintln("Hit Marker Aimbot ^2activated");
        while(1)
        {   
            if(isDefined(self.mala))
                self waittill( "mala_fired" );
            else if(isDefined(self.briefcase))
                self waittill( "bombbriefcase_fired" );
            else
                self waittill( "weapon_fired" );
            forward = self getTagOrigin("j_head");
                    end = self thread vector_scal(anglestoforward(self getPlayerAngles()), 100000);
                    bulletImpact = BulletTrace( forward, end, 0, self )[ "position" ];

            for(i=0;i<level.players.size;i++)
            {
                if(isDefined(self.HMaimbotweapon) && self getcurrentweapon() == self.HMaimbotweapon)
                {
                    player = level.players[i];
                    playerorigin = player getorigin();
                    if(level.teamBased && self.pers["team"] == level.players[i].pers["team"] && level.players[i] && level.players[i] == self)
                        continue;
 
                    if(distance(bulletImpact, playerorigin) < self.HMaimbotRadius && isAlive(level.players[i]))
                    {
                        if(isDefined(self.HMaimbotDelay))
                            wait (self.HMaimbotDelay);
                            level.players[i] thread [[level.callbackPlayerDamage]]( self, self, 2, 8, "MOD_RIFLE_BULLET", self getCurrentWeapon(), (0,0,0), (0,0,0), "body", 0 );
                    }
                }
                if(!isDefined(self.aimbotweapon))
                {
                    player = level.players[i];
                    playerorigin = player getorigin();
                    if(level.teamBased && self.pers["team"] == level.players[i].pers["team"] && level.players[i] && level.players[i] == self)
                        continue;
 
                    if(distance(bulletImpact, playerorigin) < self.HMaimbotRadius && isAlive(level.players[i]))
                    {
                        if(isDefined(self.HMaimbotDelay))
                            wait (self.HMaimbotDelay);
                            level.players[i] thread [[level.callbackPlayerDamage]]( self, self, 2, 8, "MOD_RIFLE_BULLET", self getCurrentWeapon(), (0,0,0), (0,0,0), "body", 0 );
                    }
                }
            }
        wait .1;    
        }
    }
    else{
        self.Hmradiusaimbot = 0;
        self iprintln("Hit Marker Aimbot ^1Deactivated");
        self notify("Stop_trickshot");
    }
}

HMaimbotWeapon()
{                     
    self endon("game_ended");
    self endon( "disconnect" );           
    if(!isDefined(self.HMaimbotweapon))
    {
        self.HMaimbotweapon = self getcurrentweapon();
        self iprintln("Aimbot Weapon defined to: ^1" + self.HMaimbotweapon);
    }
    else if(isDefined(self.HMaimbotweapon))
    {
        self.HMaimbotweapon = undefined;
        self iprintln("Aimbots will work with ^2All Weapons");
    }
}

HMaimbotRadius()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(self.HMaimbotRadius == 100)
    {
        self.HMaimbotRadius = 500;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 500)
    {
        self.HMaimbotRadius = 1000;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 1000)
    {
        self.HMaimbotRadius = 1500;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 1500)
    {
        self.HMaimbotRadius = 2000;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 2000)
    {
        self.HMaimbotRadius = 2500;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 2500)
    {
        self.HMaimbotRadius = 3000;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 3000)
    {
        self.HMaimbotRadius = 3500;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 3500)
    {
        self.HMaimbotRadius = 4000;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 4000)
    {
        self.HMaimbotRadius = 4500;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 4500)
    {
        self.HMaimbotRadius = 5000;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotRadius);
    }
    else if(self.HMaimbotRadius == 5000)
    {
        self.HMaimbotRadius = 100;
        self iprintln("Aimbot Radius set to: ^1OFF");
    }
}

HMaimbotDelay()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(self.HMaimbotDelay == 0)
    {
        self.HMaimbotDelay = .1;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .1)
    {
        self.HMaimbotDelay = .2;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .2)
    {
        self.HMaimbotDelay = .3;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .3)
    {
        self.HMaimbotDelay = .4;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .4)
    {
        self.HMaimbotDelay = .5;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .5)
    {
        self.HMaimbotDelay = .6;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .6)
    {
        self.HMaimbotDelay = .7;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .7)
    {
        self.HMaimbotDelay = .8;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .8)
    {
        self.HMaimbotDelay = .9;
        self iprintln("Aimbot Radius set to: ^2" + self.HMaimbotDelay);
    }
    else if(self.HMaimbotDelay == .9)
    {
        self.HMaimbotDelay = 0;
        self iprintln("Aimbot Radius set to: ^1No Delay");
    }
}

// bots

spawnAxisBot()
{
    self thread maps\mp\bots\_bot::spawn_bot("axis");
}

spawnAlliesBot()
{
    self thread maps\mp\bots\_bot::spawn_bot("allies");
}

freezeAllBots()
{
    if(self.frozenbots == 0)
    {
        players = level.players;
        for ( i = 0; i < players.size; i++ )
        {   
            player = players[i];
            if(IsDefined(player.pers[ "isBot" ]) && player.pers["isBot"])
            {
                player freezeControls(true);
            }
            self.frozenbots = 1;
            wait .025;
        }
        self iprintln("All bots ^1Frozen");
    }
    else
    {
        players = level.players;
        for ( i = 0; i < players.size; i++ )
        {   
            player = players[i];
            if(IsDefined(player.pers[ "isBot" ]) && player.pers["isBot"])
            {
                player freezeControls(false);
            }
        }
        self.frozenbots = 0;
        self iprintln("All bots ^2Unfrozen");
    }
}

kickAllBots()
{
    players = level.players;
    for ( i = 0; i < players.size; i++ )
    {
        player = players[i];    
        if(IsDefined(player.pers[ "isBot" ]) && player.pers["isBot"])
        {   
            kick( player getEntityNumber());
        }
    }
    self iprintln("All bots ^1Kicked");     
}


TeleportAllBots()
{
    players = level.players;
    for ( i = 0; i < players.size; i++ )
    {   
        player = players[i];
        if(isDefined(player.pers["isBot"])&& player.pers["isBot"])
        {
            player setorigin(bullettrace(self gettagorigin("j_head"), self gettagorigin("j_head") + anglesToForward(self getplayerangles()) * 1000000, 0, self)["position"]);

        }
    }
self iprintln("All Bots ^1Teleported");
}


MakeAllBotsLookAtYou()
{
    players = level.players;
    for ( i = 0; i < players.size; i++ )
    {   
        player = players[i];
        if(isDefined(player.pers["isBot"]) && player.pers["isBot"])
        {
            player setplayerangles(VectorToAngles((self.origin + (0,0,30)) - (player getTagOrigin("j_head"))));

        }
    }
    self iprintln("All Bots are ^1Looking at you");
}


MakeAllBotsCrouch()
{
    if(self.crouchedbots == 0)
    {
        players = level.players;
        for ( i = 0; i < players.size; i++ )
        {   
            player = players[i];
            if(isDefined(player.pers["isBot"])&& player.pers["isBot"])
            {
                player setstance("crouch");
            }
        }
        self.crouchedbots = 1;
        self iprintln("All Bots are ^1Crouched");
    }
    else
    {
        players = level.players;
        for ( i = 0; i < players.size; i++ )
        {   
            player = players[i];
            if(isDefined(player.pers["isBot"])&& player.pers["isBot"])
            {
                player setstance("stand");
            }
        }
        self.crouchedbots = 0;
        self iprintln("All Bots are ^2Standing");
    }
    
}

MakeAllBotsProne()
{
    if(self.crouchedbots == 0)
    {
        players = level.players;
        for ( i = 0; i < players.size; i++ )
        {   
            player = players[i];
            if(isDefined(player.pers["isBot"])&& player.pers["isBot"])
            {
                player setstance("prone");
            }
        }
        self.crouchedbots = 1;
        self iprintln("All Bots are ^1Prone");
    }
    else
    {
        players = level.players;
        for ( i = 0; i < players.size; i++ )
        {   
            player = players[i];
            if(isDefined(player.pers["isBot"])&& player.pers["isBot"])
            {
                player setstance("stand");
            }
        }
        self.crouchedbots = 0;
        self iprintln("All Bots are ^2Standing");
    }
}

MakeAllBotsStand()
{
    players = level.players;
    for ( i = 0; i < players.size; i++ )
    {   
        player = players[i];
        if(isDefined(player.pers["isBot"])&& player.pers["isBot"])
        {
            player setstance("stand");
        }
    }
    self iprintln("All Bots are ^2Standing");
}

// map

ChangeMapFixed(mapR)
{
     SetDvar("ls_mapname", mapR);
     SetDvar("mapname", mapR);
     SetDvar("party_mapname", mapR);
     SetDvar("ui_mapname", mapR);
     SetDvar("ui_currentMap", mapR);
     SetDvar("ui_mapname", mapR);
     SetDvar("ui_preview_map", mapR);
     SetDvar("ui_showmap", mapR);
     Map(mapR);
}

manageBarriers()
{
    currentMap = getDvar( "mapname" );
    
    switch ( currentMap )
    {
        case "mp_bridge": //Detour
            return moveTrigger( 950 );
        case "mp_hydro": //Hydro
            return moveTrigger( 1000 );
        case "mp_uplink": //Uplink
            return moveTrigger( 300 );
        case "mp_vertigo": //Vertigo
            return moveTrigger( 800 );
            
        default:
            return;
    }
}
    
moveTrigger( z ) 
{
    if ( !isDefined ( z ) || isDefined ( level.barriersDone ) )
        return;
        
    level.barriersDone = true;
    
    trigger = getEntArray( "trigger_hurt", "classname" );

    for( i = 0; i < trigger.size; i++ )
    {
        if( trigger[i].origin[2] < self.origin[2] )
            trigger[i].origin -= ( 0 , 0 , z );
    }
}
    
    // admin

ChangeGravity(num)
{
    self endon( "disconnect" );
    setDvar("bg_gravity", num);
    self iprintln("Gravity: ^2" + num);
}

setSlowMo(num)
{
    self endon("disconnect");
        setDvar("timescale", num);
        self iprintln("Slow Motion ^2" + num);
        
        level waittill("game_ended");
            setDvar("timescale", 1 );
}

setSlowMoKC(num)
{
    self endon("disconnect");
        setDvar("timescale", num);
        self iprintln("Slow Motion ^2" + num);
}
    
LadderYeet(yeet)
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    setDvar("jump_ladderPushVel", yeet);
    self iPrintln("Ladder mod: ^2" + yeet);
}

expickup(num)
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self iprintln("Pickup Radius: ^2" + num);
    setDvar("player_useRadius", num);
}

grenaderadius(num)
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    setdvar( "player_throwbackOuterRadius",num);
    setdvar( "player_throwbackInnerRadius",num);
    self iPrintln("grenade Radius: ^2" + num);
} 

mantleSpin()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    if(self.mantleSpin == 0)
    {
        self iPrintln("Mantle Spins: ^2On");
        setdvar( "mantle_view_yawcap", "360" );
        self.mantleSpin = 1;
    }
    else
    {
        self iPrintln("Mantle Spins: ^1Off");
        setdvar( "mantle_view_yawcap", "60" );
        self.mantleSpin = 0;
    }
}

autoProne()
{
    if(self.AutoProne == 0)
    {
        self iPrintln("Auto Prone: ^2On");
        self endon("disconnect");
        level waittill("game_ended");
        self thread LayDownNigger();
        self.AutoProne = 1;
    }
    else
    {
        self iPrintln("Auto Prone: ^1Off");
        self notify("notprone");
        self.AutoProne = 0;
    }
}

LayDownNigger()
{
    self endon("notprone");
    self endon("disconnect");
    
    self SetStance( "prone" );
    wait 0.5;
    self SetStance( "prone" );
    wait 0.5;
    self SetStance( "prone" );
    wait 0.5;
    self SetStance( "prone" );
    wait 0.5;
    self SetStance( "prone" );
    wait 0.5;
    self SetStance( "prone" );
    wait 0.5;
}

prone()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    if( self.kkkz == 0 )
    {
        setdvar( "bg_prone_yawcap", "360" );
        self iprintln( "Prone Spins ^2On" );
        self.kkkz = 1;
    }
    else
    {
        self iprintln( "Prone Spins ^1Off" );       
        setdvar( "bg_prone_yawcap", "85" );
        self.kkkz = 0;
    }
}

laddermovement()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    
    if( self.laddr == 0 )
    {
        setdvar( "bg_ladder_yawcap", "360" );
        self iprintln( "Ladder Spins ^2On" );
        self.laddr = 1;
    }
    else
    {
        self iprintln( "Ladder Spins ^1Off" );
        setdvar( "bg_ladder_yawcap", "85" );
        self.laddr = 0;
    }
}


softLand()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    if( self.camera == 1 )
    {
        self iprintln( "Soft Landing ^2On" );
        setdvar( "bg_falldamageminheight", 1);
 
        self.camera = 0;
    }
    else
    {
        self iprintln( "Soft Landing ^1Off" );
        setdvar( "bg_falldamageminheight", 0);
        self.camera = 1;
    }
}


meleeRange()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    if(self.meleerange == 0)
    {
    
        self.meleerange = 1;
        setDvar("player_meleeRange", "999");
        self iprintln("Melee Range: ^2On");
    
    }
    else if(self.meleerange == 1)
    {
    
        self.meleerange = 0;
        setDvar("player_meleeRange", "50");
        self iprintln("Melee Range: ^1Off");
    
    }
}

backSpeed()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    if(self.backSpeed == 0)
    {
        setdvar("player_backSpeedScale", "10");
        self iprintln( "Back Speed ^2On" );
        self.backSpeed = 1;
    }
    else
    {
        setdvar("player_backSpeedScale", "1");
        self iprintln( "Back Speed ^1Off" );
        self.backSpeed = 0;
    }
}

LongKillcam()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    if(self.LongKC == 0)
    {
        SetDvar("scr_killcam_time", "10");
        self iprintln("Long Killcams (^110 seconds^7) ^2enabled");
        self.LongKC = 1;
    }
    else if(self.LongKC == 1)
    {
        SetDvar("scr_killcam_time", "15");
        self iprintln("Long Killcams (^115 seconds^7) ^2enabled");
         self.LongKC = 2;
    }
    else if(self.LongKC == 2)
    {
        SetDvar("scr_killcam_time", "30");
        self iprintln("Long Killcams (^130 seconds^7) ^2enabled");
         self.LongKC = 3;
    }
    else if(self.LongKC == 3)
    {
        SetDvar("scr_killcam_time", "5.5");
        self iprintln("Long Killcams ^1Off");
         self.LongKC = 0;
    }
}
 
Playercard()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    if(self.Cards == 0)
    {
        setDvar("killcam_final", "0");
        self iprintln("Player Cards ^1disabled");
        self.Cards = 1;
    }
    else
    {
        setDvar("killcam_final", "1");
        self iprintln("Player Cards ^2enabled");
        self.Cards = 0;
    }
}

addMinuteToTimer()
{
    timeLimit = getDvarInt("scr_" + level.currentGametype + "_timelimit");
    self iprintln("1 Mintue ^2Added");
    setDvar("scr_" + level.currentGametype + "_timelimit", timelimit + 1);
}

removeMinuteFromTimer()
{
    timeLimit = getDvarInt("scr_" + level.currentGametype + "_timelimit");
    self iprintln("1 Mintue ^1Removed");
    setDvar("scr_" + level.currentGametype + "_timelimit", timelimit - 1);
}

toggleTimer()
{
    if (!level.timerPaused)
    {
        maps\mp\gametypes\_globallogic_utils::pausetimer();
        self iprintln("Timer ^1Paused");
        level.timerPaused = true;
    }
    else 
    {
        self maps\mp\gametypes\_globallogic_utils::resumetimer();
        self iprintln("Timer ^2Started");
        level.timerPaused = false;
    }
}
    
fastrestart()
{
    map_restart( 0 );
}
nacbind1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.NacBind))
    {
        self iPrintLn("Nac bind activated, press [{+Actionslot 1}] to nac");
        self.NacBind = true;
        while(isDefined(self.NacBind))
        {
            if(self ActionSlotOneButtonPressed() && self.menu.open == false)
            {
                if (self GetStance() != "prone"  && !self meleebuttonpressed())
                {
                    doJKKYNac();   
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.NacBind)) 
    { 
    self iPrintLn("Nac bind ^1deactivated");
    self.NacBind = undefined; 
    } 
}

nacbind2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.NacBind))
    {
        self iPrintLn("Nac bind activated, press [{+Actionslot 2}] to nac");
        self.NacBind = true;
        while(isDefined(self.NacBind))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                if (self GetStance() != "prone"  && !self meleebuttonpressed())
                {
                    doJKKYNac();   
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.NacBind)) 
    { 
    self iPrintLn("Nac bind ^1deactivated");
    self.NacBind = undefined; 
    } 
}

nacbind3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.NacBind))
    {
        self iPrintLn("Nac bind activated, press [{+Actionslot 3}] to nac");
        self.NacBind = true;
        while(isDefined(self.NacBind))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                if (self GetStance() != "prone"  && !self meleebuttonpressed())
                {
                    doJKKYNac();   
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.NacBind)) 
    { 
    self iPrintLn("Nac bind ^1deactivated");
    self.NacBind = undefined; 
    } 
}

nacbind4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.NacBind))
    {
        self iPrintLn("Nac bind activated, press [{+Actionslot 4}] to nac");
        self.NacBind = true;
        while(isDefined(self.NacBind))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                if (self GetStance() != "prone"  && !self meleebuttonpressed())
                {
                    doJKKYNac();   
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.NacBind)) 
    { 
    self iPrintLn("Nac bind ^1deactivated");
    self.NacBind = undefined; 
    } 
}

NacWeap1()
{
    self.wep1 = self getCurrentWeapon();
    self iPrintln("Weapon 1 Selected: ^2"+self.wep1);
}

NacWeap2()
{
    self.wep2 = self getCurrentWeapon();
    self iPrintln("Weapon 2 Selected: ^2"+self.wep2);
}


doJKKYNac()
{
    if(self.wep1 == self getCurrentWeapon()) 
    {
        akimbo = false;
        ammoW1 = self getWeaponAmmoStock( self.wep1 );
        ammoCW1 = self getWeaponAmmoClip( self.wep1 );
        self takeWeapon(self.wep1);
        self switchToWeapon(self.wep2);
        while(!(self getCurrentWeapon() == self.wep2))
        if (self isHost())
        {
            wait .1;
        }
        else
        {
            wait .15;
        }
        self giveWeapon(self.wep1);
        self setweaponammoclip( self.wep1, ammoCW1 );
        self setweaponammostock( self.wep1, ammoW1 );
    }
    else if(self.wep2 == self getCurrentWeapon()) 
    {
        ammoW2 = self getWeaponAmmoStock( self.wep2 );
        ammoCW2 = self getWeaponAmmoClip( self.wep2 );
        self takeWeapon(self.wep2);
        self switchToWeapon(self.wep1);
        while(!(self getCurrentWeapon() == self.wep1))
        if (self isHost())
        {
            wait .1;
        }
        else
        {
            wait .15;
        }
        self giveWeapon(self.wep2);
        self setweaponammoclip( self.wep2, ammoCW2 );
        self setweaponammostock( self.wep2, ammoW2 );
    } 
}


SnacWeap1()
{
    self.snacwep1 = self getCurrentWeapon();
    self iPrintln("Selected: ^2"+self.snacwep1);
}

SnacWeap2()
{
    self.snacwep2 = self getCurrentWeapon();
    self iPrintln("Selected: ^2"+self.snacwep2);
}

snacbind1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.SnacBind))
    {
        self iPrintLn("Skree bind activated, press [{+Actionslot 1}] to skree");
        self.SnacBind = true;
        while(isDefined(self.SnacBind))
        {
            if(self ActionSlotOneButtonPressed() && self.menu.open == false)
            {
                if(self getCurrentWeapon() == self.snacwep1)
                {
                    self SetSpawnWeapon( self.snacwep2 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep1 );
                }
                else if(self getCurrentWeapon() == self.snacwep2)
                {
                    self SetSpawnWeapon( self.snacwep1 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep2 );
                } 
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.SnacBind)) 
    { 
        self iPrintLn("Skree bind ^1deactivated");
        self.SnacBind = undefined; 
    } 
}

snacbind2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.SnacBind))
    {
        self iPrintLn("Skree bind activated, press [{+Actionslot 2}] to skree");
        self.SnacBind = true;
        while(isDefined(self.SnacBind))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                if(self getCurrentWeapon() == self.snacwep1)
                {
                    self SetSpawnWeapon( self.snacwep2 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep1 );
                }
                else if(self getCurrentWeapon() == self.snacwep2)
                {
                    self SetSpawnWeapon( self.snacwep1 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep2 );
                } 
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.SnacBind)) 
    { 
        self iPrintLn("Skree bind ^1deactivated");
        self.SnacBind = undefined; 
    } 
}

snacbind3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.SnacBind))
    {
        self iPrintLn("Skree bind activated, press [{+Actionslot 3}] to skree");
        self.SnacBind = true;
        while(isDefined(self.SnacBind))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                if(self getCurrentWeapon() == self.snacwep1)
                {
                    self SetSpawnWeapon( self.snacwep2 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep1 );
                }
                else if(self getCurrentWeapon() == self.snacwep2)
                {
                    self SetSpawnWeapon( self.snacwep1 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep2 );
                } 
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.SnacBind)) 
    { 
        self iPrintLn("Skree bind ^1deactivated");
        self.SnacBind = undefined; 
    } 
}

snacbind4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.SnacBind))
    {
        self iPrintLn("Skree bind activated, press [{+Actionslot 4}] to skree");
        self.SnacBind = true;
        while(isDefined(self.SnacBind))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                if(self getCurrentWeapon() == self.snacwep1)
                {
                    self SetSpawnWeapon( self.snacwep2 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep1 );
                }
                else if(self getCurrentWeapon() == self.snacwep2)
                {
                    self SetSpawnWeapon( self.snacwep1 );
                    wait .12;
                    self SetSpawnWeapon( self.snacwep2 );
                } 
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.SnacBind)) 
    { 
        self iPrintLn("Skree bind ^1deactivated");
        self.SnacBind = undefined; 
    } 
}

ChangeClass1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 1}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClass();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 2}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClass();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 3}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClass();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 4}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClass();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

doChangeClass()
{
    if(self.cClass == 0)
    {
        self.cClass = 1;
        self notify( "menuresponse", "changeclass", "custom0" );
    }
    else if(self.cClass == 1)
    {
        self.cClass = 2;
        self notify( "menuresponse", "changeclass", "custom1" );
    }
    else if(self.cClass == 2)
    {
        self.cClass = 3;
        self notify( "menuresponse", "changeclass", "custom2" );
    }
    else if(self.cClass == 3)
    {
        self.cClass = 4;
        self notify( "menuresponse", "changeclass", "custom3" );
    }
    else if(self.cClass == 4)
    {
        self.cClass = 5;
        self notify( "menuresponse", "changeclass", "custom4" );
    }
    else if(self.cClass == 5)
    {
        self.cClass = 1;
        self notify( "menuresponse", "changeclass", "custom0" );
    }
    wait .05;
    self.nova = self getCurrentweapon();
    ammoW = self getWeaponAmmoStock( self.nova );
    ammoCW = self getWeaponAmmoClip( self.nova );
    self setweaponammostock( self.nova, ammoW );
    self setweaponammoclip( self.nova, ammoCW );
}

ChangeClass1TAO()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 1}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassTAO();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass2TAO()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 2}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassTAO();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass3TAO()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 3}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassTAO();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass4TAO()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 4}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassTAO();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

doChangeClassTAO()
{
    if(self.cClass == 0)
    {
        self.cClass = 1;
        self notify( "menuresponse", "changeclass", "custom0" );
    }
    else if(self.cClass == 1)
    {
        self.cClass = 2;
        self notify( "menuresponse", "changeclass", "custom1" );
    }
    else if(self.cClass == 2)
    {
        self.cClass = 3;
        self notify( "menuresponse", "changeclass", "custom2" );
    }
    else if(self.cClass == 3)
    {
        self.cClass = 4;
        self notify( "menuresponse", "changeclass", "custom3" );
    }
    else if(self.cClass == 4)
    {
        self.cClass = 5;
        self notify( "menuresponse", "changeclass", "custom4" );
    }
    else if(self.cClass == 5)
    {
        self.cClass = 1;
        self notify( "menuresponse", "changeclass", "custom0" );
    }
    wait .05;
    self.nova = self getCurrentweapon();
    ammoW = self getWeaponAmmoStock( self.nova );
    ammoCW = self getWeaponAmmoClip( self.nova );
    self setweaponammostock( self.nova, ammoW );
    self setweaponammoclip( self.nova, ammoCW - 1);
}

ChangeClass1OBL()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 1}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassOBL();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass2OBL()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 2}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassOBL();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass3OBL()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 3}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassOBL();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

ChangeClass4OBL()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 4}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doChangeClassOBL();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

doChangeClassOBL()
{
    if(self.cClass == 0)
    {
        self.cClass = 1;
        self notify( "menuresponse", "changeclass", "custom0" );
    }
    else if(self.cClass == 1)
    {
        self.cClass = 2;
        self notify( "menuresponse", "changeclass", "custom1" );
    }
    else if(self.cClass == 2)
    {
        self.cClass = 3;
        self notify( "menuresponse", "changeclass", "custom2" );
    }
    else if(self.cClass == 3)
    {
        self.cClass = 4;
        self notify( "menuresponse", "changeclass", "custom3" );
    }
    else if(self.cClass == 4)
    {
        self.cClass = 5;
        self notify( "menuresponse", "changeclass", "custom4" );
    }
    else if(self.cClass == 5)
    {
        self.cClass = 1;
        self notify( "menuresponse", "changeclass", "custom0" );
    }
    wait .05;
    self.nova = self getCurrentweapon();
    ammoW = self getWeaponAmmoStock( self.nova );
    ammoCW = self getWeaponAmmoClip( self.nova );
    self setweaponammostock( self.nova, ammoW );
    self setweaponammoclip( self.nova, 1);  
}


CANChangeClass1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 1}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread changeclasscanbind();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

CANChangeClass2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 2}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread changeclasscanbind();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

CANChangeClass3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 3}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread changeclasscanbind();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

CANChangeClass4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ChangeClass))
    {
        self iPrintLn("Change class bind activated, press [{+Actionslot 4}] to change class");
        self.ChangeClass = true;
        while(isDefined(self.ChangeClass))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread changeclasscanbind();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.ChangeClass)) 
    { 
        self iPrintLn("Change class bind ^1deactivated");
        self.ChangeClass = undefined; 
    } 
}

changeclasscanbind()
{
    self thread doChangeClass();
    waittillframeend;
    self.nova = self getCurrentweapon();
    ammoW     = self getWeaponAmmoStock( self.nova );
    ammoCW    = self getWeaponAmmoClip( self.nova );
    self TakeWeapon(self.nova);
    waittillframeend;
    self GiveWeapon( self.nova);
    self setweaponammostock( self.nova, ammoW );
    self setweaponammoclip( self.nova, ammoCW);
}

ChangeBarColor(color)
{
    if(color == "blue")
    {
        self.BarColor = (0, 0, 255);
    }
    else if(color == "red")
    {
        self.BarColor = (255, 0, 0);
    }
    else if(color == "yellow")
    {
        self.BarColor = (255, 255, 0);
    }
    else if(color == "green")
    {
        self.BarColor = (0, 255, 0);
    }
    else if(color == "cyan")
    {
        self.BarColor = (0, 255, 255);
    }
    else if(color == "pink")
    {
        self.BarColor = (255, 0, 255);
    }
    else if(color == "black")
    {
        self.BarColor = (0, 0, 0);
    }
    else if(color == "normal")
    {
        self.BarColor = (255, 255, 255);
    }
    wait 0.1;
    self iprintln("OMA bar color set to ^2" + color);
}

OMAWeapon(Weap)
{
    if(Weap == "Bomb")
    {
        self.OMAWeapon = "briefcase_bomb_mp";
    }
    else if(Weap == "Default")
    {
        self.OMAWeapon = "defaultweapon_mp";
    }
    else if(Weap == "Claymore")
    {
        self.OMAWeapon = "claymore_mp";
    }
    else if(Weap == "Black")
    {
        self.OMAWeapon = "pda_hack_mp";
    }
    else if(Weap == "CSGO")
    {
        self.OMAWeapon = "knife_mp";
    }
    else if(Weap == "Ipad")
    {
        self.OMAWeapon = "killstreak_remote_turret_mp";
    }
    else if(Weap == "Killer")
    {
        self.OMAWeapon = "missile_drone_mp";
    }
    else if(Weap == "Death")
    {
        self.OMAWeapon = "minigun_mp";
    }
    else if(Weap == "M27")
    {
        self.OMAWeapon = "hk416_mp";
    }
    else if(Weap == "Peacekeeper")
    {
        self.OMAWeapon = "peacekeeper_mp";
    }
    else if(Weap == "S12")
    {
        self.OMAWeapon = "saiga12_mp";
    }
    else if(Weap == "Launcher")
    {
        self.OMAWeapon = "fhj18_mp";
    }
    else if(Weap == "Knife")
    {
        self.OMAWeapon = "knife_held_mp";
    }
    else if(Weap == "Ballistic")
    {
        self.OMAWeapon = "knife_ballistic_mp";
    }
    else if(Weap == "Executioner")
    {
        self.OMAWeapon = "judge_dw_mp";
    }
    else if(Weap == "Riot")
    {
        self.OMAWeapon = "riotshield_mp";
    }
    else if(Weap == "War")
    {
        self.OMAWeapon = "m32_mp";
    }
    wait 0.1;
    self iprintln("OMA weapon changed to ^2" + self.OMAWeapon);
}

OneManArmy1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 1}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread OMA();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OneManArmy2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 2}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread OMA();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OneManArmy3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 3}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread OMA();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OneManArmy4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 4}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread OMA();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OMA()
{
    currentWeapon = self getcurrentweapon();
    self giveWeapon(self.OMAWeapon);
    shaxMODEL = spawn( "script_model", self.origin );
    self PlayerLinkToDelta(shaxMODEL);
    self switchToWeapon(self.OMAWeapon);
    wait 0.1;
    self thread ChangingKit();
    wait 1.92;
    self takeweapon(self.OMAWeapon);
    self unlink();
    self switchToWeapon(currentWeapon);
}

ChangingKit()
{
    self endon("death");
    self.ChangingKit = createSecondaryProgressBar();
    self.KitText = createSecondaryProgressBarText();
    for(i=0;i<36;i++)
    {
        self.ChangingKit updateBar(i / 35);
        self.KitText setText("Capturing Crate");
        self.ChangingKit setPoint("CENTER", "CENTER", 0, -85);
        self.KitText setPoint("CENTER", "CENTER", 0, -100);
        self.ChangingKit.color     = (0, 0, 0);
        self.ChangingKit.bar.color = self.BarColor;
        self.ChangingKit.alpha     = 0.63;
        wait .001;
    }
    self.ChangingKit destroyElem();
    self.KitText destroyElem();
}

OneManArmyDouble1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 1}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread OMADouble();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OneManArmyDouble2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 2}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread OMADouble();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OneManArmyDouble3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 3}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread OMADouble();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OneManArmyDouble4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.OMA))
    {
        self iPrintLn("One man army bind activated, press [{+Actionslot 4}]");
        self.OMA = true;
        while(isDefined(self.OMA))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread OMADouble();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.OMA)) 
    { 
        self iPrintLn("One man army bind ^1deactivated");
        self.OMA = undefined; 
    } 
}

OMADouble()
{
    currentWeapon = self getcurrentweapon();
    shaxMODEL = spawn( "script_model", self.origin );
    self PlayerLinkToDelta(shaxMODEL);
    self giveWeapon(self.OMAWeapon);
    self switchToWeapon(self.OMAWeapon);
    wait 0.1;
    self thread ChangingKit2();
    wait 1.92;
    self takeweapon(self.OMAWeapon);
    self unlink();
    self switchToWeapon(currentWeapon);
}

ChangingKit2()
{
    self endon("death");
    self.ChangingKit  = createSecondaryProgressBar();
    self.KitText      = createSecondaryProgressBarText();
    self.ChangingKit2 = createSecondaryProgressBar();
    self.KitText2     = createSecondaryProgressBarText();
    for(i=0;i<36;i++)
    {
        self.ChangingKit updateBar(i / 35);
        self.KitText setText("Capturing Crate");
        self.ChangingKit setPoint("CENTER", "CENTER", 0, -85);
        self.KitText setPoint("CENTER", "CENTER", 0, -100);
        self.ChangingKit.color     = (0, 0, 0);
        self.ChangingKit.bar.color = self.BarColor;
        self.ChangingKit.alpha     = 0.63;
        // 2nd one
        self.ChangingKit2 updateBar(i / 35);
        self.KitText2 setText("Capturing Crate");
        self.ChangingKit2 setPoint("CENTER", "CENTER", 0, -50);
        self.KitText2 setPoint("CENTER", "CENTER", 0, -65);
        self.ChangingKit2.color     = (0, 0, 0);
        self.ChangingKit2.bar.color = self.BarColor;
        self.ChangingKit2.alpha     = 0.63;
        wait .001;
    }
    self.ChangingKit destroyElem();
    self.KitText destroyElem();
    self.ChangingKit2 destroyElem();
    self.KitText2 destroyElem();
}

doThirdPersonOMA()
{
    currentWeapon = self getcurrentweapon();
    shaxMODEL = spawn( "script_model", self.origin );
    self PlayerLinkToDelta(shaxMODEL);
    self setclientthirdperson(1);
    self giveWeapon(self.OMAWeapon);
    self switchToWeapon(self.OMAWeapon);
    wait 0.1;
    self thread ChangingKit2();
    wait 1.92;
    self setclientthirdperson(0);
    self takeweapon(self.OMAWeapon);
    self unlink();
    self switchToWeapon(currentWeapon);
    
}

ThirdPersonWithOMA1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person OMA bind activated, press [{+Actionslot 1}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPersonOMA();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

ThirdPersonWithOMA2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person OMA bind activated, press [{+Actionslot 2}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPersonOMA();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

ThirdPersonWithOMA3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person OMA bind activated, press [{+Actionslot 3}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPersonOMA();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

ThirdPersonWithOMA4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person OMA bind activated, press [{+Actionslot 4}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPersonOMA();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

InstaWeap1()
{
    if(!isDefined(self.instaWeap1) )
    {
        self.instaWeap1 = self getcurrentweapon();
        self iPrintLn("Weapon 1 Selected: ^2" + self.instaWeap1);
    }   
}

InstaWeap2()
{
    if(!isDefined(self.instaWeap2) )
    {
        self.instaWeap2 = self getcurrentweapon();
        self iPrintLn("Weapon 2 Selected: ^2" + self.instaWeap2);
    }
}

Instaswap1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Instant))
    {
        self iPrintLn("Instaswap bind activated, press [{+Actionslot 1}] to Instaswap");
        self.Instant = true;
        while(isDefined(self.Instant))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doInsta();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Instant)) 
    { 
        self iPrintLn("Instaswap bind ^1deactivated");
        self.Instant = undefined; 
    } 
}

Instaswap2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Instant))
    {
        self iPrintLn("Instaswap bind activated, press [{+Actionslot 2}] to Instaswap");
        self.Instant = true;
        while(isDefined(self.Instant))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doInsta();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Instant)) 
    { 
        self iPrintLn("Instaswap bind ^1deactivated");
        self.Instant = undefined; 
    } 
}

Instaswap3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Instant))
    {
        self iPrintLn("Instaswap bind activated, press [{+Actionslot 3}] to Instaswap");
        self.Instant = true;
        while(isDefined(self.Instant))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doInsta();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Instant)) 
    { 
        self iPrintLn("Instaswap bind ^1deactivated");
        self.Instant = undefined; 
    } 
}

Instaswap4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Instant))
    {
        self iPrintLn("Instaswap bind activated, press [{+Actionslot 4}] to Instaswap");
        self.Instant = true;
        while(isDefined(self.Instant))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doInsta();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Instant)) 
    { 
        self iPrintLn("Instaswap bind ^1deactivated");
        self.Instant = undefined; 
    } 
}

doInsta() 
{
    self endon("disconnect");       
    if(self getcurrentweapon() == self.instaWeap1) 
    {
        self giveWeapon(self.instaWeap2);
        self setSpawnWeapon(self.instaWeap2);

    }
    else if(self getcurrentweapon() == self.instaWeap2) 
    {
        self giveWeapon(self.instaWeap1);
        self setSpawnWeapon(self.instaWeap1);
    }
}

CanswapBind1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.canswapBind))
    {
        self iPrintLn("Canswap activated, press [{+Actionslot 1}] to Canswap");
        self.canswapBind = true;
        while(isDefined(self.canswapBind))
        {
            if(self ActionSlotOneButtonPressed() && self.menu.open == false)
            {
                self thread CanswapFunction();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.canswapBind)) 
    { 
    self iPrintLn("Canswap bind ^1deactivated");
    self.canswapBind = undefined; 
    } 
}

CanswapBind2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.canswapBind))
    {
        self iPrintLn("Canswap activated, press [{+Actionslot 2}] to Canswap");
        self.canswapBind = true;
        while(isDefined(self.canswapBind))
        {
            if(self ActionSlotTwoButtonPressed() && self.menu.open == false)
            {
                self thread CanswapFunction();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.canswapBind)) 
    { 
    self iPrintLn("Canswap bind ^1deactivated");
    self.canswapBind = undefined; 
    } 
}

CanswapBind3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.canswapBind))
    {
        self iPrintLn("Canswap activated, press [{+Actionslot 3}] to Canswap");
        self.canswapBind = true;
        while(isDefined(self.canswapBind))
        {
            if(self ActionSlotThreeButtonPressed() && self.menu.open == false)
            {
                self thread CanswapFunction();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.canswapBind)) 
    { 
    self iPrintLn("Canswap bind ^1deactivated");
    self.canswapBind = undefined; 
    } 
}

CanswapBind4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.canswapBind))
    {
        self iPrintLn("Canswap activated, press [{+Actionslot 4}] to Canswap");
        self.canswapBind = true;
        while(isDefined(self.canswapBind))
        {
            if(self ActionSlotFourButtonPressed() && self.menu.open == false)
            {
                self thread CanswapFunction();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.canswapBind)) 
    { 
    self iPrintLn("Canswap bind ^1deactivated");
    self.canswapBind = undefined; 
    } 
}

CanswapFunction()
{
    
    canswapWeap = self getCurrentWeapon();
    self takeWeapon(canswapWeap);
    self giveweapon(canswapWeap);
}

Bounce1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bouncing))
    {
        self iPrintLn("Bounce bind activated, press [{+Actionslot 1}] to bounce");
        self.Bouncing = true;
        while(isDefined(self.Bouncing))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doBounce();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bouncing)) 
    { 
        self iPrintLn("bounce bind ^1deactivated");
        self.Bouncing = undefined; 
    } 
}

Bounce2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bouncing))
    {
        self iPrintLn("Bounce bind activated, press [{+Actionslot 2}] to bounce");
        self.Bouncing = true;
        while(isDefined(self.Bouncing))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doBounce();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bouncing)) 
    { 
        self iPrintLn("bounce bind ^1deactivated");
        self.Bouncing = undefined; 
    } 
}

Bounce3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bouncing))
    {
        self iPrintLn("Bounce bind activated, press [{+Actionslot 3}] to bounce");
        self.Bouncing = true;
        while(isDefined(self.Bouncing))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doBounce();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bouncing)) 
    { 
        self iPrintLn("bounce bind ^1deactivated");
        self.Bouncing = undefined; 
    } 
}

Bounce4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bouncing))
    {
        self iPrintLn("Bounce bind activated, press [{+Actionslot 4}] to bounce");
        self.Bouncing = true;
        while(isDefined(self.Bouncing))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doBounce();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bouncing)) 
    { 
        self iPrintLn("bounce bind ^1deactivated");
        self.Bouncing = undefined; 
    } 
}

doBounce()
{
    self setvelocity(self getvelocity() + (0,0,999));
}

Flicker1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.flicker))
    {
        self iPrintLn("flicker activated, press [{+Actionslot 1}] to flicker");
        self.flicker = true;
        while(isDefined(self.flicker))
        {
            if(self ActionSlotOneButtonPressed() && self.menu.open == false)
            {
                keepBombWeap1 = self getCurrentWeapon();
                self giveWeapon(self.flickerWeapon);
                self setspawnweapon(self.flickerWeapon);
                wait 0.1;
                self takeWeapon(self.flickerWeapon);
                self setspawnweapon(keepBombWeap1); 
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.flicker)) 
    { 
    self iPrintLn("flicker bind ^1deactivated");
    self.flicker = undefined; 
    } 
}

Flicker2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.flicker))
    {
        self iPrintLn("flicker activated, press [{+Actionslot 2}] to flicker");
        self.flicker = true;
        while(isDefined(self.flicker))
        {
            if(self ActionSlotTwoButtonPressed() && self.menu.open == false)
            {
                keepBombWeap1 = self getCurrentWeapon();
                self giveWeapon(self.flickerWeapon);
                self setspawnweapon(self.flickerWeapon);
                wait 0.1;
                self takeWeapon(self.flickerWeapon);
                self setspawnweapon(keepBombWeap1);
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.flicker)) 
    { 
    self iPrintLn("flicker bind ^1deactivated");
    self.flicker = undefined; 
    } 
}

Flicker3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.flicker))
    {
        self iPrintLn("flicker activated, press [{+Actionslot 3}] to flicker");
        self.flicker = true;
        while(isDefined(self.flicker))
        {
            if(self ActionSlotThreeButtonPressed() && self.menu.open == false)
            {
                keepBombWeap1 = self getCurrentWeapon();
                self giveWeapon(self.flickerWeapon);
                self setspawnweapon(self.flickerWeapon);
                wait 0.1;
                self takeWeapon(self.flickerWeapon);
                self setspawnweapon(keepBombWeap1);
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.flicker)) 
    { 
    self iPrintLn("flicker bind ^1deactivated");
    self.flicker = undefined; 
    } 
}

Flicker4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.flicker))
    {
        self iPrintLn("flicker activated, press [{+Actionslot 4}] to flicker");
        self.flicker = true;
        while(isDefined(self.flicker))
        {
            if(self ActionSlotFourButtonPressed() && self.menu.open == false)
            {
                keepBombWeap1 = self getCurrentWeapon();
                self giveWeapon(self.flickerWeapon);
                self setspawnweapon(self.flickerWeapon);
                wait 0.1;
                self takeWeapon(self.flickerWeapon);
                self setspawnweapon(keepBombWeap1);
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.flicker)) 
    { 
    self iPrintLn("flicker bind ^1deactivated");
    self.flicker = undefined; 
    } 
}

setFlickerWeapon(gun)
{
    self iprintln(gun + " has been set as flicker weapon");
    self.flickerWeapon = gun;
}


savebolt()
{
    self endon("disconnect");
    self iPrintLn("^2Bolt Movement Position 1 Saved");
    self.pers["loc"] = true;
    self.pers["saveposbolt"] = self.origin;
}

savebolt2()
{
    self iPrintLn("^2Bolt Movement Position 2 Saved");
    self.pers["loc"] = true;
    self.pers["saveposbolt2"] = self.origin;
}

savebolt3()
{
    self iPrintLn("^2Bolt Movement Position 3 Saved");
    self.pers["loc"] = true;
    self.pers["saveposbolt3"] = self.origin;
}

savebolt4()
{
    self iPrintLn("^2Bolt Movement Position 4 Saved");
    self.pers["loc"] = true;
    self.pers["saveposbolt4"] = self.origin;
}

changeBoltSpeed(time)
{
    self.boltspeed = time;
    self iprintln("Bolt movement speed is set to " + time);
}

boltmovement1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 1}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"], self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

boltmovement2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 2}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"], self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

boltmovement3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 3}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"], self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

boltmovement4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 4}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"], self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

doubleboltmovement1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 1}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

doubleboltmovement2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 2}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

doubleboltmovement3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 3}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

doubleboltmovement4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 4}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

tripleboltmovement1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 1}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

tripleboltmovement2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 2}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

tripleboltmovement3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 3}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

tripleboltmovement4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 4}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

quadboltmovement1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 1}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt4"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

quadboltmovement2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 2}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt4"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

quadboltmovement3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 3}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt4"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

quadboltmovement4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Bolt))
    {
        self iPrintLn("Bolt movement bind activated, press [{+Actionslot 4}] to start");
        self.Bolt = true;
        while(isDefined(self.Bolt))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                scriptRide = spawn("script_model", self.origin);
                scriptRide EnableLinkTo();
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt2"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt3"],self.boltspeed);
                wait self.boltspeed;
                self PlayerLinkToDelta(scriptRide);
                scriptRide MoveTo(self.pers["saveposbolt4"],self.boltspeed);
                wait self.boltspeed;
                self Unlink();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.Bolt)) 
    { 
        self iPrintLn("Bolt movement bind ^1deactivated");
        self.Bolt = undefined; 
    } 
}

Repeater1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.repeaterBind))
    {
        self iPrintLn("Repeater bind activated, press [{+Actionslot 1}] to Repeater");
        self.repeaterBind = true;
        while(isDefined(self.repeaterBind))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self.Repeaterweap = self getCurrentWeapon();
                self setSpawnWeapon(self.Repeaterweap);
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.repeaterBind)) 
    { 
        self iPrintLn("Repeater bind ^1deactivated");
        self.repeaterBind = undefined; 
    } 
}

Repeater2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.repeaterBind))
    {
        self iPrintLn("Repeater bind activated, press [{+Actionslot 2}] to Repeater");
        self.repeaterBind = true;
        while(isDefined(self.repeaterBind))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self.Repeaterweap = self getCurrentWeapon();
                self setSpawnWeapon(self.Repeaterweap);
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.repeaterBind)) 
    { 
        self iPrintLn("Repeater bind ^1deactivated");
        self.repeaterBind = undefined; 
    } 
}

Repeater3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.repeaterBind))
    {
        self iPrintLn("Repeater bind activated, press [{+Actionslot 3}] to Repeater");
        self.repeaterBind = true;
        while(isDefined(self.repeaterBind))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self.Repeaterweap = self getCurrentWeapon();
                self setSpawnWeapon(self.Repeaterweap);
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.repeaterBind)) 
    { 
        self iPrintLn("Repeater bind ^1deactivated");
        self.repeaterBind = undefined; 
    } 
}

Repeater4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.repeaterBind))
    {
        self iPrintLn("Repeater bind activated, press [{+Actionslot 4}] to Repeater");
        self.repeaterBind = true;
        while(isDefined(self.repeaterBind))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self.Repeaterweap = self getCurrentWeapon();
                self setSpawnWeapon(self.Repeaterweap);
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.repeaterBind)) 
    { 
        self iPrintLn("Repeater bind ^1deactivated");
        self.repeaterBind = undefined; 
    } 
}

rapidFire1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.RapidFapped))
    {
        self iPrintLn("Rapid fire bind activated, press [{+Actionslot 1}] to shoot fast");
        self.RapidFapped = true;
        while(isDefined(self.RapidFapped))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread rapidFireFunc();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.RapidFapped)) 
    { 
        self iPrintLn("Rapid fire bind ^1deactivated");
        self.RapidFapped = undefined; 
    } 
}

rapidFire2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.RapidFapped))
    {
        self iPrintLn("Rapid fire bind activated, press [{+Actionslot 2}] to shoot fast");
        self.RapidFapped = true;
        while(isDefined(self.RapidFapped))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread rapidFireFunc();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.RapidFapped)) 
    { 
        self iPrintLn("Rapid fire bind ^1deactivated");
        self.RapidFapped = undefined; 
    } 
}

rapidFire3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.RapidFapped))
    {
        self iPrintLn("Rapid fire bind activated, press [{+Actionslot 3}] to shoot fast");
        self.RapidFapped = true;
        while(isDefined(self.RapidFapped))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread rapidFireFunc();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.RapidFapped)) 
    { 
        self iPrintLn("Rapid fire bind ^1deactivated");
        self.RapidFapped = undefined; 
    } 
}

rapidFire4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.RapidFapped))
    {
        self iPrintLn("Rapid fire bind activated, press [{+Actionslot 4}] to shoot fast");
        self.RapidFapped = true;
        while(isDefined(self.RapidFapped))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread rapidFireFunc();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.RapidFapped)) 
    { 
        self iPrintLn("Rapid fire bind ^1deactivated");
        self.RapidFapped = undefined; 
    } 
}

rapidFireFunc()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.RapidToggle))
    {
        self.RapidToggle = true;
        self setperk("specialty_fastreload");
        self thread unlimited_ammo();
        setDvar("perk_weapReloadMultiplier",0.001);
    } 
    else if(isDefined(self.RapidToggle)) 
    { 
        self.RapidToggle = undefined; 
        setDvar("perk_weapReloadMultiplier",0.5);
        self notify("stop_unlimitedammo");
    } 
}

Scavdropbind1()
{
    if(!isDefined(self.dropbind))
    {
        self iPrintLn("Scavenger drop bind activated, press [{+Actionslot 1}] to drop scav pack");
        self.dropbind = true;
        while(isDefined(self.dropbind))
        {
            if(self ActionSlotOneButtonPressed() && self.menu.open == false)
            {
                self setPerk("specialty_scavenger");
                item = self dropScavengerItem( "scavenger_item_mp" );
                item thread maps\mp\gametypes\_weapons::scavenger_think();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.dropbind)) 
    { 
        self iPrintLn("drop scav pack bind: ^1Disabled");
        self.dropbind = undefined; 
    } 
}

Scavdropbind2()
{
    if(!isDefined(self.dropbind))
    {
        self iPrintLn("Scavenger drop bind activated, press [{+Actionslot 2}] to drop scav pack");
        self.dropbind = true;
        while(isDefined(self.dropbind))
        {
            if(self ActionSlotTwoButtonPressed() && self.menu.open == false)
            {
                self setPerk("specialty_scavenger");
                item = self dropScavengerItem( "scavenger_item_mp" );
                item thread maps\mp\gametypes\_weapons::scavenger_think();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.dropbind)) 
    { 
        self iPrintLn("drop scav bag bind: ^1Disabled");
        self.dropbind = undefined; 
    } 
}

Scavdropbind3()
{
    if(!isDefined(self.dropbind))
    {
        self iPrintLn("Scavenger drop bind activated, press [{+Actionslot 3}] to drop scav pack");
        self.dropbind = true;
        while(isDefined(self.dropbind))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self setPerk("specialty_scavenger");
                item = self dropScavengerItem( "scavenger_item_mp" );
                item thread maps\mp\gametypes\_weapons::scavenger_think();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.dropbind)) 
    { 
        self iPrintLn("drop scav bag bind: ^1Disabled");
        self.dropbind = undefined; 
    } 
}

Scavdropbind4()
{
    if(!isDefined(self.dropbind))
    {
        self iPrintLn("Scavenger drop bind activated, press [{+Actionslot 4}] to drop scav pack");
        self.dropbind = true;
        while(isDefined(self.dropbind))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self setPerk("specialty_scavenger");
                item = self dropScavengerItem( "scavenger_item_mp" );
                item thread maps\mp\gametypes\_weapons::scavenger_think();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.dropbind)) 
    { 
        self iPrintLn("drop scav bag bind: ^1Disabled");
        self.dropbind = undefined; 
    } 
}

EmptyClip1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.emptyClip))
    {
        self iPrintLn("empty clip bind activated, press [{+Actionslot 1}] to empty clip");
        self.emptyClip = true;
        while(isDefined(self.emptyClip))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doEmptyClip();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.emptyClip)) 
    { 
        self iPrintLn("empty clip bind ^1deactivated");
        self.emptyClip = undefined; 
    } 
}

EmptyClip2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.emptyClip))
    {
        self iPrintLn("empty clip bind activated, press [{+Actionslot 2}] to empty clip");
        self.emptyClip = true;
        while(isDefined(self.emptyClip))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doEmptyClip();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.emptyClip)) 
    { 
        self iPrintLn("empty clip bind ^1deactivated");
        self.emptyClip = undefined; 
    } 
}

EmptyClip3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.emptyClip))
    {
        self iPrintLn("empty clip bind activated, press [{+Actionslot 3}] to empty clip");
        self.emptyClip = true;
        while(isDefined(self.emptyClip))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doEmptyClip();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.emptyClip)) 
    { 
        self iPrintLn("empty clip bind ^1deactivated");
        self.emptyClip = undefined; 
    } 
}

EmptyClip4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.emptyClip))
    {
        self iPrintLn("empty clip bind activated, press [{+Actionslot 4}] to empty clip");
        self.emptyClip = true;
        while(isDefined(self.emptyClip))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doEmptyClip();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.emptyClip)) 
    { 
        self iPrintLn("empty clip bind ^1deactivated");
        self.emptyClip = undefined; 
    } 
}

doEmptyClip()
{
    self.EmptyWeap = self getCurrentweapon();
    WeapEmpClip    = self getWeaponAmmoClip(self.EmptyWeap);
    WeapEmpStock     = self getWeaponAmmoStock(self.EmptyWeap);
    self setweaponammostock(self.EmptyWeap, WeapEmpStock);
    self setweaponammoclip(self.EmptyWeap, WeapEmpClip - WeapEmpClip);
}

ThirdPerson1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person bind activated, press [{+Actionslot 1}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPerson();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

ThirdPerson2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person bind activated, press [{+Actionslot 2}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPerson();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

ThirdPerson3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person bind activated, press [{+Actionslot 3}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPerson();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

ThirdPerson4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.ThirdPerson))
    {
        self iPrintLn("Third person bind activated, press [{+Actionslot 4}]");
        self.ThirdPerson = true;
        while(isDefined(self.ThirdPerson))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread doThirdPerson();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.ThirdPerson)) 
    { 
        self iPrintLn("Third person bind ^1deactivated");
        self notify("stopThird");
        self.ThirdPerson = undefined; 
    }
}

doThirdPerson()
{
    self endon("stopThird");
    if(!isDefined(self.DoingThirdPerson))
    {
        self setclientthirdperson(1);
        self.DoingThirdPerson = true;
    }
    else
    {
        self setclientthirdperson(0);
        self.DoingThirdPerson = undefined;
    }
}

DropWeapon1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.DropWeap))
    {
        self iPrintLn("Drop weapon bind activated, press [{+Actionslot 1}]");
        self.DropWeap = true;
        while(isDefined(self.DropWeap))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                if(!isDefined(self.NextDropped))
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                }
                else
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                    self setSpawnWeapon(self.NextDropped);
                }
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.DropWeap)) 
    { 
        self iPrintLn("Drop weapon bind ^1deactivated");
        self.DropWeap = undefined; 
    }
}

DropWeapon2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.DropWeap))
    {
        self iPrintLn("Drop weapon bind activated, press [{+Actionslot 2}]");
        self.DropWeap = true;
        while(isDefined(self.DropWeap))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                if(!isDefined(self.NextDropped))
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                }
                else
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                    self setSpawnWeapon(self.NextDropped);
                }
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.DropWeap)) 
    { 
        self iPrintLn("Drop weapon bind ^1deactivated");
        self.DropWeap = undefined; 
    }
}

DropWeapon3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.DropWeap))
    {
        self iPrintLn("Drop weapon bind activated, press [{+Actionslot 3}]");
        self.DropWeap = true;
        while(isDefined(self.DropWeap))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                if(!isDefined(self.NextDropped))
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                }
                else
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                    self setSpawnWeapon(self.NextDropped);
                }
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.DropWeap)) 
    { 
        self iPrintLn("Drop weapon bind ^1deactivated");
        self.DropWeap = undefined; 
    }
}

DropWeapon4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.DropWeap))
    {
        self iPrintLn("Drop weapon bind activated, press [{+Actionslot 4}]");
        self.DropWeap = true;
        while(isDefined(self.DropWeap))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                if(!isDefined(self.NextDropped))
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                }
                else
                {
                    weap = self getCurrentWeapon();
                    self dropitem(weap);
                    self setSpawnWeapon(self.NextDropped);
                }
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.DropWeap)) 
    { 
        self iPrintLn("Drop weapon bind ^1deactivated");
        self.DropWeap = undefined; 
    }
}

Canzoom1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Canzoom))
    {
        self iPrintLn("Canzoom bind activated, press [{+Actionslot 1}]");
        self.Canzoom = true;
        while(isDefined(self.Canzoom))
        {
            if(self actionslotonebuttonpressed() && self.menu.open == false)
            {
                self thread CanzoomFunction();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.Canzoom)) 
    { 
        self iPrintLn("Canzoom bind ^1deactivated");
        self.Canzoom = undefined; 
    }
}

Canzoom2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Canzoom))
    {
        self iPrintLn("Canzoom bind activated, press [{+Actionslot 2}]");
        self.Canzoom = true;
        while(isDefined(self.Canzoom))
        {
            if(self actionslottwobuttonpressed() && self.menu.open == false)
            {
                self thread CanzoomFunction();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.Canzoom)) 
    { 
        self iPrintLn("Canzoom bind ^1deactivated");
        self.Canzoom = undefined; 
    }
}

Canzoom3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Canzoom))
    {
        self iPrintLn("Canzoom bind activated, press [{+Actionslot 3}]");
        self.Canzoom = true;
        while(isDefined(self.Canzoom))
        {
            if(self actionslotthreebuttonpressed() && self.menu.open == false)
            {
                self thread CanzoomFunction();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.Canzoom)) 
    { 
        self iPrintLn("Canzoom bind ^1deactivated");
        self.Canzoom = undefined; 
    }
}

Canzoom4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.Canzoom))
    {
        self iPrintLn("Canzoom bind activated, press [{+Actionslot 4}]");
        self.Canzoom = true;
        while(isDefined(self.Canzoom))
        {
            if(self actionslotfourbuttonpressed() && self.menu.open == false)
            {
                self thread CanzoomFunction();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.Canzoom)) 
    { 
        self iPrintLn("Canzoom bind ^1deactivated");
        self.Canzoom = undefined; 
    }
}

CanzoomFunction()
{
    self.canswapWeap = self getCurrentWeapon();
    self takeWeapon(self.canswapWeap);
    self giveweapon(self.canswapWeap);
    wait 0.05;
    self setSpawnWeapon(self.canswapWeap);
}

Cowboy1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.CowboyBind))
    {
        self iPrintLn("Cowboy bind activated, press [{+Actionslot 1}] to cowboy");
        self.CowboyBind = true;
        while(isDefined(self.CowboyBind))
        {
            if(self actionslotonebuttonpressed() && self.MenuOpen == false)
            {
                if(self.DoingCowboy == false)
                {
                    self.DoingCowboy = true;
                    setdvar("cg_gun_z", "8");
                }
                else
                {
                    self.DoingCowboy = false;
                    setdvar("cg_gun_z", "0");
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.CowboyBind)) 
    { 
        self iPrintLn("Cowboy bind ^1deactivated");
        self.CowboyBind = undefined; 
    } 
}

Cowboy2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.CowboyBind))
    {
        self iPrintLn("Cowboy bind activated, press [{+Actionslot 2}] to cowboy");
        self.CowboyBind = true;
        while(isDefined(self.CowboyBind))
        {
            if(self actionslottwobuttonpressed() && self.MenuOpen == false)
            {
                if(self.DoingCowboy == false)
                {
                    self.DoingCowboy = true;
                    setdvar("cg_gun_z", "8");
                }
                else
                {
                    self.DoingCowboy = false;
                    setdvar("cg_gun_z", "0");
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.CowboyBind)) 
    { 
        self iPrintLn("Cowboy bind ^1deactivated");
        self.CowboyBind = undefined; 
    } 
}   

Cowboy3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.CowboyBind))
    {
        self iPrintLn("Cowboy bind activated, press [{+Actionslot 3}] to cowboy");
        self.CowboyBind = true;
        while(isDefined(self.CowboyBind))
        {
            if(self actionslotthreebuttonpressed() && self.MenuOpen == false)
            {
                if(self.DoingCowboy == false)
                {
                    self.DoingCowboy = true;
                    setdvar("cg_gun_z", "8");
                }
                else
                {
                    self.DoingCowboy = false;
                    setdvar("cg_gun_z", "0");
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.CowboyBind)) 
    { 
        self iPrintLn("Cowboy bind ^1deactivated");
        self.CowboyBind = undefined; 
    } 
}   

Cowboy4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.CowboyBind))
    {
        self iPrintLn("Cowboy bind activated, press [{+Actionslot 4}] to cowboy");
        self.CowboyBind = true;
        while(isDefined(self.CowboyBind))
        {
            if(self actionslotfourbuttonpressed() && self.MenuOpen == false)
            {
                if(self.DoingCowboy == false)
                {
                    self.DoingCowboy = true;
                    setdvar("cg_gun_z", "8");
                }
                else
                {
                    self.DoingCowboy = false;
                    setdvar("cg_gun_z", "0");
                }
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.CowboyBind)) 
    { 
        self iPrintLn("Cowboy bind ^1deactivated");
        self.CowboyBind = undefined; 
    } 
}

DiscoCamo1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.discoCamo))
    {
        self iPrintLn("Disco camo bind activated, press [{+Actionslot 1}]");
        self.discoCamo = true;
        while(isDefined(self.discoCamo))
        {
            if(self actionslotonebuttonpressed() && self.MenuOpen == false)
            {
                self thread DoCamoLoop();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.discoCamo)) 
    { 
        self iPrintLn("Disco camo bind ^1deactivated");
        self notify("Stop_CamoLoop");
        self.discoCamo = undefined; 
    }
}

DiscoCamo2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.discoCamo))
    {
        self iPrintLn("Disco camo bind activated, press [{+Actionslot 2}]");
        self.discoCamo = true;
        while(isDefined(self.discoCamo))
        {
            if(self actionslottwobuttonpressed() && self.MenuOpen == false)
            {
                self thread DoCamoLoop();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.discoCamo)) 
    { 
        self iPrintLn("Disco camo bind ^1deactivated");
        self notify("Stop_CamoLoop");
        self.discoCamo = undefined; 
    }
}

DiscoCamo3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.discoCamo))
    {
        self iPrintLn("Disco camo bind activated, press [{+Actionslot 3}]");
        self.discoCamo = true;
        while(isDefined(self.discoCamo))
        {
            if(self actionslotthreebuttonpressed() && self.MenuOpen == false)
            {
                self thread DoCamoLoop();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.discoCamo)) 
    { 
        self iPrintLn("Disco camo bind ^1deactivated");
        self notify("Stop_CamoLoop");
        self.discoCamo = undefined; 
    }
}

DiscoCamo4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.discoCamo))
    {
        self iPrintLn("Disco camo bind activated, press [{+Actionslot 4}]");
        self.discoCamo = true;
        while(isDefined(self.discoCamo))
        {
            if(self actionslotfourbuttonpressed() && self.MenuOpen == false)
            {
                self thread DoCamoLoop();
            }
            wait .001;
        } 
    } 
    else if(isDefined(self.discoCamo)) 
    { 
        self iPrintLn("Disco camo bind ^1deactivated");
        self notify("Stop_CamoLoop");
        self.discoCamo = undefined; 
    }
}

FakeScav1()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.fakeScav))
    {
        self iPrintLn("Fake scav bind activated, press [{+Actionslot 1}]");
        self.fakeScav = true;
        while(isDefined(self.fakeScav))
        {
            if(self actionslotonebuttonpressed() && self.MenuOpen == false)
            {
                self thread doFakeScav();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.fakeScav)) 
    { 
        self iPrintLn("Fake scav bind ^1deactivated");
        self.fakeScav = undefined; 
    } 
}

FakeScav2()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.fakeScav))
    {
        self iPrintLn("Fake scav bind activated, press [{+Actionslot 2}]");
        self.fakeScav = true;
        while(isDefined(self.fakeScav))
        {
            if(self actionslottwobuttonpressed() && self.MenuOpen == false)
            {
                self thread doFakeScav();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.fakeScav)) 
    { 
        self iPrintLn("Fake scav bind ^1deactivated");
        self.fakeScav = undefined; 
    } 
}

FakeScav3()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.fakeScav))
    {
        self iPrintLn("Fake scav bind activated, press [{+Actionslot 3}]");
        self.fakeScav = true;
        while(isDefined(self.fakeScav))
        {
            if(self actionslotthreebuttonpressed() && self.MenuOpen == false)
            {
                self thread doFakeScav();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.fakeScav)) 
    { 
        self iPrintLn("Fake scav bind ^1deactivated");
        self.fakeScav = undefined; 
    } 
}

FakeScav4()
{
    self endon ("disconnect");
    self endon ("game_ended");
    if(!isDefined(self.fakeScav))
    {
        self iPrintLn("Fake scav bind activated, press [{+Actionslot 4}]");
        self.fakeScav = true;
        while(isDefined(self.fakeScav))
        {
            if(self actionslotfourbuttonpressed() && self.MenuOpen == false)
            {
                self thread doFakeScav();
            }
            wait .001; 
        } 
    } 
    else if(isDefined(self.fakeScav)) 
    { 
        self iPrintLn("Fake scav bind ^1deactivated");
        self.fakeScav = undefined; 
    } 
}

doFakeScav()
{
    self.EmptyWeap                = self getCurrentweapon();
    WeapEmpClip                   = self getWeaponAmmoClip(self.EmptyWeap);
    WeapEmpStock                  = self getWeaponAmmoStock(self.EmptyWeap);
    self.scavenger_icon           = NewClientHudElem( self );
    self.scavenger_icon.horzAlign = "center";
    self.scavenger_icon.vertAlign = "middle";
    width                         = 48;
    height                        = 24;
    self.scavenger_icon setShader( "hud_scavenger_pickup", width, height );
    self.scavenger_icon.alpha = 1;
    self.scavenger_icon fadeOverTime( 2.5 );
    self.scavenger_icon.alpha = 0;
    self setweaponammostock(self.EmptyWeap, WeapEmpStock);
    self setweaponammoclip(self.EmptyWeap, WeapEmpClip - WeapEmpClip);
    wait 0.5;
    self setweaponammostock(self.EmptyWeap, WeapEmpStock);
    wait 1.8;
    self.scavenger_icon destroy();
}

EleBind()
{
    if(!isDefined(self.changle))
    {
        self endon("ebola");
        self.elevate = spawn( "script_origin", self.origin, 1 );
        self PlayerLinkToDelta( self.elevate, undefined );
        self.changle = true;
        for(;;)
        {
            self.o = self.elevate.origin;
            wait 0.005;
            self.elevate.origin = self.o + (0,0,4);
        }
        wait 0.005;
    }
    else
    {
        wait 0.01;
        self unlink();
        self.changle = undefined;
        self.elevate delete();
        self notify("ebola");
    }
}
 
 
ElevatorBind1()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.Elevator))
    {
        self iprintln("Elevator activated, press [{+Actionslot 1}] to elevator");
        self.Elevator = true;
        while(isDefined(self.Elevator))
        {
            if(self actionslotonebuttonpressed() && self.MenuOpen == false)
            {
                self thread EleBind();
            }
        wait .001;
        }
    }
    else if(isDefined(self.Elevator))
    {
        self iprintln("Elevator Bind ^5OFF");
        self.Elevator = undefined;
    }
}
 
ElevatorBind2()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.Elevator))
    {
        self iprintln("Elevator activated, press [{+Actionslot 2}] to elevator");
        self.Elevator = true;
        while(isDefined(self.Elevator))
        {
            if(self actionslottwobuttonpressed() && self.MenuOpen == false)
            {
                self thread EleBind();
            }
        wait .001;
        }
    }
    else if(isDefined(self.Elevator))
    {
        self iprintln("Elevator Bind ^1Off");
        self.Elevator = undefined;
    }
}
 
ElevatorBind3()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.Elevator))
    {
        self iprintln("Elevator activated, press [{+Actionslot 3}] to elevator");
        self.Elevator = true;
        while(isDefined(self.Elevator))
        {
            if(self actionslotthreebuttonpressed() && self.MenuOpen == false)
            {
                self thread EleBind();
            }
        wait .001;
        }
    }
    else if(isDefined(self.Elevator))
    {
        self iprintln("Elevator Bind ^1Off");
        self.Elevator = undefined;
    }
}
 
ElevatorBind4()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.Elevator))
    {
        self iprintln("Elevator activated, press [{+Actionslot 4}] to elevator");
        self.Elevator = true;
        while(isDefined(self.Elevator))
        {
            if(self actionslotfourbuttonpressed() && self.MenuOpen == false)
            {
                self thread EleBind();
            }
        wait .001;
        }
    }
    else if(isDefined(self.Elevator))
    {
        self iprintln("Elevator Bind ^1Off");
        self.Elevator = undefined;
    }
}

WallBreach1()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach activated, press [{+Actionslot 1}] to Breach");
        self.WallBreach = true;
        while(isDefined(self.WallBreach))
        {
            if(self actionslotonebuttonpressed() && self.MenuOpen == false)
            {
                self thread WallBreach();
            }
        wait .001;
        }
    }
    else if(isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach Bind ^5OFF");
        self.WallBreach = undefined;
        setdvar("r_singleCell", "0");
    }
}
 
WallBreach2()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach activated, press [{+Actionslot 2}] to Breach");
        self.WallBreach = true;
        while(isDefined(self.WallBreach))
        {
            if(self actionslottwobuttonpressed() && self.MenuOpen == false)
            {
                self thread WallBreach();
            }
        wait .001;
        }
    }
    else if(isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach Bind ^5OFF");
        self.WallBreach = undefined;
        setdvar("r_singleCell", "0");
    }
}
 
WallBreach3()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach activated, press [{+Actionslot 3}] to Breach");
        self.WallBreach = true;
        while(isDefined(self.WallBreach))
        {
            if(self actionslotthreebuttonpressed() && self.MenuOpen == false)
            {
                self thread WallBreach();
            }
        wait .001;
        }
    }
    else if(isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach Bind ^5OFF");
        self.WallBreach = undefined;
        setdvar("r_singleCell", "0");
    }
}
 
 
 
WallBreach4()
{
    self endon("game_ended");
    self endon( "disconnect" );
    if(!isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach activated, press [{+Actionslot 4}] to Breach");
        self.WallBreach = true;
        while(isDefined(self.WallBreach))
        {
            if(self actionslotfourbuttonpressed() && self.MenuOpen == false)
            {
                self thread WallBreach();
            }
        wait .001;
        }
    }
    else if(isDefined(self.WallBreach))
    {
        self iprintln("Wall Breach Bind ^5OFF");
        self.WallBreach = undefined;
        setdvar("r_singleCell", "0");
    } 
}
 
 
WallBreach()
{
    if(!isDefined(self.WallBreachX))
    {
        self.WallBreachX = true;
        setdvar("r_singleCell", "1");
        wait .001;
    }
    else if(isDefined(self.WallBreachX))
    {
        self.WallBreachX = undefined;
        setdvar("r_singleCell", "0");
    }
    wait .001;
}
add_menu_alt(Menu, prevmenu)
{
    self.menu.getmenu[Menu] = Menu;
    self.menu.menucount[Menu] = 0;
    self.menu.previousmenu[Menu] = prevmenu;
}

add_menu(Menu, prevmenu, status)
{
    self.menu.status[Menu] = status;
    self.menu.getmenu[Menu] = Menu;
    self.menu.scrollerpos[Menu] = 0;
    self.menu.curs[Menu] = 0;
    self.menu.menucount[Menu] = 0;
    self.menu.previousmenu[Menu] = prevmenu;
}

add_option(Menu, Text, Func, arg1, arg2)
{
    Menu = self.menu.getmenu[Menu];
    Num = self.menu.menucount[Menu];
    self.menu.menuopt[Menu][Num] = Text;
    self.menu.menufunc[Menu][Num] = Func;
    self.menu.menuinput[Menu][Num] = arg1;
    self.menu.menuinput1[Menu][Num] = arg2;
    self.menu.menucount[Menu] += 1;
}

updateScrollbar()
{
    self.menu.scroller MoveOverTime(0.10);
    self.menu.scroller.y = 50 + (self.menu.curs[self.menu.currentmenu] * 14.40);
    
}

openMenu()
{
    self.menu.backgroundMain thread moveTo("y", 10, .1);
    self.menu.backgroundMain2 thread moveTo("y", 296, .1);
    self.menu.background thread moveTo("x", 263+self.menuxpos, .1);
    self.menu.scroller thread moveTo("x", 263+self.menuxpos, .1);  
    self.menu.background FadeOverTime(0.1);
    self.menu.background.alpha = 0.87;
    self.menu.scroller FadeOverTime(0.1);
    self.menu.scroller.alpha = 1; 
    self.menu.backgroundMain FadeOverTime(0.1);
    self.menu.backgroundMain.alpha = 1;
    self.menu.backgroundMain2 FadeOverTime(0.1);
    self.menu.backgroundMain2.alpha = 1;
    self.menu.background1 FadeOverTime(0.1);
    self.menu.background1.alpha = 1;
    wait 0.1;
    self freezeControls(false);
    self StoreText(self.menuname, self.menuname);
    self.menu.title2 FadeOVerTime(0.1);
    self.menu.title2.alpha = 1;
    self.menu.backgroundinfo FadeOverTime(0.1);
    self.menu.backgroundinfo.alpha = 1;
    self.menu.title FadeOverTime(0.1);
    self.swagtext.alpha = 1;
    self.menu.counter FadeOverTime(0.1);
    self.menu.counterSlash FadeOverTime(0.1);
    self.menu.counter1 FadeOverTime(0.1);
    self.menu.counter.alpha      = 1;
    self.menu.counter1.alpha     = 1;
    self.menu.counterSlash.alpha = 1;
    self.menu.line MoveOverTime(0.1);
    self.menu.line.y = -50; 
    self.menu.line2 MoveOverTime(0.1);
    self.menu.line2.y = -50;
    self updateScrollbar();
    self.menu.open = true;
}

closeMenu()
{
    self.menu.options FadeOverTime(0.1);
    self.menu.options.alpha = 0;
    self.statuss FadeOverTime(0.1);
    self.statuss.alpha = 0;
    self.tez FadeOverTime(0.1);
    self.tez.alpha = 0;
    self.menu.counter FadeOverTime(0.1);
    self.menu.counterSlash FadeOverTime(0.1);
    self.menu.counter1 FadeOverTime(0.1);
    self.menu.counter.alpha      = 0;
    self.menu.counter1.alpha     = 0;
    self.menu.counterSlash.alpha = 0;
    self.swagtext FadeOverTime(0.1);
    self.swagtext.alpha = 0;
    self.menu.title2 FadeOVerTime(0.1);
    self.menu.title2.alpha = 0;
    self.menu.title FadeOverTime(0.1);
    self.menu.title.alpha = 0;
    self.menu.line MoveOverTime(0.1);
    self.menu.line.y = -550;
    self.menu.line2 MoveOverTime(0.1);
    self.menu.line2.y = -550;
    self.menu.backgroundinfo FadeOverTime(0.1);
    self.menu.backgroundinfo.alpha = 0;
    self.menu.open                 = false;
    wait 0.1;
    self.menu.backgroundMain2 FadeOverTime(0.1);
    self.menu.backgroundMain2.alpha = 0;
    self.menu.background1 FadeOverTime(0.1);
    self.menu.background1.alpha = 0;
    self.menu.scroller FadeOverTime(0.1);
    self.menu.scroller.alpha = 0;
    self.menu.background FadeOverTime(0.1);
    self.menu.background.alpha = 0;
    self.menu.backgroundMain FadeOverTime(0.1);
    self.menu.backgroundMain.alpha = 0;
    self.menu.backgroundMain thread moveTo("y", -500, .1);
    self.menu.backgroundMain2 thread moveTo("y", 500, .1);
    self.menu.background thread moveTo("x", 800, .1);
    self.menu.scroller thread moveTo("x", 800, .1);
}

destroyMenu(player)
{
    player.MenuInit = false;
    closeMenu();
    wait 0.3;

    player.menu.options destroy();  
    player.menu.background1 destroy();
     player.menu.backgroundMain destroy();
      player.menu.backgroundMain2 destroy();
    player.menu.scroller destroy();
    player.menu.scroller1 destroy();
    player.infos destroy();
    
    self.menu.title2 destroy();
    
    player.menu.counter destroy();
    player.menu.counter1 destroy();
    player.menu.line destroy();
    player.menu.line2 destroy();
    player.menu.counterSlash destroy();
    player.menu.title destroy();
    player notify("destroyMenu");
}

closeMenuOnDeath()
{   
    self endon("disconnect");
    self endon( "destroyMenu" );
    level endon("game_ended");
    for (;;)
    {
        self waittill("death");
        if(self.menu.open == false)
        {
            self.menu.closeondeath = true;
        }
        else
        {
            self.menu.closeondeath = true;
            self submenu(self.menuname, self.menuname);
            closeMenu();
            self.menu.closeondeath = false;
        }
        
    }
}
StoreShaders()
{       // drawShader(shader, x, y, width, height, color, alpha, sort)
    self.menu.background      = self drawShader("white", 800, 36, 185, 264,(0.1626984126984127, 0.1626984126984127, 0.1626984126984127), 1, 0);//263, 20
    self.menu.backgroundMain  = self drawShader("black", 263+self.menuxpos, -500, 185, 27, (0,0,0), 1, 1);//263, 20
    self.menu.backgroundMain2 = self drawShader("black", 263+self.menuxpos, 500, 185, 14, (1,0.6468253968253968,0.1686274509803922), 1, 1);//263 296
    self.menu.scroller        = self drawShader("white", 800, -100, 185, 12, (1,0.6468253968253968,0.1686274509803922), 1, 2);//263, -100
}

titleFlash(){
  for(;;)
    {
        self endon ("stopflash");
        self.menu.title.glowcolor = (1, 0, 0);
        wait 0.7;
        self.menu.title.glowcolor = (0, 1, 0);
        wait 0.7;
        self.menu.title.glowcolor = (0, 0, 1);
    }
}
 
StoreText(menu, title)
{
    self.menu.currentmenu = menu;
    string = "";
    self.menu.title destroy();
    self.menu.title = drawText("Redemption", "objective", 1.9, 596+self.menuxpos, -180, (self.DefaultColors), 0, (self.DefaultColors), 0, 3);
    self.menu.title FadeOverTime(0);
    self.menu.title.alpha = 1;
    self.menu.title setPoint( "LEFT", "LEFT", 596+self.menuxpos, -180 );
   
    
    self.menu.currentmenu = menu;
    string = "";
    self.menu.title2 destroy();
    self.menu.title2 = drawText(title, "default", 1.2, 538+self.menuxpos, -161, (self.DefaultColors), 0, (self.DefaultColors), 0, 3);
    self.menu.title2 FadeOverTime(0);
    self.menu.title2.alpha = 1;
    self.menu.title2 setPoint( "LEFT", "LEFT", 538+self.menuxpos, -161);
    
    for(i = 0; i < self.menu.menuopt[menu].size; i++)
    { string +=self.menu.menuopt[menu][i] + "\n"; }
    
    self.menu.counter destroy();
    self.menu.counter       = drawValue(self.menu.curs[menu] + 1, "objective", 1.2, "RIGHT", "CENTER", 334+self.menuxpos, -161, (1, 1, 1), (self.DefaultColors), 1, 3);
    self.menu.counter.alpha = 1;  

    self.menu.counterSlash destroy();
    self.menu.counterSlash = drawText("/", "objective", 1.2, 342+self.menuxpos, -161, (1, 1, 1), 0, (0, 0, 0), 0, 4);
    self.menu.counterSlash FadeOverTime(0);
    self.menu.counterSlash.alpha = 1;
    self.menu.counterSlash setPoint( "RIGHT", "CENTER", 342+self.menuxpos, -161);
    
    self.menu.counter1 destroy();
    self.menu.counter1       = drawValue(self.menu.menuopt[menu].size, "objective", 1.2, "RIGHT", "CENTER", 352+self.menuxpos, -161, (1, 1, 1), (self.DefaultColors), 1, 3);
    self.menu.counter1.alpha = 1;   
    
    self.statuss destroy();
    self.statuss = drawText("Created by: Roach", "default", 1.1, 538+self.menuxpos, 98, (self.DefaultColors), 0, (self.DefaultColors), 0, 3);
    self.statuss FadeOverTime(0);
    self.statuss.alpha = 1;
    self.statuss setPoint( "LEFT", "LEFT", 538+self.menuxpos, 98);
    
    self.menu.options destroy();
    self.menu.options = drawText(string, "objective", 1.2, 538+self.menuxpos, -148, (1, 1, 1), 0, (0, 0, 0), 0, 4);
    self.menu.options FadeOverTime(0.5);
    self.menu.options.alpha = 1;
    self.menu.options setPoint( "LEFT", "LEFT", 538+self.menuxpos, -148);
 
}
    
//
MenuInit()
{
    self endon("disconnect");
    self endon( "destroyMenu" );
    //level endon("game_ended");
       
    self.menu = spawnstruct();
    self.toggles = spawnstruct();
     
    self.menu.open = false;
    
    self StoreShaders();
    self CreateMenu();
    
    for(;;)
    {  
        if(self actionslotfourbuttonpressed() && self adsButtonPressed() && !self.menu.open) 
        {
            openMenu();
        }
        if(self.menu.open)
        {
            if(self meleeButtonPressed())
            {
                if(isDefined(self.menu.previousmenu[self.menu.currentmenu]))
                {
                    self submenu(self.menu.previousmenu[self.menu.currentmenu], self.menu.title);
                }
                else
                {
                    closeMenu();
                }
                wait 0.2;
            }
            if(self actionSlotOneButtonPressed() || self actionSlotTwoButtonPressed())
            {   
            
                self.menu.curs[self.menu.currentmenu] += (Iif(self actionSlotTwoButtonPressed(), 1, -1));
                self.menu.curs[self.menu.currentmenu] = (Iif(self.menu.curs[self.menu.currentmenu] < 0, self.menu.menuopt[self.menu.currentmenu].size-1, Iif(self.menu.curs[self.menu.currentmenu] > self.menu.menuopt[self.menu.currentmenu].size-1, 0, self.menu.curs[self.menu.currentmenu])));
                
                self.menu.counter setValue(self.menu.curs[self.menu.currentmenu] + 1);
                self.menu.counter1 setValue(self.menu.menuopt[self.menu.currentmenu].size);
                
                self updateScrollbar();
            }
            if(self useButtonPressed())
            {
                self thread [[self.menu.menufunc[self.menu.currentmenu][self.menu.curs[self.menu.currentmenu]]]](self.menu.menuinput[self.menu.currentmenu][self.menu.curs[self.menu.currentmenu]], self.menu.menuinput1[self.menu.currentmenu][self.menu.curs[self.menu.currentmenu]]);
                wait 0.2;
            }
        }
        wait 0.05;
    }
}
 
submenu(input, title)
{
    if (verificationToNum(self.status) >= verificationToNum(self.menu.status[input]))
    {
        self.menu.options destroy();

        if (input == self.menuname)
            self thread StoreText(input, self.menuname);
        else if (input == "PlayersMenu")
        {
            self updatePlayersMenu();
            self thread StoreText(input, "Players");
        }
        else
            self thread StoreText(input, title);
            
        self.CurMenu = input;
        
        self.menu.scrollerpos[self.CurMenu] = self.menu.curs[self.CurMenu];
        self.menu.curs[input] = self.menu.scrollerpos[input];
        
        if (!self.menu.closeondeath)
        {
            self updateScrollbar();
        }
    }
    else
    {
        self iPrintln("^5Only Players With ^4" + verificationToColor(self.menu.status[input]) + " ^5Can Access This Menu!");
    }
}

























